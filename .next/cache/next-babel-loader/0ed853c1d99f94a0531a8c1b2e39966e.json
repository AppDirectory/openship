{"ast":null,"code":"import _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { Mutation } from 'react-apollo';\nimport { Text, Pane, Dialog, Heading, toaster } from 'evergreen-ui';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nconst Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\nconst CREATE_ORDER = gql`\n  mutation createOrder(\n    $shopName: String!\n    $orderId: Float!\n    $orderName: String!\n    $email: String\n    $first_name: String\n    $last_name: String\n    $streetAddress1: String!\n    $streetAddress2: String\n    $city: String!\n    $state: String!\n    $zip: String!\n    $lineItems: Json!\n    $currency: String!\n    $totalPrice: String!\n    $subTotalPrice: String!\n    $totalDiscount: String!\n    $totalTax: String!\n    $mpCart: String!\n    $zincCart: String!\n    $createAt: String!\n  ) {\n    createOrder(\n      shopName: $shopName\n      orderId: $orderId\n      orderName: $orderName\n      email: $email\n      first_name: $first_name\n      last_name: $last_name\n      streetAddress1: $streetAddress1\n      streetAddress2: $streetAddress2\n      city: $city\n      state: $state\n      zip: $zip\n      lineItems: $lineItems\n      currency: $currency\n      totalPrice: $totalPrice\n      totalDiscount: $totalDiscount\n      subTotalPrice: $subTotalPrice\n      totalTax: $totalTax\n      mpCart: $mpCart\n      zincCart: $zincCart\n      createAt: $createAt\n    ) {\n      id\n      email\n    }\n  }\n`;\n\nfunction readFormField(data, field, onInput) {\n  return React.createElement(Pane, {\n    marginBottom: 6\n  }, React.createElement(Text, {\n    contenteditable: \"true\",\n    fontWeight: 500,\n    size: 400,\n    onInput: onInput\n  }, data), React.createElement(Heading, {\n    lineHeight: \"10px\",\n    fontSize: \"10px\",\n    size: 100\n  }, field));\n}\n\nconst Reshipment = ({\n  order,\n  isShown,\n  onCloseComplete,\n  shop\n}) => {\n  const [first, setFirst] = useState(null);\n  const [last, setLast] = useState(null);\n  const [address, setAddress] = useState(null);\n  const [address2, setAddress2] = useState(null);\n  const [city, setCity] = useState(null);\n  const [state, setState] = useState(null);\n  const [zip, setZip] = useState(null);\n  const [lineItems, setLineItems] = useState(null);\n  const initialItems = [];\n  useEffect(() => {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  const handleLine = (ID, quantity, initialQty) => {\n    const temp = lineItems;\n    temp.map(item => {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        const itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  const resetLineItems = () => {\n    const temp = lineItems;\n    initialItems.reverse();\n    temp.map(item => {\n      initialItems.forEach(function (initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? React.createElement(Mutation, {\n    mutation: CREATE_ORDER\n  }, (createOrder, {\n    error,\n    loading\n  }) => React.createElement(Dialog, {\n    isShown: isShown,\n    title: \"Confirm Reshipment\",\n    onCloseComplete: onCloseComplete,\n    onCancel: close => {\n      resetLineItems();\n      close();\n    },\n    isConfirmLoading: loading,\n    isConfirmDisabled: loading,\n    hasHeader: false,\n    confirmLabel: \"Confirm Reshipment\",\n    onConfirm: async () => {\n      const res = await createOrder({\n        variables: {\n          shopName: `${shop}.myshopify.com`,\n          orderId: order.id.split('/').pop(),\n          orderName: order.name,\n          email: order.email || 'noemail@noemail.com',\n          first_name: first,\n          last_name: last,\n          streetAddress1: address,\n          streetAddress2: address2,\n          city,\n          state,\n          zip,\n          phone: order.shippingAddress.phone,\n          lineItems: lineItems.filter(a => a.node.quantity > 0).map(b => {\n            b.node.id = _parseFloat(b.node.id.split('/').pop());\n            return b.node;\n          }),\n          currency: 'USD',\n          totalPrice: order.totalReceivedSet.shopMoney.amount,\n          subTotalPrice: 0,\n          totalDiscount: 0,\n          totalTax: 0,\n          createAt: order.processedAt,\n          mpCart: '{}',\n          zincCart: '{}',\n          processed: false\n        }\n      });\n      onCloseComplete();\n      toaster.success(`${order.name} has been requested for reshipment.`);\n    }\n  }, React.createElement(Pane, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, React.createElement(Pane, Layout, React.createElement(Pane, {\n    marginBottom: 10\n  }, React.createElement(Text, {\n    fontWeight: 500,\n    size: 500\n  }, order.name), React.createElement(Heading, {\n    size: 100\n  }, \"Order Number\")), readFormField(order.shippingAddress.name.split(' ')[0], 'First Name', e => setFirst(e.target.textContent)), readFormField(order.shippingAddress.name.split(' ').pop(), 'Last Name', e => setLast(e.target.textContent)), readFormField(order.shippingAddress.address1, 'Street Address', e => setAddress(e.target.textContent)), order.shippingAddress.address2 && readFormField(order.shippingAddress.address2, 'Apt, Suite, etc.', e => setAddress2(e.target.textContent)), readFormField(order.shippingAddress.city, 'City', e => setCity(e.target.textContent)), readFormField(order.shippingAddress.province, 'State', e => setState(e.target.textContent)), readFormField(order.shippingAddress.zip, 'Zip Code', e => setZip(e.target.textContent))), React.createElement(Pane, Layout, order.lineItems.edges.map(a => React.createElement(ReshipmentLineItem, {\n    arg: a.node,\n    handleLine: handleLine\n  })))))) : React.createElement(React.Fragment, null);\n};\n\nexport default Reshipment;","map":null,"metadata":{},"sourceType":"module"}