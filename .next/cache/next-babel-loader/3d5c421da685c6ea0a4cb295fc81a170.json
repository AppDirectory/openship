{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION(\n    $email: String!\n    $name: String!\n    $password: String!\n  ) {\n    signup(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nfunction Signup({\n  formChange\n}) {\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const [signup, {\n    error,\n    loading\n  }] = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      name,\n      password,\n      email\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  });\n  return __jsx(Userform, {\n    title: \"Create an account\",\n    handleToggleClick: () => formChange(),\n    buttonTitle: \"Sign Up\",\n    error: error,\n    loading: loading,\n    buttonDisabled: !email || !password || !name,\n    fields: [{\n      label: 'Name',\n      value: name,\n      onChange: setName,\n      icon: 'user'\n    }, {\n      label: 'Email',\n      value: email,\n      onChange: setEmail,\n      icon: 'envelope'\n    }, {\n      label: 'Password',\n      value: password,\n      onChange: setPassword,\n      icon: 'lock'\n    }],\n    bottomText: \"Already have an account?\",\n    bottomLinkText: \"Sign In\",\n    onSubmit: async e => {\n      e.preventDefault();\n      await signup();\n      setName('');\n      setEmail('');\n      setPassword('');\n    }\n  });\n}\n\nexport default Signup;\nSignup.propTypes = {\n  formChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/user/Signup.js"],"names":["React","useState","useMutation","PropTypes","gql","CURRENT_USER_QUERY","Userform","SIGNUP_MUTATION","Signup","formChange","name","setName","password","setPassword","email","setEmail","signup","error","loading","variables","refetchQueries","query","label","value","onChange","icon","e","preventDefault","propTypes","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,eAAe,GAAGH,GAAI;;;;;;;;;;;;CAA5B;;AAcA,SAASI,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAAgC;AAC9B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACW,QAAD;AAAA,OAAWC;AAAX,MAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAACa,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,CAAC,EAAD,CAAlC;AAEA,QAAM,CAACe,MAAD,EAAS;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAT,IAA+BhB,WAAW,CAACK,eAAD,EAAkB;AAChEY,IAAAA,SAAS,EAAE;AAAET,MAAAA,IAAF;AAAQE,MAAAA,QAAR;AAAkBE,MAAAA;AAAlB,KADqD;AAEhEM,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEhB;AAAT,KAAD;AAFgD,GAAlB,CAAhD;AAKA,SACE,MAAC,QAAD;AACE,IAAA,KAAK,EAAC,mBADR;AAEE,IAAA,iBAAiB,EAAE,MAAMI,UAAU,EAFrC;AAGE,IAAA,WAAW,EAAC,SAHd;AAIE,IAAA,KAAK,EAAEQ,KAJT;AAKE,IAAA,OAAO,EAAEC,OALX;AAME,IAAA,cAAc,EAAE,CAACJ,KAAD,IAAU,CAACF,QAAX,IAAuB,CAACF,IAN1C;AAOE,IAAA,MAAM,EAAE,CACN;AAAEY,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,KAAK,EAAEb,IAAxB;AAA8Bc,MAAAA,QAAQ,EAAEb,OAAxC;AAAiDc,MAAAA,IAAI,EAAE;AAAvD,KADM,EAEN;AACEH,MAAAA,KAAK,EAAE,OADT;AAEEC,MAAAA,KAAK,EAAET,KAFT;AAGEU,MAAAA,QAAQ,EAAET,QAHZ;AAIEU,MAAAA,IAAI,EAAE;AAJR,KAFM,EASN;AACEH,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,KAAK,EAAEX,QAFT;AAGEY,MAAAA,QAAQ,EAAEX,WAHZ;AAIEY,MAAAA,IAAI,EAAE;AAJR,KATM,CAPV;AAuBE,IAAA,UAAU,EAAC,0BAvBb;AAwBE,IAAA,cAAc,EAAC,SAxBjB;AAyBE,IAAA,QAAQ,EAAE,MAAMC,CAAN,IAAW;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMX,MAAM,EAAZ;AACAL,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AA/BH,IADF;AAmCD;;AAED,eAAeL,MAAf;AAEAA,MAAM,CAACoB,SAAP,GAAmB;AACjBnB,EAAAA,UAAU,EAAEN,SAAS,CAAC0B;AADL,CAAnB","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\n\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION(\n    $email: String!\n    $name: String!\n    $password: String!\n  ) {\n    signup(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nfunction Signup({ formChange }) {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n\n  const [signup, { error, loading }] = useMutation(SIGNUP_MUTATION, {\n    variables: { name, password, email },\n    refetchQueries: [{ query: CURRENT_USER_QUERY }],\n  });\n\n  return (\n    <Userform\n      title=\"Create an account\"\n      handleToggleClick={() => formChange()}\n      buttonTitle=\"Sign Up\"\n      error={error}\n      loading={loading}\n      buttonDisabled={!email || !password || !name}\n      fields={[\n        { label: 'Name', value: name, onChange: setName, icon: 'user' },\n        {\n          label: 'Email',\n          value: email,\n          onChange: setEmail,\n          icon: 'envelope',\n        },\n\n        {\n          label: 'Password',\n          value: password,\n          onChange: setPassword,\n          icon: 'lock',\n        },\n      ]}\n      bottomText=\"Already have an account?\"\n      bottomLinkText=\"Sign In\"\n      onSubmit={async e => {\n        e.preventDefault();\n        await signup();\n        setName('');\n        setEmail('');\n        setPassword('');\n      }}\n    />\n  );\n}\n\nexport default Signup;\n\nSignup.propTypes = {\n  formChange: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}