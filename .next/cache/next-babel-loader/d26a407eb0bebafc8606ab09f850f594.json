{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query, Mutation } from 'react-apollo';\nimport { Adopt } from 'react-adopt';\nimport { Pane, Heading, Alert, Switch, Spinner, Text, IconButton, Icon, toaster } from 'evergreen-ui';\nimport OrderListItem from '../common/orderListItem/OrderListItem';\nimport Find from '../find/Find';\nimport User from '../user/User';\nimport OrderLine from '../common/orderListItem/OrderLine';\nimport Button from '../common/Button';\nimport { CardStyle } from '../common/DefaultStyles';\nimport MPCart from './Cart/MPCart';\nimport ZincCart from './Cart/ZincCart';\nimport { front, prodFront } from '../../config';\n\nasync function placeZincOrder(data, token, updateOrderFunc) {\n  try {\n    const response = await fetch(`${false ? front : prodFront}/api/zinc/purchase?token=${token}`, {\n      credentials: 'same-origin',\n      mode: 'cors',\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-type': 'application/json',\n        'X-Requested-With': 'Fetch'\n      },\n      body: _JSON$stringify({\n        data\n      })\n    });\n    const res = await response.json();\n    const update = await updateOrderFunc({\n      variables: {\n        id: data.client_notes.os_order_id,\n        zincCheckout: res,\n        processed: 'TRUE'\n      }\n    });\n    console.log('first2', res);\n  } catch (e) {\n    console.log('error', e);\n  }\n}\n\nexport const ORDER_QUERY = gql`\n  query OrdersQuery(\n    $skip: Int\n    $first: Int\n    $orderBy: OrderOrderByInput\n    $processed: Processed\n  ) {\n    orders(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      where: { processed: $processed }\n    ) {\n      id\n      orderId\n      orderName\n      email\n      first_name\n      last_name\n      streetAddress1\n      streetAddress2\n      city\n      state\n      zip\n      phone\n      lineItems\n      currency\n      totalPrice\n      subTotalPrice\n      totalDiscount\n      totalTax\n      createAt\n      mpCart\n      mpCheckout\n      zincCart\n      zincCheckout\n      processed\n      shopName\n    }\n  }\n`;\nexport const PAGINATION_QUERY = gql`\n  query PAGINATION_QUERY {\n    ordersConnection(where: { processed: FALSE }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst UPDATE_ORDER_MUTATION = gql`\n  mutation updateOrder(\n    $id: ID!\n    $mpCart: String\n    $zincCart: String\n    $zincCheckout: Json\n    $first_name: String\n    $last_name: String\n    $streetAddress1: String\n    $streetAddress2: String\n    $city: String\n    $state: String\n    $zip: String\n    $processed: Boolean\n  ) {\n    updateOrder(\n      id: $id\n      mpCart: $mpCart\n      zincCart: $zincCart\n      zincCheckout: $zincCheckout\n      first_name: $first_name\n      last_name: $last_name\n      streetAddress1: $streetAddress1\n      streetAddress2: $streetAddress2\n      city: $city\n      state: $state\n      zip: $zip\n      processed: $processed\n    ) {\n      id\n      email\n    }\n  }\n`;\nconst UPSERT_MUTATION = gql`\n  mutation upsertMatch($shopify: Json!, $marketplace: Json!) {\n    upsertMatch(shopify: $shopify, marketplace: $marketplace) {\n      item\n    }\n  }\n`;\nconst PURCHASE_ORDER_MUTATION = gql`\n  mutation purchaseItems($ids: Json!) {\n    purchaseItems(ids: $ids) {\n      checkout\n      cart\n    }\n  }\n`;\nconst CREATE_CHECKOUT_MUTATION = gql`\n  mutation createCheckout($input: Json!) {\n    createCheckout(input: $input) {\n      checkout\n    }\n  }\n`;\nconst CHECKOUT_ADD_MUTATION = gql`\n  mutation checkoutLineItemsAdd($checkoutId: ID!, $lineItems: Json!) {\n    checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\n      checkout\n    }\n  }\n`;\nconst CHECKOUT_REMOVE_MUTATION = gql`\n  mutation checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: Json!) {\n    checkoutLineItemsRemove(\n      checkoutId: $checkoutId\n      lineItemIds: $lineItemIds\n    ) {\n      checkout\n    }\n  }\n`;\nconst CHECKOUT_UPDATE_MUTATION = gql`\n  mutation checkoutLineItemsUpdate($checkoutId: ID!, $lineItems: Json!) {\n    checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n      checkout\n    }\n  }\n`;\nconst DELETE_ORDER = gql`\n  mutation deleteOrder($id: ID!) {\n    deleteOrder(id: $id) {\n      id\n    }\n  }\n`;\nconst Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\n\nfunction PendingOrders() {\n  const {\n    0: selectedOrderIndex,\n    1: setSelectedOrderIndex\n  } = useState(null); // const [selectedLineIndex, setSelectedLineIndex] = useState([]);\n\n  const {\n    0: skip,\n    1: setSkip\n  } = useState(0);\n  const {\n    0: orderBy,\n    1: setOrderBy\n  } = useState('createdAt_ASC');\n  const {\n    0: firstQ,\n    1: setFirstQ\n  } = useState(100); // const [check, setCheck] = useState(true);\n\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false); // const [checkout, setCheckout] = useState({});\n\n  const {\n    0: cartLoading,\n    1: setCartLoading\n  } = useState(false);\n  const {\n    0: processingOrder,\n    1: setProcessingOrder\n  } = useState(null);\n\n  async function _currentOrder(arg) {\n    setSelectedOrderIndex(arg);\n  }\n\n  async function overwrite(errorText, lineItems, upsertMatchMutation) {\n    setCartLoading(true);\n    const upsertMatchRes = await upsertMatchMutation({\n      variables: {\n        shopify: lineItems.map(a => ({\n          product_id: a.product_id,\n          variant_id: a.variant_id,\n          quantity: a.quantity\n        })),\n        marketplace: mpCart.lineItems.edges.map(a => ({\n          product_id: a.node.id,\n          variant_id: a.node.variant.id,\n          quantity: a.node.quantity\n        }))\n      }\n    });\n    toaster.notify('Line items have been matched to cart items'); // setSelectedOrderIndex(null);\n\n    setCartLoading(false);\n  }\n\n  async function doPurchase(ids, purchaseOrderMutation) {\n    const res = await purchaseOrderMutation({\n      variables: {\n        ids\n      }\n    });\n  }\n\n  async function createCheck(input, orderID, createCheckoutFunc, updateOrderFunc) {\n    const varCheck = await createCheckoutFunc({\n      variables: {\n        input\n      }\n    });\n    const newCheck = varCheck.data.createCheckout.checkout;\n    const res = await updateOrderFunc({\n      variables: {\n        id: orderID,\n        mpCart: _JSON$stringify(newCheck)\n      }\n    });\n  }\n\n  async function addVariant(id, quantity, checkoutID, checkoutLineItemsAddFunc, updateOrderFunc) {\n    toaster.success('checkout does exist');\n    const varCheck = await checkoutLineItemsAddFunc({\n      variables: {\n        checkoutId: checkoutID,\n        lineItems: [{\n          variantId: id,\n          quantity\n        }]\n      }\n    });\n    const newCheck = varCheck.data.checkoutLineItemsAdd.checkout;\n    const res = await updateOrderFunc({\n      variables: {\n        id: selectedOrderIndex,\n        mpCart: _JSON$stringify(newCheck)\n      }\n    });\n  }\n\n  async function addZincItem(id, quantity, title, src, price, cart, updateOrderFunc) {\n    // if (cart && cart.products && cart.products.length) {\n    // const find = cart.products.find(obj => {\n    //   return obj.product_id === id;\n    // });\n    // }\n    const find = cart && cart.products && cart.products.length && cart.products.find(obj => obj.product_id === id);\n\n    if (cart && cart.products && cart.products.length && find !== undefined) {\n      console.log(true);\n      console.log(find);\n      const newQ = find.quantity + quantity;\n      find.quantity = newQ;\n      console.log(find);\n      const res = await updateOrderFunc({\n        variables: {\n          id: selectedOrderIndex,\n          zincCart: _JSON$stringify({\n            products: [find, ...cart.products.filter(a => a.product_id !== id)]\n          })\n        }\n      });\n    } else {\n      console.log(false);\n      const res = await updateOrderFunc({\n        variables: {\n          id: selectedOrderIndex,\n          zincCart: _JSON$stringify({\n            products: [{\n              product_id: id,\n              quantity,\n              title,\n              price,\n              src\n            }, ...(cart && cart.products && cart.products.length ? cart.products : [])]\n          })\n        }\n      });\n    }\n  }\n\n  async function removeMPItem(lineItemIds, checkoutID, checkoutLineItemsRemoveFunc, updateOrderFunc) {\n    const varCheck = await checkoutLineItemsRemoveFunc.mutation({\n      variables: {\n        checkoutId: checkoutID,\n        lineItemIds\n      }\n    });\n    const res = await updateOrderFunc({\n      variables: {\n        id: selectedOrderIndex,\n        mpCart: _JSON$stringify(varCheck.data.checkoutLineItemsRemove.checkout)\n      }\n    });\n  }\n\n  async function updateMPItem(lineItems, checkoutID, checkoutLineItemsUpdateFunc, updateOrderFunc) {\n    const varCheck = await checkoutLineItemsUpdateFunc.mutation({\n      variables: {\n        checkoutId: checkoutID,\n        lineItems\n      }\n    });\n    const res = await updateOrderFunc({\n      variables: {\n        id: selectedOrderIndex,\n        mpCart: _JSON$stringify(varCheck.data.checkoutLineItemsUpdate.checkout)\n      }\n    });\n  }\n\n  function play() {\n    if (firstQ === 1) {\n      setFirstQ(100);\n      setOpen(false);\n      setSkip(0);\n    } else {\n      setFirstQ(1);\n      setOpen(true);\n    } // setSkip(0);\n\n  }\n  /* eslint-disable */\n\n\n  const orderListMutations = {\n    purchaseOrder: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: PURCHASE_ORDER_MUTATION,\n      refetchQueries: () => [{\n        query: ORDER_QUERY,\n        variables: {\n          skip,\n          first: firstQ,\n          orderBy,\n          processed: \"FALSE\"\n        }\n      }, {\n        query: PAGINATION_QUERY\n      }]\n    }, (mutation, result) => render({\n      mutation,\n      result\n    })),\n    deleteOrder: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: DELETE_ORDER,\n      refetchQueries: () => [{\n        query: ORDER_QUERY,\n        variables: {\n          skip,\n          first: firstQ,\n          orderBy,\n          processed: \"FALSE\"\n        }\n      }, {\n        query: PAGINATION_QUERY\n      }]\n    }, (mutation, result) => render({\n      mutation,\n      result\n    })),\n    updateOrder: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: UPDATE_ORDER_MUTATION,\n      refetchQueries: () => [{\n        query: ORDER_QUERY,\n        variables: {\n          skip,\n          first: firstQ,\n          orderBy,\n          processed: \"FALSE\"\n        }\n      }, {\n        query: PAGINATION_QUERY\n      }]\n    }, (mutation, result) => render({\n      mutation,\n      result\n    })),\n    upsertMatch: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: UPSERT_MUTATION\n    }, (mutation, result) => render({\n      mutation,\n      result\n    })),\n    createCheckout: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: CREATE_CHECKOUT_MUTATION,\n      refetchQueries: () => [{\n        query: ORDER_QUERY,\n        variables: {\n          skip: 0,\n          processed: \"FALSE\"\n        }\n      }]\n    }, (mutation, result) => render({\n      mutation,\n      result\n    })),\n    checkoutLineItemsRemove: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: CHECKOUT_REMOVE_MUTATION,\n      refetchQueries: () => [{\n        query: ORDER_QUERY,\n        variables: {\n          skip: 0\n        }\n      }]\n    }, (mutation, result) => render({\n      mutation,\n      result\n    })),\n    checkoutLineItemsUpdate: ({\n      render\n    }) => __jsx(Mutation, {\n      mutation: CHECKOUT_UPDATE_MUTATION,\n      refetchQueries: () => [{\n        query: ORDER_QUERY,\n        variables: {\n          skip: 0\n        }\n      }]\n    }, (mutation, result) => render({\n      mutation,\n      result\n    }))\n  };\n  /* eslint-disable */\n\n  return __jsx(React.Fragment, null, __jsx(Pane, {\n    display: \"flex\",\n    paddingTop: 16,\n    paddingBottom: 16\n  }, __jsx(Pane, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    size: 700\n  }, \"Pending Orders\"))), __jsx(Pane, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, __jsx(Adopt, {\n    mapper: orderListMutations\n  }, ({\n    purchaseOrder,\n    deleteOrder,\n    updateOrder,\n    upsertMatch,\n    createCheckout,\n    checkoutLineItemsRemove,\n    checkoutLineItemsUpdate\n  }) => __jsx(Query, {\n    query: ORDER_QUERY,\n    variables: {\n      skip,\n      first: firstQ,\n      orderBy,\n      processed: \"FALSE\"\n    }\n  }, ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return __jsx(React.Fragment, null, __jsx(Pane, Layout, __jsx(Pane, CardStyle, __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"50vh\"\n    }, __jsx(Spinner, {\n      size: 80\n    })))), __jsx(Pane, Layout, __jsx(Pane, _extends({}, CardStyle, {\n      padding: 10\n    }), __jsx(Alert, {\n      intent: \"warning\",\n      title: \"Please choose an order or a line item.\"\n    }))));\n    if (error) return `Error! ${error.message}`;\n    const {\n      orders\n    } = data;\n    const theOrder = orders.filter(order => order.id === selectedOrderIndex)[0];\n    return __jsx(React.Fragment, null, __jsx(Pane, Layout, __jsx(Pane, CardStyle, __jsx(Pane, {\n      display: \"flex\",\n      paddingX: \"1em\",\n      paddingY: \".8em\",\n      alignItems: \"center\"\n    }, __jsx(Query, {\n      query: PAGINATION_QUERY\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      const count = data.ordersConnection ? data.ordersConnection.aggregate.count : 0;\n      return __jsx(React.Fragment, null, firstQ === 1 ? __jsx(Heading, {\n        size: 100\n      }, \"Order \", skip + 1, \" of \", count) : __jsx(Heading, {\n        size: 100\n      }, count, \" Orders\"), __jsx(Pane, {\n        marginLeft: \"auto\",\n        display: \"flex\"\n      }, __jsx(Button, {\n        intent: \"none\",\n        height: 20,\n        marginRight: 5,\n        onClick: () => setOrderBy(orderBy === \"createdAt_DESC\" ? \"createdAt_ASC\" : \"createdAt_DESC\")\n      }, orderBy.split(\"_\")[1]), __jsx(Button, {\n        intent: \"success\",\n        height: 20,\n        marginRight: 5,\n        onClick: () => play()\n      }, firstQ !== 1 ? \"Play\" : \"Show All\", firstQ !== 1 && __jsx(Icon, {\n        size: 13,\n        icon: \"play\",\n        marginRight: -4,\n        marginLeft: 3\n      })), firstQ === 1 ? __jsx(Button, {\n        intent: \"warning\",\n        height: 20,\n        onClick: () => setSkip(skip + 1),\n        disabled: firstQ !== 1 || skip + 1 === count\n      }, \"Skip\", __jsx(Icon, {\n        size: 13,\n        icon: \"double-chevron-right\",\n        marginRight: -4,\n        marginLeft: 3\n      })) : __jsx(Mutation, {\n        mutation: PURCHASE_ORDER_MUTATION,\n        refetchQueries: () => [{\n          query: ORDER_QUERY,\n          variables: {\n            skip,\n            first: firstQ,\n            orderBy\n          }\n        }, {\n          query: PAGINATION_QUERY\n        }]\n      }, (purchaseOrder, {\n        error,\n        loading\n      }) => __jsx(Button, {\n        intent: \"warning\",\n        height: 20,\n        disabled: firstQ !== 1 || skip + 1 === count,\n        isLoading: loading // onClick={() => {\n        //   doPurchase(\n        //     orders\n        //       .filter(\n        //         order =>\n        //           order.mpCart &&\n        //           JSON.parse(order.mpCart)\n        //             .length > 0 &&\n        //           JSON.parse(\n        //             order.mpCart\n        //           )[0].status === \"matched\"\n        //       )\n        //       .map(a => a.id),\n        //     purchaseOrder\n        //   );\n        //   setSkip(skip + 1);\n        // }}\n\n      }, \"Multi |\", \" \"))));\n    })), orders.length ? orders.map(order => __jsx(Pane, {\n      key: order.id\n    }, __jsx(Pane, {\n      opacity: processingOrder === order.id && \"0.2\",\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\"\n    }, processingOrder === order.id && __jsx(Pane, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\"\n    }, __jsx(Spinner, {\n      size: 80\n    })), __jsx(Pane, {\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(Pane, {\n      borderLeft: `3px solid ${selectedOrderIndex === order.id ? \"#007489\" : \"transparent\"}`\n    }, __jsx(OrderListItem, _extends({}, order, {\n      updateIndex: arg => _currentOrder(arg),\n      open: open // updateLine={arg => _currentLineItem(arg)}\n      // createCheckout={createCheckout.mutation}\n      ,\n      createCheckout: a => createCheck(a, order.id, createCheckout.mutation, updateOrder.mutation),\n      key: order.id,\n      index: order.id // selectedLineIndex={selectedLineIndex}\n      ,\n      selectedOrderIndex: selectedOrderIndex // disabled={selectedOrderIndex || loading}\n      ,\n      disabled: !(!selectedOrderIndex || selectedOrderIndex === order.id),\n      buttons: __jsx(React.Fragment, null, __jsx(IconButton, {\n        height: 20,\n        appearance: \"minimal\",\n        inent: \"danger\",\n        icon: \"cross\",\n        iconSize: 15,\n        marginLeft: 6,\n        pointerEvents: \"visible\",\n        onClick: async e => {\n          e.stopPropagation();\n          setProcessingOrder(order.id);\n          const res = await deleteOrder.mutation({\n            variables: {\n              id: order.id\n            }\n          });\n          setProcessingOrder(null);\n        }\n      }), __jsx(User, null, ({\n        data: {\n          me\n        }\n      }) => {\n        return __jsx(IconButton, {\n          height: 20,\n          appearance: \"minimal\",\n          icon: \"tick\",\n          iconSize: 15,\n          marginLeft: 6,\n          pointerEvents: loading ? \"none\" : \"visible\",\n          onClick: async e => {\n            e.stopPropagation();\n            setProcessingOrder(order.id);\n            setSelectedOrderIndex(null);\n\n            if (JSON.parse(order.mpCart).lineItems.edges.length > 0) {\n              await doPurchase([order.id], purchaseOrder.mutation);\n            } else if (JSON.parse(order.zincCart).products.length > 0) {\n              toaster.success(\"zinc called\"); // const update = await updateOrder.mutation({\n              //   variables: {\n              //     id: 'cjvhp95z5000n0772cx2kqwnv',\n              //     processed: true,\n              //   },\n              // });\n\n              await placeZincOrder({\n                retailer: \"amazon\",\n                products: JSON.parse(order.zincCart).products,\n                shipping_address: {\n                  first_name: order.first_name,\n                  last_name: order.last_name,\n                  address_line1: order.streetAddress1,\n                  address_line2: order.streetAddress2,\n                  zip_code: order.zip,\n                  city: order.city,\n                  state: order.state,\n                  country: \"US\",\n                  phone_number: \"281-337-9862\"\n                },\n                addax: true,\n                is_gift: true,\n                gift_message: `Here is your package, ${order.first_name}! Enjoy!`,\n                shipping: {\n                  order_by: \"price\",\n                  max_days: 5,\n                  max_price: 1000\n                },\n                webhooks: {\n                  request_succeeded: \"https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c\",\n                  request_failed: \"https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c\",\n                  tracking_obtained: \"https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c\"\n                },\n                client_notes: {\n                  shopify_order_id: order.orderId,\n                  os_order_id: order.id\n                }\n              }, me.zincToken, updateOrder.mutation);\n            } else {\n              toaster.success(\"not called\");\n            }\n\n            setProcessingOrder(null);\n          }\n        });\n      }))\n    }))))))) : __jsx(Pane, {\n      background: \"tint2\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\",\n      borderRadius: 3\n    }, __jsx(Heading, {\n      margin: \"1em\",\n      size: 600\n    }, \"Your pending orders will appear here.\")))), __jsx(Pane, Layout, selectedOrderIndex ? __jsx(Pane, null, __jsx(Pane, _extends({}, CardStyle, {\n      padding: 15,\n      opacity: cartLoading && \"0.2\",\n      width: \"100%\",\n      height: \"100%\"\n    }), cartLoading && __jsx(Pane, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      margin: \"auto\"\n    }, __jsx(Pane, {\n      position: \"fixed\"\n    }, __jsx(Spinner, {\n      size: 80\n    }))), __jsx(Pane, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      fontWeight: 600,\n      background: \"white\"\n    }, __jsx(React.Fragment, null, __jsx(Heading, {\n      size: 400\n    }, theOrder.orderName), __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginLeft: 4\n    }, __jsx(Text, {\n      size: 300,\n      fontWeight: 500,\n      marginX: 10,\n      color: \"#7B8B9A\",\n      className: \"hover\",\n      cursor: \"pointer\",\n      onClick: () => {\n        // setSelectedLineIndex([]);\n        setSelectedOrderIndex(null);\n      }\n    }, \"Empty\"), __jsx(Button, {\n      intent: \"primary\",\n      height: 20,\n      onClick: () => overwrite(JSON.parse(theOrder.mpCart), theOrder.lineItems, upsertMatch.mutation),\n      disabled: theOrder.mpCart && theOrder.mpCart.lineItems && theOrder.mpCart.lineItems.edges.length === 0 || !theOrder.mpCart\n    }, \"Match\")))), __jsx(Pane, null, __jsx(Pane, {\n      display: \"flex\"\n    }, __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300,\n      marginRight: 4\n    }, theOrder.first_name), __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300\n    }, theOrder.last_name)), __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300\n    }, theOrder.streetAddress1), theOrder.streetAddress2 && __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300\n    }, theOrder.streetAddress2), __jsx(Pane, {\n      display: \"flex\"\n    }, __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300,\n      marginRight: 4\n    }, theOrder.city), __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300,\n      marginRight: 4\n    }, theOrder.state), __jsx(Text, {\n      contenteditable: \"true\",\n      size: 300\n    }, theOrder.zip))), __jsx(Pane, {\n      paddingTop: 10\n    }, __jsx(Pane, {\n      marginLeft: \"-3px\",\n      background: \"#F7F9FD\",\n      border: \"muted\",\n      paddingY: \".7em\",\n      paddingX: \"1em\"\n    }, __jsx(Pane, {\n      marginBottom: 10\n    }, __jsx(Text, {\n      size: 400,\n      fontWeight: 500,\n      color: \"#084B8A\"\n    }, \"Line Items\")), theOrder.lineItems.map(a => __jsx(OrderLine, {\n      key: a.id,\n      item: a.node ? a.node : a\n    })))), __jsx(MPCart, {\n      checkout: JSON.parse(theOrder.mpCart),\n      removeItem: a => removeMPItem(a, JSON.parse(theOrder.mpCart).id, checkoutLineItemsRemove, updateOrder.mutation),\n      checkoutLineItemsUpdate: a => updateMPItem(a, JSON.parse(theOrder.mpCart).id, checkoutLineItemsUpdate, updateOrder.mutation),\n      loading: updateOrder.result.loading\n    }), __jsx(ZincCart, {\n      cart: JSON.parse(theOrder.zincCart),\n      removeItem: async productID => {\n        const res = await updateOrder.mutation({\n          variables: {\n            id: selectedOrderIndex,\n            zincCart: _JSON$stringify({\n              products: JSON.parse(theOrder.zincCart).products.filter(a => a.product_id !== productID)\n            })\n          }\n        });\n      },\n      checkoutLineItemsUpdate: async (productID, quantity) => {\n        if (quantity === 0) {\n          const res = await updateOrder.mutation({\n            variables: {\n              id: selectedOrderIndex,\n              zincCart: _JSON$stringify({\n                products: JSON.parse(theOrder.zincCart).products.filter(a => a.product_id !== productID)\n              })\n            }\n          });\n        } else {\n          const find = JSON.parse(theOrder.zincCart).products.find(obj => {\n            return obj.product_id === productID;\n          });\n          const newQ = quantity;\n          find.quantity = newQ;\n          const res = await updateOrder.mutation({\n            variables: {\n              id: selectedOrderIndex,\n              zincCart: _JSON$stringify({\n                products: [find, ...JSON.parse(theOrder.zincCart).products.filter(a => a.product_id !== productID)]\n              })\n            }\n          });\n        }\n      },\n      loading: updateOrder.result.loading\n    }))) : __jsx(Pane, _extends({}, CardStyle, {\n      padding: 10\n    }), __jsx(Alert, {\n      intent: \"warning\",\n      title: \"Please choose an order or a line item.\"\n    })), __jsx(Mutation, {\n      mutation: CHECKOUT_ADD_MUTATION\n    }, (checkoutLineItemsAdd, {\n      error,\n      loading\n    }) => __jsx(Find, {\n      headerSize: 600,\n      atcDisabled: !theOrder,\n      addMPItem: (a, b) => {\n        if (theOrder.mpCart && JSON.parse(theOrder.mpCart).id) {\n          addVariant(a, b, JSON.parse(theOrder.mpCart).id, checkoutLineItemsAdd, updateOrder.mutation);\n        } else {\n          toaster.success(\"checkout does not exist\");\n          createCheck({\n            shippingAddress: {\n              address1: theOrder.streetAddress1,\n              address2: theOrder.streetAddress2 && theOrder.streetAddress2,\n              city: theOrder.city,\n              province: theOrder.state,\n              country: \"US\",\n              zip: theOrder.zip,\n              firstName: theOrder.first_name,\n              lastName: theOrder.last_name\n            },\n            lineItems: [{\n              variantId: a,\n              quantity: b\n            }]\n          }, theOrder.id, createCheckout.mutation, updateOrder.mutation);\n        }\n      },\n      addZincItem: (a, b, c, d, e) => addZincItem(a, b, c, d, e, JSON.parse(theOrder.zincCart), updateOrder.mutation)\n    }))));\n  }))));\n}\n\nexport default PendingOrders;","map":null,"metadata":{},"sourceType":"module"}