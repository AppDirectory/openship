{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Pane, Heading, Text, Avatar, Icon } from 'evergreen-ui';\nimport VariantSelector from './VariantSelector';\nimport Button from '../../common/Button';\n\nclass Product extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleOptionChange\", event => {\n      const {\n        product\n      } = this.props;\n      const {\n        target\n      } = event;\n      const {\n        selectedOptions\n      } = this.state;\n      selectedOptions[target.name] = target.value;\n      const selectedVariant = product.variants.edges.find(variant => variant.node.selectedOptions.every(selectedOption => selectedOptions[selectedOption.name] === selectedOption.value)).node;\n      this.setState({\n        selectedVariant,\n        selectedVariantImage: selectedVariant.image.src\n      });\n    });\n\n    _defineProperty(this, \"handleQuantityChange\", event => {\n      this.setState({\n        selectedVariantQuantity: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"handleQuantityDown\", () => {\n      this.setState(prevState => ({\n        selectedVariantQuantity: prevState.selectedVariantQuantity - 1 || 1\n      }));\n    });\n\n    _defineProperty(this, \"handleQuantityUp\", () => {\n      this.setState(prevState => ({\n        selectedVariantQuantity: prevState.selectedVariantQuantity + 1\n      }));\n    });\n\n    _defineProperty(this, \"findImage\", (images, variantId) => {\n      const primary = images[0];\n      const image = images.filter(function (a) {\n        return a.variant_ids.includes(variantId);\n      })[0];\n      return (image || primary).src;\n    });\n\n    this.state = {\n      selectedOptions: {},\n      selectedVariantQuantity: 1\n    };\n  }\n\n  componentWillMount() {\n    const {\n      product\n    } = this.props;\n    product.options.forEach(selector => {\n      this.setState(prevState => ({\n        selectedOptions: _objectSpread({}, prevState.selectedOptions, {\n          [selector.name]: selector.values[0]\n        })\n      }));\n    });\n  }\n\n  render() {\n    const {\n      product,\n      addVariantToCart,\n      atcDisabled\n    } = this.props;\n    const {\n      selectedVariantImage,\n      selectedVariantQuantity,\n      selectedVariant\n    } = this.state;\n    const variantImage = selectedVariantImage || product.images.edges[0].node.src;\n    const variant = selectedVariant || product.variants.edges[0].node;\n    const variantQuantity = selectedVariantQuantity || 1;\n    const variantSelectors = product.options.map(option => __jsx(VariantSelector, {\n      handleOptionChange: this.handleOptionChange,\n      key: option.id.toString(),\n      option: option\n    }));\n    return __jsx(React.Fragment, null, __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(Pane, {\n      padding: 15\n    }, product.images.edges.length && __jsx(Avatar, {\n      src: variantImage,\n      alt: `${product.title} product shot`,\n      borderStyle: \"solid\",\n      borderWidth: \"1px\",\n      borderRadius: 3,\n      borderColor: \"#e8e9ea\",\n      size: 90\n    })), __jsx(Pane, {\n      padding: 15,\n      paddingLeft: 0,\n      marginTop: 3,\n      marginBottom: \"auto\"\n    }, __jsx(Heading, {\n      size: 500\n    }, product.title), __jsx(Heading, {\n      size: 400,\n      marginRight: 10,\n      color: \"green\"\n    }, \"$\", variant.price), __jsx(Pane, {\n      display: \"flex\",\n      marginTop: 3,\n      marginBottom: 7\n    }, variantSelectors), !atcDisabled && __jsx(Pane, {\n      display: \"flex\"\n    }, __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      paddingRight: 5\n    }, __jsx(Pane, {\n      display: \"flex\",\n      paddingRight: 5,\n      height: 20\n    }, __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      background: \"#f4f4f4\",\n      paddingX: 5,\n      borderRadius: 2,\n      boxShadow: \"0 0 2px rgba(67, 90, 111, 0.3)\"\n    }, __jsx(Icon, {\n      color: \"#425A70\",\n      icon: \"minus\",\n      appearance: \"minimal\",\n      size: 12,\n      cursor: \"pointer\",\n      onClick: this.handleQuantityDown\n    }), __jsx(Text, {\n      size: 300,\n      marginX: 9\n    }, selectedVariantQuantity), __jsx(Icon, {\n      color: \"#425A70\",\n      icon: \"plus\",\n      appearance: \"minimal\",\n      size: 12,\n      cursor: \"pointer\",\n      onClick: this.handleQuantityUp\n    }))), __jsx(Pane, {\n      height: 20\n    }, __jsx(Button, {\n      boxShadow: \"0 0 2px rgba(67, 90, 111, 0.3)\",\n      intent: \"primary\",\n      height: 20,\n      onClick: () => addVariantToCart(variant.id, selectedVariantQuantity),\n      disabled: atcDisabled\n    }, \"Add to Cart\")))))));\n  }\n\n}\n\nexport default Product;","map":null,"metadata":{},"sourceType":"module"}