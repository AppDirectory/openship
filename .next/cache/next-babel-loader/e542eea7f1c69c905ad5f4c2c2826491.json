{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation SIGNUP_MUTATION(\\n    $email: String!\\n    $name: String!\\n    $password: String!\\n  ) {\\n    signup(email: $email, name: $name, password: $password) {\\n      id\\n      email\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\nvar SIGNUP_MUTATION = gql(_templateObject());\n\nfunction Signup(_ref) {\n  var formChange = _ref.formChange;\n\n  var _useState = useState(''),\n      name = _useState[0],\n      setName = _useState[1];\n\n  var _useState2 = useState(''),\n      password = _useState2[0],\n      setPassword = _useState2[1];\n\n  var _useState3 = useState(''),\n      email = _useState3[0],\n      setEmail = _useState3[1];\n\n  var _useMutation = useMutation(SIGNUP_MUTATION, {\n    variables: {\n      name: name,\n      password: password,\n      email: email\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      signup = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      error = _useMutation2$.error,\n      loading = _useMutation2$.loading;\n\n  return __jsx(Userform, {\n    title: \"Create an account\",\n    handleToggleClick: function handleToggleClick() {\n      return formChange();\n    },\n    buttonTitle: \"Sign Up\",\n    error: error,\n    loading: loading,\n    buttonDisabled: !email || !password || !name,\n    fields: [{\n      label: 'Name',\n      value: name,\n      onChange: setName,\n      icon: 'user'\n    }, {\n      label: 'Email',\n      value: email,\n      onChange: setEmail,\n      icon: 'envelope'\n    }, {\n      label: 'Password',\n      value: password,\n      onChange: setPassword,\n      icon: 'lock'\n    }],\n    bottomText: \"Already have an account?\",\n    bottomLinkText: \"Sign In\",\n    onSubmit: function _callee(e) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(signup());\n\n            case 3:\n              setName('');\n              setEmail('');\n              setPassword('');\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  });\n}\n\nexport default Signup;\nSignup.propTypes = {\n  formChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/user/Signup.js"],"names":["React","useState","useMutation","PropTypes","gql","CURRENT_USER_QUERY","Userform","SIGNUP_MUTATION","Signup","formChange","name","setName","password","setPassword","email","setEmail","variables","refetchQueries","query","signup","error","loading","label","value","onChange","icon","e","preventDefault","propTypes","func"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,eAAe,GAAGH,GAAH,mBAArB;;AAcA,SAASI,MAAT,OAAgC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACNR,QAAQ,CAAC,EAAD,CADF;AAAA,MACvBS,IADuB;AAAA,MACjBC,OADiB;;AAAA,mBAEEV,QAAQ,CAAC,EAAD,CAFV;AAAA,MAEvBW,QAFuB;AAAA,MAEbC,WAFa;;AAAA,mBAGJZ,QAAQ,CAAC,EAAD,CAHJ;AAAA,MAGvBa,KAHuB;AAAA,MAGhBC,QAHgB;;AAAA,qBAKOb,WAAW,CAACK,eAAD,EAAkB;AAChES,IAAAA,SAAS,EAAE;AAAEN,MAAAA,IAAI,EAAJA,IAAF;AAAQE,MAAAA,QAAQ,EAARA,QAAR;AAAkBE,MAAAA,KAAK,EAALA;AAAlB,KADqD;AAEhEG,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,KAAK,EAAEb;AAAT,KAAD;AAFgD,GAAlB,CALlB;AAAA;AAAA,MAKvBc,MALuB;AAAA;AAAA,MAKbC,KALa,kBAKbA,KALa;AAAA,MAKNC,OALM,kBAKNA,OALM;;AAU9B,SACE,MAAC,QAAD;AACE,IAAA,KAAK,EAAC,mBADR;AAEE,IAAA,iBAAiB,EAAE;AAAA,aAAMZ,UAAU,EAAhB;AAAA,KAFrB;AAGE,IAAA,WAAW,EAAC,SAHd;AAIE,IAAA,KAAK,EAAEW,KAJT;AAKE,IAAA,OAAO,EAAEC,OALX;AAME,IAAA,cAAc,EAAE,CAACP,KAAD,IAAU,CAACF,QAAX,IAAuB,CAACF,IAN1C;AAOE,IAAA,MAAM,EAAE,CACN;AAAEY,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,KAAK,EAAEb,IAAxB;AAA8Bc,MAAAA,QAAQ,EAAEb,OAAxC;AAAiDc,MAAAA,IAAI,EAAE;AAAvD,KADM,EAEN;AACEH,MAAAA,KAAK,EAAE,OADT;AAEEC,MAAAA,KAAK,EAAET,KAFT;AAGEU,MAAAA,QAAQ,EAAET,QAHZ;AAIEU,MAAAA,IAAI,EAAE;AAJR,KAFM,EASN;AACEH,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,KAAK,EAAEX,QAFT;AAGEY,MAAAA,QAAQ,EAAEX,WAHZ;AAIEY,MAAAA,IAAI,EAAE;AAJR,KATM,CAPV;AAuBE,IAAA,UAAU,EAAC,0BAvBb;AAwBE,IAAA,cAAc,EAAC,SAxBjB;AAyBE,IAAA,QAAQ,EAAE,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACRA,cAAAA,CAAC,CAACC,cAAF;AADQ;AAAA,+CAEFR,MAAM,EAFJ;;AAAA;AAGRR,cAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,cAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,cAAAA,WAAW,CAAC,EAAD,CAAX;;AALQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBZ,IADF;AAmCD;;AAED,eAAeL,MAAf;AAEAA,MAAM,CAACoB,SAAP,GAAmB;AACjBnB,EAAAA,UAAU,EAAEN,SAAS,CAAC0B;AADL,CAAnB","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\n\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION(\n    $email: String!\n    $name: String!\n    $password: String!\n  ) {\n    signup(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nfunction Signup({ formChange }) {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n\n  const [signup, { error, loading }] = useMutation(SIGNUP_MUTATION, {\n    variables: { name, password, email },\n    refetchQueries: [{ query: CURRENT_USER_QUERY }],\n  });\n\n  return (\n    <Userform\n      title=\"Create an account\"\n      handleToggleClick={() => formChange()}\n      buttonTitle=\"Sign Up\"\n      error={error}\n      loading={loading}\n      buttonDisabled={!email || !password || !name}\n      fields={[\n        { label: 'Name', value: name, onChange: setName, icon: 'user' },\n        {\n          label: 'Email',\n          value: email,\n          onChange: setEmail,\n          icon: 'envelope',\n        },\n\n        {\n          label: 'Password',\n          value: password,\n          onChange: setPassword,\n          icon: 'lock',\n        },\n      ]}\n      bottomText=\"Already have an account?\"\n      bottomLinkText=\"Sign In\"\n      onSubmit={async e => {\n        e.preventDefault();\n        await signup();\n        setName('');\n        setEmail('');\n        setPassword('');\n      }}\n    />\n  );\n}\n\nexport default Signup;\n\nSignup.propTypes = {\n  formChange: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}