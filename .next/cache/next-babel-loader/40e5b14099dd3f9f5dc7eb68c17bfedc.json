{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createOrder(\\n    $shopName: String!\\n    $orderId: Float!\\n    $orderName: String!\\n    $email: String\\n    $first_name: String\\n    $last_name: String\\n    $streetAddress1: String!\\n    $streetAddress2: String\\n    $city: String!\\n    $state: String!\\n    $zip: String!\\n    $lineItems: Json!\\n    $currency: String!\\n    $totalPrice: String!\\n    $subTotalPrice: String!\\n    $totalDiscount: String!\\n    $totalTax: String!\\n    $mpCart: String!\\n    $zincCart: String!\\n    $processed: Processed\\n    $createAt: String!\\n  ) {\\n    createOrder(\\n      shopName: $shopName\\n      orderId: $orderId\\n      orderName: $orderName\\n      email: $email\\n      first_name: $first_name\\n      last_name: $last_name\\n      streetAddress1: $streetAddress1\\n      streetAddress2: $streetAddress2\\n      city: $city\\n      state: $state\\n      zip: $zip\\n      lineItems: $lineItems\\n      currency: $currency\\n      totalPrice: $totalPrice\\n      totalDiscount: $totalDiscount\\n      subTotalPrice: $subTotalPrice\\n      totalTax: $totalTax\\n      mpCart: $mpCart\\n      zincCart: $zincCart\\n      processed: $processed\\n      createAt: $createAt\\n    ) {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Text, Box, Heading, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, useToast, Button } from '@chakra-ui/core';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nimport { ORDER_QUERY, PAGINATION_QUERY } from '../pending/Pending';\nvar Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\nvar wideText = {\n  fontSize: 'xs',\n  fontWeight: 500,\n  color: 'gray.500',\n  letterSpacing: 'wide',\n  textTransform: 'uppercase'\n};\nvar CREATE_ORDER = gql(_templateObject());\n\nfunction readFormField(data, field, onInput) {\n  return __jsx(Box, {\n    marginBottom: 2\n  }, __jsx(Text, {\n    contentEditable: \"true\",\n    onInput: onInput,\n    fontWeight: 500,\n    fontSize: \"md\",\n    color: \"text\"\n  }, data), __jsx(Heading, wideText, field));\n}\n\nvar Reshipment = function Reshipment(_ref) {\n  var order = _ref.order,\n      shop = _ref.shop,\n      isOpen = _ref.isOpen,\n      onClose = _ref.onClose;\n\n  var _useState = useState(null),\n      first = _useState[0],\n      setFirst = _useState[1];\n\n  var _useState2 = useState(null),\n      last = _useState2[0],\n      setLast = _useState2[1];\n\n  var _useState3 = useState(null),\n      address = _useState3[0],\n      setAddress = _useState3[1];\n\n  var _useState4 = useState(null),\n      address2 = _useState4[0],\n      setAddress2 = _useState4[1];\n\n  var _useState5 = useState(null),\n      city = _useState5[0],\n      setCity = _useState5[1];\n\n  var _useState6 = useState(null),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var _useState7 = useState(null),\n      zip = _useState7[0],\n      setZip = _useState7[1];\n\n  var _useState8 = useState(null),\n      lineItems = _useState8[0],\n      setLineItems = _useState8[1];\n\n  var initialItems = [];\n  var toast = useToast();\n\n  var _useMutation = useMutation(CREATE_ORDER, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: 0,\n        first: 100,\n        orderBy: 'createdAt_ASC',\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createOrder = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  useEffect(function () {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  var handleLine = function handleLine(ID, quantity, initialQty) {\n    var temp = lineItems;\n    temp.map(function (item) {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        var itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  var resetLineItems = function resetLineItems() {\n    var temp = lineItems;\n    initialItems.reverse();\n    temp.map(function (item) {\n      initialItems.forEach(function (initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, null, __jsx(ModalHeader, null, \"Request Reshipment\"), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, __jsx(Box, Layout, __jsx(Box, {\n    marginBottom: 4\n  }, __jsx(Text, {\n    fontWeight: 600,\n    fontSize: \"md\",\n    color: \"text\"\n  }, order.name), __jsx(Heading, wideText, \"Order Number\")), readFormField(order.shippingAddress.name.split(' ')[0], 'First Name', function (e) {\n    return setFirst(e.target.textContent);\n  }), readFormField(order.shippingAddress.name.split(' ').pop(), 'Last Name', function (e) {\n    return setLast(e.target.textContent);\n  }), readFormField(order.shippingAddress.address1, 'Street Address', function (e) {\n    return setAddress(e.target.textContent);\n  }), order.shippingAddress.address2 && readFormField(order.shippingAddress.address2, 'Apt, Suite, etc.', function (e) {\n    return setAddress2(e.target.textContent);\n  }), readFormField(order.shippingAddress.city, 'City', function (e) {\n    return setCity(e.target.textContent);\n  }), readFormField(order.shippingAddress.province, 'State', function (e) {\n    return setState(e.target.textContent);\n  }), readFormField(order.shippingAddress.zip, 'Zip Code', function (e) {\n    return setZip(e.target.textContent);\n  })), __jsx(Box, Layout, order.lineItems.edges.map(function (a) {\n    return __jsx(ReshipmentLineItem, {\n      arg: a.node,\n      handleLine: handleLine\n    });\n  })))), __jsx(ModalFooter, null, __jsx(Button, {\n    variant: \"ghost\",\n    mr: 3,\n    onClick: onClose\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    bg: \"blue.50\",\n    _hover: {\n      bg: 'blue.100'\n    },\n    isLoading: loading,\n    onClick: function _callee() {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(createOrder({\n                variables: {\n                  shopName: \"\".concat(shop, \".myshopify.com\"),\n                  orderId: order.id.split('/').pop(),\n                  orderName: order.name,\n                  email: order.email || 'noemail@noemail.com',\n                  first_name: first,\n                  last_name: last,\n                  streetAddress1: address,\n                  streetAddress2: address2,\n                  city: city,\n                  state: state,\n                  zip: zip,\n                  phone: order.shippingAddress.phone,\n                  lineItems: lineItems.filter(function (a) {\n                    return a.node.quantity > 0;\n                  }).map(function (b) {\n                    b.node.id = parseFloat(b.node.id.split('/').pop());\n                    return b.node;\n                  }),\n                  currency: 'USD',\n                  totalPrice: order.totalReceivedSet.shopMoney.amount,\n                  subTotalPrice: 0,\n                  totalDiscount: 0,\n                  totalTax: 0,\n                  createAt: order.processedAt,\n                  mpCart: '{}',\n                  zincCart: '{}',\n                  processed: 'FALSE'\n                }\n              }));\n\n            case 2:\n              res = _context.sent;\n              onClose();\n              toast({\n                position: 'top-right',\n                title: \"\".concat(order.name, \" has been requested for reshipment.\"),\n                status: 'success',\n                duration: 2000,\n                isClosable: true\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, \"Confirm Reshipment\")))) : __jsx(React.Fragment, null);\n};\n\nexport default Reshipment;","map":null,"metadata":{},"sourceType":"module"}