{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation RESET_MUTATION(\\n    $resetToken: String!\\n    $password: String!\\n    $confirmPassword: String!\\n  ) {\\n    resetPassword(\\n      resetToken: $resetToken\\n      password: $password\\n      confirmPassword: $confirmPassword\\n    ) {\\n      id\\n      email\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { Box, Spinner } from '@chakra-ui/core';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\nimport Logo from '../logo/Logo';\nvar RESET_MUTATION = gql(_templateObject());\n\nfunction Reset(_ref) {\n  var resetToken = _ref.resetToken;\n\n  var _useState = useState(''),\n      password = _useState[0],\n      setPassword = _useState[1];\n\n  var _useState2 = useState(''),\n      confirmPassword = _useState2[0],\n      setConfirmPassword = _useState2[1];\n\n  var _useMutation = useMutation(RESET_MUTATION, {\n    variables: {\n      resetToken: resetToken,\n      password: password,\n      confirmPassword: confirmPassword\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }],\n    onCompleted: function onCompleted() {\n      Router.push('/');\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      reset = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      error = _useMutation2$.error,\n      loading = _useMutation2$.loading,\n      called = _useMutation2$.called;\n\n  useEffect(function () {\n    if (!resetToken) {\n      Router.push('/');\n    }\n  });\n  return __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flexDirection: \"column\",\n    height: \"100vh\",\n    background: \"#F9F9FB\"\n  }, resetToken ? __jsx(Box, {\n    boxShadow: \"0 0 1px rgba(67,90,111,.47), 0 2px 4px -2px rgba(67,90,111,.3)\",\n    margin: 2,\n    background: \"white\",\n    p: 4,\n    borderRadius: 3\n  }, __jsx(Box, {\n    width: 180,\n    marginBottom: \"15px\"\n  }, __jsx(Logo, {\n    color: \"#162b4c\"\n  })), __jsx(Userform, {\n    title: \"Please enter a new password\",\n    handleToggleClick: function handleToggleClick() {\n      Router.push('/');\n    },\n    buttonTitle: \"Confirm\",\n    buttonColor: \"#47B881\",\n    error: error,\n    loading: loading,\n    buttonDisabled: !password || !confirmPassword,\n    fields: [{\n      label: 'Password',\n      value: password,\n      onChange: setPassword,\n      icon: 'lock'\n    }, {\n      label: 'Confirm Password',\n      value: confirmPassword,\n      onChange: setConfirmPassword,\n      icon: 'lock',\n      type: 'password'\n    }] // bottomText=\"Already have an account?\"\n    ,\n    bottomLinkText: \"Back to Sign In\",\n    onSubmit: function _callee(e) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(reset());\n\n            case 3:\n              setPassword('');\n              setConfirmPassword('');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  })) : __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"0.65s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"xl\"\n  }));\n}\n\nexport default Reset;","map":null,"metadata":{},"sourceType":"module"}