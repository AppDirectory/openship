{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Box, Button, Badge, Spinner, Heading, Text, InputRightElement, InputGroup, Input } from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\n\nfunction getTracking(url, input, setResult, setLoading) {\n  setLoading(true);\n  setResult('');\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: \"\\n{\\n  orders(\\n    first: 1\\n    query: \\\"\".concat(input, \"\\\"\\n  ) {\\n    edges {\\n      node {\\n        fulfillments(first: 25) {\\n          trackingInfo {\\n            company\\n            number\\n            url\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n    \")\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    if (res.data.orders.edges.length && res.data.orders.edges[0].node.fulfillments.length && res.data.orders.edges[0].node.fulfillments[0].trackingInfo.length) {\n      setResult(res.data.orders.edges[0].node.fulfillments[0].trackingInfo[0]);\n    } else {\n      setResult({\n        error: \"No orders found matching \".concat(input)\n      });\n    }\n\n    setLoading(false);\n  });\n}\n\nvar Tracking = function Tracking(_ref) {\n  var url = _ref.url;\n\n  var _useState = useState(''),\n      result = _useState[0],\n      setResult = _useState[1];\n\n  var _useState2 = useState(''),\n      input = _useState2[0],\n      setInput = _useState2[1];\n\n  var _useState3 = useState(false),\n      loading = _useState3[0],\n      setLoading = _useState3[1];\n\n  return __jsx(Box, {\n    minWidth: \"500px\",\n    boxShadow: \"sm\",\n    borderRadius: \"5px\",\n    padding: 4,\n    background: \"#fff\"\n  }, __jsx(Heading, {\n    fontSize: \"sm\",\n    color: \"text\",\n    marginBottom: 3\n  }, \"Fetch Tracking\"), __jsx(Box, {\n    display: \"flex\",\n    marginBottom: 4\n  }, __jsx(InputGroup, {\n    size: \"sm\",\n    width: \"100%\"\n  }, __jsx(Input, {\n    variant: \"filled\",\n    onChange: function onChange(e) {\n      return setInput(e.target.value);\n    },\n    value: input,\n    placeholder: \"e.g. order number, customer email, name, address, etc.\"\n  }), __jsx(InputRightElement, {\n    width: \"3rem\"\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      return getTracking(url, input, setResult, setLoading);\n    },\n    h: \"1.35rem\",\n    size: \"xs\",\n    variantColor: \"green\"\n  }, \"GO\")))), loading && __jsx(Spinner, {\n    color: \"blue.500\"\n  }), result && __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\"\n  }, result.company && __jsx(Badge, {\n    variantColor: \"blue\",\n    marginRight: 2\n  }, result.company), __jsx(\"a\", {\n    href: result.url,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, __jsx(Text, null, result.number)), result.error && __jsx(Badge, {\n    variantColor: \"red\",\n    marginRight: 8\n  }, result.error)));\n};\n\nexport default Tracking;\nTracking.propTypes = {\n  url: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/shop/apps/tracking.js"],"names":["useState","fetch","Box","Button","Badge","Spinner","Heading","Text","InputRightElement","InputGroup","Input","PropTypes","getTracking","url","input","setResult","setLoading","method","headers","body","JSON","stringify","query","then","res","json","data","orders","edges","length","node","fulfillments","trackingInfo","error","Tracking","result","setInput","loading","e","target","value","company","number","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport {\n  Box,\n  Button,\n  Badge,\n  Spinner,\n  Heading,\n  Text,\n  InputRightElement,\n  InputGroup,\n  Input,\n} from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\n\nfunction getTracking(url, input, setResult, setLoading) {\n  setLoading(true);\n  setResult('');\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      query: `\n{\n  orders(\n    first: 1\n    query: \"${input}\"\n  ) {\n    edges {\n      node {\n        fulfillments(first: 25) {\n          trackingInfo {\n            company\n            number\n            url\n          }\n        }\n      }\n    }\n  }\n}\n    `,\n    }),\n  })\n    .then(res => res.json())\n    .then(res => {\n      if (\n        res.data.orders.edges.length &&\n        res.data.orders.edges[0].node.fulfillments.length &&\n        res.data.orders.edges[0].node.fulfillments[0].trackingInfo.length\n      ) {\n        setResult(\n          res.data.orders.edges[0].node.fulfillments[0].trackingInfo[0]\n        );\n      } else {\n        setResult({ error: `No orders found matching ${input}` });\n      }\n      setLoading(false);\n    });\n}\n\nconst Tracking = ({ url }) => {\n  const [result, setResult] = useState('');\n  const [input, setInput] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  return (\n    <Box\n      minWidth=\"500px\"\n      boxShadow=\"sm\"\n      borderRadius=\"5px\"\n      padding={4}\n      background=\"#fff\"\n    >\n      <Heading fontSize=\"sm\" color=\"text\" marginBottom={3}>\n        Fetch Tracking\n      </Heading>\n      <Box display=\"flex\" marginBottom={4}>\n        <InputGroup size=\"sm\" width=\"100%\">\n          <Input\n            variant=\"filled\"\n            onChange={e => setInput(e.target.value)}\n            value={input}\n            placeholder=\"e.g. order number, customer email, name, address, etc.\"\n          />\n\n          <InputRightElement width=\"3rem\">\n            <Button\n              onClick={() => getTracking(url, input, setResult, setLoading)}\n              h=\"1.35rem\"\n              size=\"xs\"\n              variantColor=\"green\"\n            >\n              GO\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </Box>\n      {loading && <Spinner color=\"blue.500\" />}\n      {result && (\n        <Box display=\"flex\" alignItems=\"center\">\n          {result.company && (\n            <Badge variantColor=\"blue\" marginRight={2}>\n              {result.company}\n            </Badge>\n          )}\n          <a href={result.url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <Text>{result.number}</Text>\n          </a>\n          {result.error && (\n            <Badge variantColor=\"red\" marginRight={8}>\n              {result.error}\n            </Badge>\n          )}\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Tracking;\n\nTracking.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}