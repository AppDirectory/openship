{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport { gql } from 'apollo-boost';\nimport { Pane, Heading, Text, SearchInput, Icon, TextInput, IconButton, Spinner, TagInput, toaster, Tablist, Tab, Avatar } from 'evergreen-ui';\nimport { Query } from 'react-apollo';\nimport Product from './findListItem/Product';\nimport AmzProduct from './findListItem/AmzProduct';\nimport User from '../user/User';\nimport Pagination from '../common/Pagination';\nimport TextButton from '../common/Button';\nimport { CardStyle } from '../common/DefaultStyles';\nimport { front, prodFront } from '../../config';\nconst getItems = gql`\n  query getItems(\n    $search: String\n    $limit: Int\n    $sort: String\n    $pageNum: Int\n    $exclude: Json\n    $include: Json\n    $priceCurrency: String\n    $price: String\n    $itemLocationCountry: String\n  ) {\n    getItems(\n      search: $search\n      limit: $limit\n      sort: $sort\n      pageNum: $pageNum\n      exclude: $exclude\n      include: $include\n      priceCurrency: $priceCurrency\n      price: $price\n      itemLocationCountry: $itemLocationCountry\n    ) {\n      item\n    }\n  }\n`;\nexport const getItemGroup = gql`\n  query getItemGroup($itemID: String) {\n    getItemGroup(itemID: $itemID) {\n      item\n    }\n  }\n`;\nconst sortOptions = [{\n  label: 'Lowest Price',\n  value: 'price'\n}, {\n  label: 'Highest Price',\n  value: '-price'\n}, {\n  label: 'Best Match',\n  value: 'match'\n}];\n\nconst option = (name, options, update, selected) => __jsx(Pane, {\n  marginBottom: 10,\n  marginRight: 10\n}, __jsx(Heading, {\n  size: 500,\n  fontSize: \"12px\",\n  fontWeight: 500,\n  marginBottom: 2\n}, name), __jsx(Tablist, null, options.map((a, index) => __jsx(Tab, {\n  key: a,\n  id: a,\n  marginLeft: 0,\n  height: \"20px\",\n  fontSize: \"10px\",\n  marginBottom: 3,\n  letterSpacing: \"0.3px\",\n  fontWeight: 400,\n  textTransform: \"uppercase\",\n  onSelect: () => update(a),\n  isSelected: a === selected,\n  \"aria-controls\": `panel-${a}`\n}, a))));\n\nexport default class Find extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      sort: {\n        label: 'Lowest Price',\n        value: 'price'\n      },\n      searchBar: '',\n      searchEntry: null,\n      limit: 10,\n      pageNum: 0,\n      min: '',\n      max: '',\n      price: null,\n      priceCurrency: 'USD',\n      itemLocationCountry: 'US',\n      include: [],\n      exclude: [],\n      selectedChannel: 'zinc',\n      zincResults: []\n    });\n\n    _defineProperty(this, \"zincSearch\", (searchEntry, token) => {\n      console.log('called');\n      fetch(`${false ? front : prodFront}/api/zinc/search?query=${searchEntry}&token=${token}`).then(res => res.json()).then(json => this.setState({\n        zincResults: json\n      })).catch(error => console.log('Error: ', error));\n    });\n  }\n\n  render() {\n    const {\n      headerSize,\n      atcDisabled,\n      addMPItem,\n      addZincItem\n    } = this.props;\n    const {\n      pageNum,\n      searchBar,\n      sort,\n      limit,\n      itemLocationCountry,\n      selectedChannel,\n      min,\n      max,\n      include,\n      exclude,\n      searchEntry,\n      priceCurrency,\n      price,\n      zincResults\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(Pane, {\n      display: \"flex\",\n      paddingTop: 16,\n      paddingBottom: 16\n    }, __jsx(Pane, {\n      flex: 1,\n      alignItems: \"center\",\n      display: \"flex\"\n    }, __jsx(Heading, {\n      size: headerSize || 700\n    }, \"Marketplace\"))), __jsx(Pane, _extends({}, CardStyle, {\n      background: \"white\"\n    }), __jsx(User, null, ({\n      data: {\n        me\n      }\n    }) => {\n      if (!me) return null;\n\n      if (me.buyer && me.buyer.status) {\n        return __jsx(React.Fragment, null, __jsx(Pane, {\n          display: \"flex\",\n          paddingX: \"1em\",\n          paddingY: \"1em\",\n          flexWrap: \"wrap\"\n        }, __jsx(Pagination, {\n          leftDisabled: pageNum === 0,\n          onLeft: () => this.setState(state => ({\n            pageNum: state.pageNum - 1\n          })),\n          onRight: () => this.setState(state => ({\n            pageNum: state.pageNum + 1\n          }))\n        }), __jsx(Pane, {\n          flex: 1\n        }, __jsx(SearchInput, {\n          placeholder: \"Search\",\n          boxShadow: \"none\",\n          width: \"100%\",\n          height: 36,\n          value: searchBar,\n          onChange: e => this.setState({\n            searchBar: e.target.value,\n            pageNum: 0\n          }),\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              this.setState(state => ({\n                searchEntry: state.searchBar\n              }));\n\n              if (selectedChannel === 'zinc') {\n                this.zincSearch(searchBar, me.zincToken);\n              }\n            }\n          }\n        }))), __jsx(Pane, {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          background: \"#f5f5f5\",\n          paddingY: \".7em\",\n          paddingX: \"1em\"\n        }, option('Channel', ['zinc', 'marketplace'], a => this.setState({\n          selectedChannel: a\n        }), selectedChannel), option('Location', ['US', 'CN', 'All'], a => this.setState({\n          itemLocationCountry: a\n        }), itemLocationCountry), option('Items per page', [10, 50, 100], a => this.setState({\n          limit: a\n        }), limit)), searchEntry && selectedChannel === 'marketplace' && __jsx(Query, {\n          query: getItems,\n          variables: {\n            search: searchEntry,\n            limit,\n            sort: sort.value,\n            pageNum,\n            exclude,\n            include,\n            priceCurrency,\n            price,\n            itemLocationCountry\n          }\n        }, ({\n          data,\n          error,\n          loading\n        }) => {\n          if (loading) return __jsx(Pane, {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"100vh\"\n          }, __jsx(Spinner, {\n            size: 80\n          }));\n          if (error || !data.getItems.item || data.getItems.item.length < 1) return __jsx(Pane, {\n            paddingX: \"1em\",\n            paddingY: \"1em\"\n          }, __jsx(Pane, {\n            background: \"tint2\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n            borderRadius: 3\n          }, __jsx(Heading, {\n            margin: \"1em\",\n            size: 600\n          }, \"No items found.\")));\n          return __jsx(React.Fragment, null, data.getItems.item.data.products.edges.map(product => __jsx(Product, {\n            addVariantToCart: (a, b) => addMPItem(a, b),\n            checkout: () => toaster.success(`checkout`),\n            key: product.node.id.toString(),\n            product: product.node,\n            client: \"Marketplace\",\n            atcDisabled: atcDisabled\n          })));\n        }), selectedChannel === 'zinc' && zincResults.length > 0 && zincResults.map(product => __jsx(AmzProduct, {\n          product: product,\n          addVariantToCart: a => toaster.success(a),\n          atcDisabled: atcDisabled,\n          addZincItem: (a, b, c, d, e) => addZincItem(a, b, c, d, e)\n        })));\n      }\n\n      return __jsx(Pane, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"200px\"\n      }, __jsx(Link, {\n        href: \"/settings\"\n      }, __jsx(\"a\", null, __jsx(TextButton, {\n        intent: \"primary\",\n        height: 30,\n        fontSize: 16\n      }, \"Apply for Beta Access\"))));\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}