{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Box, Text, Icon, Switch, Button, Heading, Input, InputGroup, InputLeftElement, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from '@chakra-ui/core';\nimport ShopList, { ALL_SHOPS_QUERY, shopsQueryVars } from '../components/shops/ShopList';\nconst CREATE_SHOP_MUTATION = gql`\n  mutation CREATE_SHOP_MUTATION(\n    $domain: String!\n    $accessToken: String!\n    $name: String!\n  ) {\n    upsertShop(accessToken: $accessToken, domain: $domain, name: $name) {\n      id\n    }\n  }\n`;\nconst WEBHOOK_MUTATION = gql`\n  mutation createWebhook($domain: String!, $accessToken: String!) {\n    createWebhook(domain: $domain, accessToken: $accessToken) {\n      userErrors\n      webhookSubscription\n    }\n  }\n`;\n\nconst Shops = ({\n  shop,\n  accessToken\n}) => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: checked,\n    1: setChecked\n  } = useState(false);\n  const [upsertShop] = useMutation(CREATE_SHOP_MUTATION, {\n    variables: {\n      domain: shop,\n      accessToken,\n      name\n    },\n    refetchQueries: [{\n      query: ALL_SHOPS_QUERY,\n      variables: shopsQueryVars\n    }]\n  });\n  const [createWebhook] = useMutation(WEBHOOK_MUTATION, {\n    variables: {\n      domain: shop,\n      accessToken\n    }\n  });\n  useEffect(() => {\n    if (shop) {\n      setOpen(true);\n      setName(shop.split('.')[0]);\n    }\n  }, [shop]);\n\n  const handleClick = async () => {\n    const data1 = await upsertShop();\n\n    if (checked) {\n      const data2 = await createWebhook();\n    }\n\n    setOpen(false);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, null, __jsx(Modal, {\n    isOpen: open,\n    onClose: () => setOpen(false)\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, null, __jsx(ModalHeader, null, \"Add Shop to Openship\"), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Box, null, __jsx(InputGroup, null, __jsx(InputLeftElement, {\n    children: __jsx(Icon, {\n      name: \"shop\",\n      color: \"gray.500\"\n    })\n  }), __jsx(Input, {\n    color: \"gray.700\",\n    variant: \"filled\",\n    type: \"phone\",\n    placeholder: \"Phone number\",\n    value: name,\n    onChange: e => setName(e.target.value)\n  })), __jsx(Heading, {\n    lineHeight: \"10px\",\n    fontSize: \"xs\",\n    pr: 3,\n    pt: 2,\n    marginBottom: 4,\n    textTransform: \"uppercase\",\n    fontWeight: 500,\n    color: \"gray.500\"\n  }, \"Shop Name\"), __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\"\n  }, __jsx(Text, {\n    pr: 3,\n    paddingTop: 2,\n    fontSize: 15\n  }, shop)), __jsx(Heading, {\n    lineHeight: \"10px\",\n    fontSize: \"xs\",\n    pr: 3,\n    pt: 2,\n    marginBottom: 4,\n    textTransform: \"uppercase\",\n    fontWeight: 500,\n    color: \"gray.500\"\n  }, \"Shopify URL\")), __jsx(Box, {\n    pt: 4,\n    display: \"flex\",\n    alignItems: \"center\"\n  }, __jsx(Box, {\n    paddingRight: 20\n  }, __jsx(Heading, {\n    fontSize: \"md\",\n    fontWeight: 500,\n    mb: 1,\n    color: \"gray.800\"\n  }, \"Push orders to Openship\"), __jsx(Text, {\n    fontSize: \"sm\",\n    color: \"gray.700\"\n  }, \"Orders will be pushed to the pending tab to be fulfilled\")), __jsx(Switch, {\n    marginLeft: \"auto\",\n    checked: checked,\n    onChange: e => setChecked(e.target.checked)\n  }))), __jsx(ModalFooter, null, __jsx(Button, {\n    variant: \"ghost\",\n    color: \"gray.600\",\n    mr: 3\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"green\",\n    bg: \"green.50\",\n    _hover: {\n      bg: 'green.100'\n    },\n    onConfirm: () => handleClick()\n  }, \"Confirm\"))))), __jsx(ShopList, null));\n};\n\nShops.getInitialProps = ({\n  query: {\n    shop,\n    accessToken\n  }\n}) => ({\n  shop,\n  accessToken\n});\n\nexport default Shops;","map":null,"metadata":{},"sourceType":"module"}