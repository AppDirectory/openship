{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createProducts(\\n    $title: String!\\n    $descriptionHtml: String\\n    $productType: String\\n    $vendor: String\\n    $images: Json\\n    $options: Json\\n    $variants: Json\\n    $client: String\\n  ) {\\n    createProducts(\\n      title: $title\\n      descriptionHtml: $descriptionHtml\\n      productType: $productType\\n      vendor: $vendor\\n      images: $images\\n      options: $options\\n      variants: $variants\\n      shop: $client\\n    ) {\\n      product\\n      shop\\n      userErrors\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql } from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useToast, Button } from '@chakra-ui/core';\nimport { CURRENT_USER_QUERY } from '../user/User';\nvar CREATE_PRODUCTS_MUTATION = gql(_templateObject());\n\nvar AddProduct = function AddProduct(_ref) {\n  var product = _ref.product,\n      client = _ref.client;\n\n  var _useQuery = useQuery(CURRENT_USER_QUERY),\n      me = _useQuery.data.me;\n\n  var _useMutation = useMutation(CREATE_PRODUCTS_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      createProducts = _useMutation2[0];\n\n  var toast = useToast();\n  if (!me) return null;\n\n  if (me.seller && me.seller.status) {\n    return __jsx(Button, {\n      background: \"#DDEBF7\",\n      color: \"#1070CA\",\n      borderRadius: 3,\n      marginRight: 1,\n      px: 2,\n      height: 5,\n      textTransform: \"uppercase\",\n      letterSpacing: \"wide\",\n      fontSize: \"xs\",\n      fontWeight: 700,\n      onClick: function _callee() {\n        return _regeneratorRuntime.async(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return _regeneratorRuntime.awrap(createProducts({\n                  variables: _objectSpread({}, product, {\n                    client: client\n                  })\n                }));\n\n              case 2:\n                toast({\n                  position: 'top-right',\n                  title: 'Product has been added.',\n                  description: \"\".concat(product.title),\n                  status: 'success',\n                  isClosable: true\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    }, \"Sync\");\n  }\n\n  return null;\n};\n\nexport default AddProduct;","map":null,"metadata":{},"sourceType":"module"}