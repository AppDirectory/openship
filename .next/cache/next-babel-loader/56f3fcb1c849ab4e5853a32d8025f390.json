{"ast":null,"code":"import fetch from 'isomorphic-unfetch';\nexport default (async (req, res) => {\n  console.log('hi');\n\n  if (req.body) {\n    const checkoutObj = req.body;\n    const shippingInfo = checkoutObj.shippingAddress;\n    const checkoutEmail = checkoutObj.email;\n    const allShopItems = [];\n\n    if (checkoutObj.lineItems.edges.length > 0) {\n      for (let k = 0; k < checkoutObj.lineItems.edges.length; k++) {\n        const shpVId = checkoutObj.lineItems.edges[k].node.variant.id;\n        const shpVQty = checkoutObj.lineItems.edges[k].node.quantity; // Preparing order items array to place shopify order\n\n        allShopItems.push({\n          variantId: shpVId,\n          quantity: shpVQty\n        });\n      }\n\n      const resp = await doShopifyOrder(allShopItems, shippingInfo, checkoutEmail);\n      console.log(resp);\n      res.status(200).send(resp);\n    }\n  }\n\n  async function doShopifyOrder(shopItems, shippingInfo, email) {\n    // const sp = 'osmarketplace.myshopify.com';\n    const sp = `${process.env.CUSTOM_SHOP_NAME}.myshopify.com`; // const accessTk = 'ae5584ba3aa15573e072e228414a5d65';\n\n    const accessTk = process.env.CUSTOM_SHOP_ADMIN;\n    const query = `\n    mutation draftOrderCreate($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n        draftOrder {\n            id\n        }\n        userErrors {\n            field\n            message\n        }\n        }\n    }\n    `;\n    const response = await fetch(`https://${sp}/admin/api/graphql.json`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Access-Token': accessTk\n      },\n      body: JSON.stringify({\n        query,\n        variables: {\n          input: {\n            email,\n            note: 'Openship order placed',\n            shippingAddress: {\n              address1: shippingInfo.address1,\n              address2: shippingInfo.address2,\n              city: shippingInfo.city,\n              countryCode: 'US',\n              firstName: shippingInfo.firstName,\n              lastName: shippingInfo.lastName,\n              provinceCode: shippingInfo.provinceCode,\n              zip: shippingInfo.zip,\n              phone: shippingInfo.phone\n            },\n            lineItems: shopItems,\n            customAttributes: [{\n              key: 'prisma_order_id',\n              value: req.body.pId\n            }]\n          }\n        }\n      })\n    }).then(response => response.json()).then(function (data) {\n      const jsonData = JSON.stringify(data);\n      const obj = JSON.parse(jsonData);\n\n      if (typeof obj.errors !== 'undefined' && obj.errors.length > 0) {\n        return obj.errors[0].message;\n      }\n\n      const markPaid = `mutation draftComplete($id: ID!,$paymentPending: Boolean){\n            draftOrderComplete(id: $id, paymentPending: $paymentPending) {\n                draftOrder { order { id } }\n                userErrors { field message }\n            }\n            }`;\n      return fetch(`https://${sp}/admin/api/graphql.json`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Shopify-Access-Token': accessTk\n        },\n        body: JSON.stringify({\n          query: markPaid,\n          variables: {\n            id: obj.data.draftOrderCreate.draftOrder.id,\n            paymentPending: false\n          }\n        })\n      }).then(response => response.json()).then(function (data) {\n        const jsonData = JSON.stringify(data);\n        const obj = JSON.parse(jsonData);\n        return obj.data.draftOrderComplete.draftOrder; // return data;\n      });\n    });\n    return response;\n  }\n});","map":{"version":3,"sources":["/Users/junaid/openship/pages/api/shopify/purchase.js"],"names":["fetch","req","res","console","log","body","checkoutObj","shippingInfo","shippingAddress","checkoutEmail","email","allShopItems","lineItems","edges","length","k","shpVId","node","variant","id","shpVQty","quantity","push","variantId","resp","doShopifyOrder","status","send","shopItems","sp","process","env","CUSTOM_SHOP_NAME","accessTk","CUSTOM_SHOP_ADMIN","query","response","method","headers","JSON","stringify","variables","input","note","address1","address2","city","countryCode","firstName","lastName","provinceCode","zip","phone","customAttributes","key","value","pId","then","json","data","jsonData","obj","parse","errors","message","markPaid","draftOrderCreate","draftOrder","paymentPending","draftOrderComplete"],"mappings":"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","sourcesContent":["import fetch from 'isomorphic-unfetch';\n\nexport default async (req, res) => {\n  console.log('hi');\n  if (req.body) {\n    const checkoutObj = req.body;\n    const shippingInfo = checkoutObj.shippingAddress;\n    const checkoutEmail = checkoutObj.email;\n    const allShopItems = [];\n    if (checkoutObj.lineItems.edges.length > 0) {\n      for (let k = 0; k < checkoutObj.lineItems.edges.length; k++) {\n        const shpVId = checkoutObj.lineItems.edges[k].node.variant.id;\n        const shpVQty = checkoutObj.lineItems.edges[k].node.quantity;\n\n        // Preparing order items array to place shopify order\n        allShopItems.push({\n          variantId: shpVId,\n          quantity: shpVQty,\n        });\n      }\n      const resp = await doShopifyOrder(\n        allShopItems,\n        shippingInfo,\n        checkoutEmail\n      );\n      console.log(resp);\n      res.status(200).send(resp);\n    }\n  }\n  async function doShopifyOrder(shopItems, shippingInfo, email) {\n    // const sp = 'osmarketplace.myshopify.com';\n    const sp = `${process.env.CUSTOM_SHOP_NAME}.myshopify.com`;\n    // const accessTk = 'ae5584ba3aa15573e072e228414a5d65';\n    const accessTk = process.env.CUSTOM_SHOP_ADMIN;\n\n    const query = `\n    mutation draftOrderCreate($input: DraftOrderInput!) {\n        draftOrderCreate(input: $input) {\n        draftOrder {\n            id\n        }\n        userErrors {\n            field\n            message\n        }\n        }\n    }\n    `;\n    const response = await fetch(`https://${sp}/admin/api/graphql.json`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Access-Token': accessTk,\n      },\n      body: JSON.stringify({\n        query,\n        variables: {\n          input: {\n            email,\n            note: 'Openship order placed',\n            shippingAddress: {\n              address1: shippingInfo.address1,\n              address2: shippingInfo.address2,\n              city: shippingInfo.city,\n              countryCode: 'US',\n              firstName: shippingInfo.firstName,\n              lastName: shippingInfo.lastName,\n              provinceCode: shippingInfo.provinceCode,\n              zip: shippingInfo.zip,\n              phone: shippingInfo.phone,\n            },\n            lineItems: shopItems,\n            customAttributes: [{ key: 'prisma_order_id', value: req.body.pId }],\n          },\n        },\n      }),\n    })\n      .then(response => response.json())\n      .then(function(data) {\n        const jsonData = JSON.stringify(data);\n        const obj = JSON.parse(jsonData);\n        if (typeof obj.errors !== 'undefined' && obj.errors.length > 0) {\n          return obj.errors[0].message;\n        }\n        const markPaid = `mutation draftComplete($id: ID!,$paymentPending: Boolean){\n            draftOrderComplete(id: $id, paymentPending: $paymentPending) {\n                draftOrder { order { id } }\n                userErrors { field message }\n            }\n            }`;\n        return fetch(`https://${sp}/admin/api/graphql.json`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'X-Shopify-Access-Token': accessTk,\n          },\n          body: JSON.stringify({\n            query: markPaid,\n            variables: {\n              id: obj.data.draftOrderCreate.draftOrder.id,\n              paymentPending: false,\n            },\n          }),\n        })\n          .then(response => response.json())\n          .then(function(data) {\n            const jsonData = JSON.stringify(data);\n            const obj = JSON.parse(jsonData);\n            return obj.data.draftOrderComplete.draftOrder;\n            // return data;\n          });\n      });\n    return response;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}