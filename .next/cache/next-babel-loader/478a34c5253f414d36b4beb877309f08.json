{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { gql } from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { useToast, Button } from '@chakra-ui/core';\nimport { CURRENT_USER_QUERY } from '../user/User';\nconst CREATE_PRODUCTS_MUTATION = gql`\n  mutation createProducts(\n    $title: String!\n    $descriptionHtml: String\n    $productType: String\n    $vendor: String\n    $images: Json\n    $options: Json\n    $variants: Json\n    $client: String\n  ) {\n    createProducts(\n      title: $title\n      descriptionHtml: $descriptionHtml\n      productType: $productType\n      vendor: $vendor\n      images: $images\n      options: $options\n      variants: $variants\n      shop: $client\n    ) {\n      product\n      shop\n      userErrors\n    }\n  }\n`;\n\nconst AddProduct = ({\n  product,\n  client\n}) => {\n  const {\n    data: {\n      me\n    }\n  } = useQuery(CURRENT_USER_QUERY);\n  const [createProducts] = useMutation(CREATE_PRODUCTS_MUTATION);\n  const toast = useToast();\n  if (!me) return null;\n\n  if (me.seller && me.seller.status) {\n    return __jsx(Button, {\n      background: \"#DDEBF7\",\n      color: \"#1070CA\",\n      borderRadius: 3,\n      marginRight: 1,\n      px: 2,\n      height: 5,\n      textTransform: \"uppercase\",\n      letterSpacing: \"wide\",\n      fontSize: \"xs\",\n      fontWeight: 700,\n      onClick: async () => {\n        await createProducts({\n          variables: _objectSpread({}, product, {\n            client\n          })\n        });\n        toast({\n          position: 'top-right',\n          title: 'Product has been added.',\n          description: `${product.title}`,\n          status: 'success',\n          isClosable: true\n        });\n      }\n    }, \"Sync\");\n  }\n\n  return null;\n};\n\nexport default AddProduct;","map":null,"metadata":{},"sourceType":"module"}