{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport { Pane, Heading, Avatar, Text, IconButton, Icon } from 'evergreen-ui';\n\nvar CartItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CartItem, _Component);\n\n  function CartItem() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CartItem);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CartItem)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"decrementQuantity\", function (lineItemId) {\n      var _this$props = _this.props,\n          checkoutLineItemsUpdate = _this$props.checkoutLineItemsUpdate,\n          lineItem = _this$props.lineItem,\n          checkoutID = _this$props.checkoutID;\n      checkoutLineItemsUpdate([{\n        id: lineItemId,\n        quantity: _parseInt(lineItem.quantity - 1, 10)\n      }]); // updateLineItemInCart.mutation({\n      //   variables: {\n      //     checkoutId: checkoutID,\n      //     lineItems: [\n      //       { id: lineItemId, quantity: parseInt(lineItem.quantity - 1, 10) },\n      //     ],\n      //   },\n      // });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"incrementQuantity\", function (lineItemId) {\n      var _this$props2 = _this.props,\n          checkoutLineItemsUpdate = _this$props2.checkoutLineItemsUpdate,\n          lineItem = _this$props2.lineItem,\n          checkoutID = _this$props2.checkoutID;\n      checkoutLineItemsUpdate([{\n        id: lineItemId,\n        quantity: _parseInt(lineItem.quantity + 1, 10)\n      }]); // updateLineItemInCart.mutation({\n      //   variables: {\n      //     checkoutId: checkoutID,\n      //     lineItems: [\n      //       { id: lineItemId, quantity: parseInt(lineItem.quantity + 1, 10) },\n      //     ],\n      //   },\n      // });\n    });\n\n    return _this;\n  }\n\n  _createClass(CartItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props3 = this.props,\n          lineItem = _this$props3.lineItem,\n          removeItem = _this$props3.removeItem,\n          checkoutLineItemsUpdate = _this$props3.checkoutLineItemsUpdate,\n          checkoutID = _this$props3.checkoutID;\n      return (// <li className=\"Line-item\">\n        //   <div className=\"Line-item__img\">\n        //     {this.props.line_item.variant.image ? <img src={this.props.line_item.variant.image.src} alt={`${this.props.line_item.title} product shot`}/> : null}\n        //   </div>\n        //   <div className=\"Line-item__content\">\n        //     <div className=\"Line-item__content-row\">\n        //       <div className=\"Line-item__variant-title\">\n        //         {this.props.line_item.variant.title}\n        //       </div>\n        //       <span className=\"Line-item__title\">\n        //         {this.props.line_item.title}\n        //       </span>\n        //     </div>\n        //     <div className=\"Line-item__content-row\">\n        // <div className=\"Line-item__quantity-container\">\n        //   <button className=\"Line-item__quantity-update\" onClick={() => this.decrementQuantity(this.props.line_item.id)}>-</button>\n        //   <span className=\"Line-item__quantity\">{this.props.line_item.quantity}</span>\n        //   <button className=\"Line-item__quantity-update\" onClick={() => this.incrementQuantity(this.props.line_item.id)}>+</button>\n        // </div>\n        //       <span className=\"Line-item__price\">\n        //         $ { (this.props.line_item.quantity * this.props.line_item.variant.price).toFixed(2) }\n        //       </span>\n        //       <button className=\"Line-item__remove\" onClick={()=> this.props.removeLineItemInCart(this.props.line_item.id)}>Ã—</button>\n        //     </div>\n        //   </div>\n        // </li>\n        React.createElement(Pane, {\n          background: \"#fff\",\n          border: \"muted\",\n          marginBottom: 5\n        }, React.createElement(Pane, {\n          display: \"flex\",\n          alignItems: \"center\"\n        }, React.createElement(Pane, {\n          borderRight: \"muted\",\n          height: \"100%\",\n          background: \"white\"\n        }, lineItem.variant.image && React.createElement(Avatar, {\n          src: lineItem.variant.image.src,\n          alt: \"\".concat(lineItem.title, \" product shot\"),\n          backgroundColor: \"white\" // borderStyle=\"solid\"\n          // borderWidth=\"1px\"\n          ,\n          borderRadius: 0 // borderColor=\"#e8e9ea\"\n          ,\n          size: 70\n        })), React.createElement(Pane, {\n          padding: 5,\n          paddingLeft: 10\n        }, React.createElement(Heading, {\n          size: 300\n        }, lineItem.title), React.createElement(Pane, {\n          display: \"flex\",\n          marginTop: \"2px\"\n        }, React.createElement(Text, {\n          size: 300,\n          lineHeight: \"12px\"\n        }, lineItem.variant.title), React.createElement(Pane, {\n          marginX: 5,\n          lineHeight: \"12px\"\n        }, \"\\xB7\"), React.createElement(Heading, {\n          size: 300,\n          marginRight: 10,\n          color: \"green\",\n          lineHeight: \"12px\"\n        }, \"$\", (lineItem.quantity * lineItem.variant.price).toFixed(2))), lineItem.quantity > 1 && React.createElement(Text, {\n          size: 300,\n          color: \"muted\",\n          lineHeight: \"12px\"\n        }, \"$\", lineItem.variant.price, \" x \", lineItem.quantity)), React.createElement(Pane, {\n          marginLeft: \"auto\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }, checkoutLineItemsUpdate && React.createElement(Pane, {\n          display: \"flex\",\n          height: 20\n        }, React.createElement(Pane, {\n          display: \"flex\",\n          alignItems: \"center\",\n          background: \"#F9F9FB\",\n          border: \"muted\",\n          paddingX: 5,\n          borderRadius: 2 // boxShadow=\"0 0 2px rgba(67, 90, 111, 0.3)\"\n\n        }, React.createElement(Icon, {\n          color: \"#425A70\",\n          icon: \"minus\",\n          appearance: \"minimal\",\n          size: 12,\n          cursor: \"pointer\",\n          onClick: function onClick() {\n            return _this2.decrementQuantity(lineItem.id);\n          }\n        }), React.createElement(Text, {\n          size: 300,\n          marginX: 9\n        }, lineItem.quantity), React.createElement(Icon, {\n          color: \"#425A70\",\n          icon: \"plus\",\n          appearance: \"minimal\",\n          size: 12,\n          cursor: \"pointer\",\n          onClick: function onClick() {\n            return _this2.incrementQuantity(lineItem.id);\n          }\n        }))), removeItem && React.createElement(IconButton, {\n          height: 20,\n          appearance: \"minimal\",\n          inent: \"danger\",\n          icon: \"cross\",\n          iconSize: 15,\n          marginX: 10,\n          pointerEvents: \"visible\",\n          onClick: function onClick() {\n            return removeItem([lineItem.id]);\n          }\n        }))))\n      );\n    }\n  }]);\n\n  return CartItem;\n}(Component);\n\nexport default CartItem;","map":null,"metadata":{},"sourceType":"module"}