{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query getItems(\\n    $search: String\\n    $limit: Int\\n    $sort: String\\n    $pageNum: Int\\n    $exclude: Json\\n    $include: Json\\n    $priceCurrency: String\\n    $price: String\\n    $itemLocationCountry: String\\n  ) {\\n    getItems(\\n      search: $search\\n      limit: $limit\\n      sort: $sort\\n      pageNum: $pageNum\\n      exclude: $exclude\\n      include: $include\\n      priceCurrency: $priceCurrency\\n      price: $price\\n      itemLocationCountry: $itemLocationCountry\\n    ) {\\n      item\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Box, Spinner, Heading } from '@chakra-ui/core';\nimport { gql } from 'apollo-boost';\nimport MktProduct from './MktProduct';\nvar getItemsQuery = gql(_templateObject());\n\nfunction MarketplaceSearch(_ref) {\n  var search = _ref.search,\n      limit = _ref.limit,\n      sort = _ref.sort,\n      pageNum = _ref.pageNum,\n      exclude = _ref.exclude,\n      include = _ref.include,\n      priceCurrency = _ref.priceCurrency,\n      price = _ref.price,\n      itemLocationCountry = _ref.itemLocationCountry,\n      atcDisabled = _ref.atcDisabled,\n      addMPItem = _ref.addMPItem;\n  var allItems = useQuery(getItemsQuery, {\n    variables: {\n      search: search,\n      limit: limit,\n      sort: sort.value,\n      pageNum: pageNum,\n      exclude: exclude,\n      include: include,\n      priceCurrency: priceCurrency,\n      price: price,\n      itemLocationCountry: itemLocationCountry\n    }\n  });\n  var data = allItems.data,\n      error = allItems.error,\n      loading = allItems.loading;\n  if (loading) return __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\"\n  }, __jsx(Spinner, {\n    thickness: \"4px\",\n    speed: \"0.65s\",\n    emptyColor: \"gray.200\",\n    color: \"blue.500\",\n    size: \"xl\"\n  }));\n  if (error || !data.getItems.item || data.getItems.item.length < 1) return __jsx(Box, {\n    paddingX: \"1em\",\n    paddingY: \"1em\"\n  }, __jsx(Box, {\n    background: \"tint2\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    borderRadius: 3\n  }, __jsx(Heading, {\n    margin: \"1em\",\n    size: 600\n  }, \"No items found.\")));\n  return __jsx(React.Fragment, null, data.getItems.item.data.products.edges.map(function (product) {\n    return __jsx(MktProduct, {\n      addVariantToCart: function addVariantToCart(a, b) {\n        return addMPItem(a, b);\n      },\n      checkout: function checkout() {\n        return toaster.success(\"checkout\");\n      },\n      key: product.node.id.toString(),\n      product: product.node,\n      client: \"Marketplace\",\n      atcDisabled: atcDisabled\n    });\n  }));\n}\n\nexport default MarketplaceSearch;","map":{"version":3,"sources":["/Users/junaid/openship2/components/find/MarketplaceSearch/index.js"],"names":["React","useQuery","Box","Spinner","Heading","gql","MktProduct","getItemsQuery","MarketplaceSearch","search","limit","sort","pageNum","exclude","include","priceCurrency","price","itemLocationCountry","atcDisabled","addMPItem","allItems","variables","value","data","error","loading","getItems","item","length","products","edges","map","product","a","b","toaster","success","node","id","toString"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Box, Spinner, Heading } from '@chakra-ui/core';\nimport { gql } from 'apollo-boost';\nimport MktProduct from './MktProduct';\n\nconst getItemsQuery = gql`\n  query getItems(\n    $search: String\n    $limit: Int\n    $sort: String\n    $pageNum: Int\n    $exclude: Json\n    $include: Json\n    $priceCurrency: String\n    $price: String\n    $itemLocationCountry: String\n  ) {\n    getItems(\n      search: $search\n      limit: $limit\n      sort: $sort\n      pageNum: $pageNum\n      exclude: $exclude\n      include: $include\n      priceCurrency: $priceCurrency\n      price: $price\n      itemLocationCountry: $itemLocationCountry\n    ) {\n      item\n    }\n  }\n`;\n\nfunction MarketplaceSearch({\n  search,\n  limit,\n  sort,\n  pageNum,\n  exclude,\n  include,\n  priceCurrency,\n  price,\n  itemLocationCountry,\n  atcDisabled,\n  addMPItem,\n}) {\n  const allItems = useQuery(getItemsQuery, {\n    variables: {\n      search,\n      limit,\n      sort: sort.value,\n      pageNum,\n      exclude,\n      include,\n      priceCurrency,\n      price,\n      itemLocationCountry,\n    },\n  });\n\n  const { data, error, loading } = allItems;\n\n  if (loading)\n    return (\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        height=\"100vh\"\n      >\n        <Spinner\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"blue.500\"\n          size=\"xl\"\n        />\n      </Box>\n    );\n  if (error || !data.getItems.item || data.getItems.item.length < 1)\n    return (\n      <Box paddingX=\"1em\" paddingY=\"1em\">\n        <Box\n          background=\"tint2\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          borderRadius={3}\n        >\n          <Heading margin=\"1em\" size={600}>\n            No items found.\n          </Heading>\n        </Box>\n      </Box>\n    );\n  return (\n    <>\n      {data.getItems.item.data.products.edges.map(product => (\n        <MktProduct\n          addVariantToCart={(a, b) => addMPItem(a, b)}\n          checkout={() => toaster.success(`checkout`)}\n          key={product.node.id.toString()}\n          product={product.node}\n          client=\"Marketplace\"\n          atcDisabled={atcDisabled}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default MarketplaceSearch;\n"]},"metadata":{},"sourceType":"module"}