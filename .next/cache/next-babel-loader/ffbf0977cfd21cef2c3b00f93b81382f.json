{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport Link from 'next/link';\nimport { gql } from 'apollo-boost';\nimport { Pane, Heading, Text, SearchInput, Icon, TextInput, IconButton, Spinner, TagInput, toaster, Tablist, Tab, Avatar } from 'evergreen-ui';\nimport { Query } from 'react-apollo';\nimport Product from './findListItem/Product';\nimport User from '../user/User';\nimport Pagination from '../common/Pagination';\nimport TextButton from '../common/Button';\nimport { CardStyle } from '../common/DefaultStyles';\nimport { front, prodFront } from '../../config';\nconst getItems = gql`\n  query getItems(\n    $search: String\n    $limit: Int\n    $sort: String\n    $pageNum: Int\n    $exclude: Json\n    $include: Json\n    $priceCurrency: String\n    $price: String\n    $itemLocationCountry: String\n  ) {\n    getItems(\n      search: $search\n      limit: $limit\n      sort: $sort\n      pageNum: $pageNum\n      exclude: $exclude\n      include: $include\n      priceCurrency: $priceCurrency\n      price: $price\n      itemLocationCountry: $itemLocationCountry\n    ) {\n      item\n    }\n  }\n`;\nexport const getItemGroup = gql`\n  query getItemGroup($itemID: String) {\n    getItemGroup(itemID: $itemID) {\n      item\n    }\n  }\n`;\nconst sortOptions = [{\n  label: 'Lowest Price',\n  value: 'price'\n}, {\n  label: 'Highest Price',\n  value: '-price'\n}, {\n  label: 'Best Match',\n  value: 'match'\n}];\n\nconst option = (name, options, update, selected) => React.createElement(Pane, {\n  marginBottom: 10,\n  marginRight: 10\n}, React.createElement(Heading, {\n  size: 500,\n  fontSize: \"12px\",\n  fontWeight: 500,\n  marginBottom: 2\n}, name), React.createElement(Tablist, null, options.map((a, index) => React.createElement(Tab, {\n  key: a,\n  id: a,\n  marginLeft: 0,\n  height: \"20px\",\n  fontSize: \"10px\" // lineHeight=\"16px\"\n  ,\n  marginBottom: 3,\n  letterSpacing: \"0.3px\",\n  fontWeight: 400,\n  textTransform: \"uppercase\",\n  onSelect: () => update(a),\n  isSelected: a === selected,\n  \"aria-controls\": `panel-${a}`\n}, a)))); // fetch('http://localhost:3000/api/zinc-api?search=shoes')\n//   .then(response => response.json())\n//   .then(json =>\n//     json.map(\n//       item => <div>{item.product_id}</div>\n//   (\n// <Pane\n//   display=\"flex\"\n//   alignItems=\"center\"\n//   borderTop=\"0.1rem solid #dfe3e8\"\n// >\n//   <Pane padding={15}>\n//     {item.image && (\n//       <Avatar\n//         src={item.image}\n//         alt={`${item.title} product shot`}\n//         borderStyle=\"solid\"\n//         borderWidth=\"1px\"\n//         borderRadius={3}\n//         borderColor=\"#e8e9ea\"\n//         size={90}\n//       />\n//     )}\n//   </Pane>\n//   <Pane\n//     padding={15}\n//     paddingLeft={0}\n//     marginTop={3}\n//     marginBottom=\"auto\"\n//   >\n//     <Heading size={500}>\n//       {item.product_id}\n//     </Heading>\n//     <Heading\n//       size={400}\n//       marginRight={10}\n//       color=\"green\"\n//     >\n//       ${item.price}\n//     </Heading>\n//   </Pane>\n// </Pane>\n// )\n//   )\n// );\n\n\nexport default class Find extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      sort: {\n        label: 'Lowest Price',\n        value: 'price'\n      },\n      searchBar: '',\n      searchEntry: null,\n      limit: 10,\n      pageNum: 0,\n      min: '',\n      max: '',\n      price: null,\n      priceCurrency: 'USD',\n      itemLocationCountry: 'US',\n      include: [],\n      exclude: [],\n      selectedChannel: 'zinc',\n      amzResults: []\n    });\n\n    _defineProperty(this, \"amzFunc\", searchEntry => {\n      fetch(`${process.env.NODE_ENV === 'development' ? front : prodFront}/api/zinc-api?search=${searchEntry}`).then(res => res.json()).then(json => this.setState({\n        amzResults: json\n      })).catch(error => console.log('Error: ', error));\n\n      if (this.state.amzResults) {\n        return this.state.amzResults.map(item => React.createElement(Pane, {\n          display: \"flex\",\n          alignItems: \"center\",\n          borderTop: \"0.1rem solid #dfe3e8\"\n        }, React.createElement(Pane, {\n          padding: 15\n        }, item.image && React.createElement(Avatar, {\n          src: item.image,\n          alt: `${item.title} product shot`,\n          borderStyle: \"solid\",\n          borderWidth: \"1px\",\n          borderRadius: 3,\n          borderColor: \"#e8e9ea\",\n          size: 90\n        })), React.createElement(Pane, {\n          padding: 15,\n          paddingLeft: 0,\n          marginTop: 3,\n          marginBottom: \"auto\"\n        }, React.createElement(Heading, {\n          size: 500\n        }, `${item.title.slice(0, 70)}...`), React.createElement(Pane, {\n          color: \"#F7D154\",\n          display: \"flex\",\n          alignItems: \"center\"\n        }, React.createElement(Icon, {\n          icon: \"star\",\n          size: 15,\n          paddingRight: 3\n        }), React.createElement(Text, {\n          paddingRight: 12,\n          lineHeight: \"unset\"\n        }, item.stars), React.createElement(Text, {\n          size: 300,\n          color: \"muted\",\n          lineHeight: \"unset\"\n        }, item.num_reviews, \" reviews\")), React.createElement(\"a\", {\n          href: `https://amazon.com/gp/product/${item.product_id}`,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\"\n        }, React.createElement(Text, {\n          size: 300,\n          lineHeight: \"12px\"\n        }, item.product_id)), React.createElement(Heading, {\n          size: 400,\n          marginRight: 10,\n          color: \"green\"\n        }, \"$\", item.price / 100))));\n      }\n    });\n  }\n\n  render() {\n    const {\n      headerSize,\n      atcDisabled,\n      addVariant\n    } = this.props;\n    const {\n      pageNum,\n      searchBar,\n      sort,\n      limit,\n      itemLocationCountry,\n      selectedChannel,\n      min,\n      max,\n      include,\n      exclude,\n      searchEntry,\n      priceCurrency,\n      price,\n      amzResults\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(Pane, {\n      display: \"flex\",\n      paddingTop: 16,\n      paddingBottom: 16\n    }, React.createElement(Pane, {\n      flex: 1,\n      alignItems: \"center\",\n      display: \"flex\"\n    }, React.createElement(Heading, {\n      size: headerSize || 700\n    }, \"Marketplace\"))), React.createElement(Pane, _extends({}, CardStyle, {\n      background: \"white\"\n    }), React.createElement(User, null, ({\n      data: {\n        me\n      }\n    }) => {\n      if (!me) return null;\n\n      if (me.buyer && me.buyer.status) {\n        return React.createElement(React.Fragment, null, React.createElement(Pane, {\n          display: \"flex\",\n          paddingX: \"1em\",\n          paddingY: \"1em\",\n          flexWrap: \"wrap\"\n        }, React.createElement(Pagination, {\n          leftDisabled: pageNum === 0,\n          onLeft: () => this.setState(state => ({\n            pageNum: state.pageNum - 1\n          })),\n          onRight: () => this.setState(state => ({\n            pageNum: state.pageNum + 1\n          }))\n        }), React.createElement(Pane, {\n          flex: 1\n        }, React.createElement(SearchInput, {\n          placeholder: \"Search\",\n          boxShadow: \"none\",\n          width: \"100%\",\n          height: 36,\n          value: searchBar,\n          onChange: e => this.setState({\n            searchBar: e.target.value,\n            pageNum: 0\n          }),\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              this.setState(state => ({\n                searchEntry: state.searchBar\n              }));\n            }\n          }\n        }))), React.createElement(Pane, {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          background: \"#f5f5f5\",\n          paddingY: \".7em\",\n          paddingX: \"1em\"\n        }, option('Channel', ['zinc', 'marketplace'], a => this.setState({\n          selectedChannel: a\n        }), selectedChannel), option('Location', ['US', 'CN', 'All'], a => this.setState({\n          itemLocationCountry: a\n        }), itemLocationCountry), option('Items per page', [10, 50, 100], a => this.setState({\n          limit: a\n        }), limit)), searchEntry && selectedChannel === 'marketplace' && React.createElement(Query, {\n          query: getItems,\n          variables: {\n            search: searchEntry,\n            limit,\n            sort: sort.value,\n            pageNum,\n            exclude,\n            include,\n            priceCurrency,\n            price,\n            itemLocationCountry\n          }\n        }, ({\n          data,\n          error,\n          loading\n        }) => {\n          if (loading) return React.createElement(Pane, {\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            height: \"100vh\"\n          }, React.createElement(Spinner, {\n            size: 80\n          }));\n          if (error || !data.getItems.item || data.getItems.item.length < 1) return React.createElement(Pane, {\n            paddingX: \"1em\",\n            paddingBottom: \"1em\"\n          }, React.createElement(Pane, {\n            background: \"tint2\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n            borderRadius: 3\n          }, React.createElement(Heading, {\n            margin: \"1em\",\n            size: 600\n          }, \"No items found.\")));\n          return React.createElement(React.Fragment, null, data.getItems.item.data.products.edges.map(product => // <FindListItem\n          //   addToCart={this.props.addToCart}\n          //   client=\"Marketplace\"\n          //   product={product.node}\n          // />\n          React.createElement(Product // addVariantToCart={(a, b) =>\n          //   toaster.success(`${a} ${b} addVariantToCart`)\n          // }\n          , {\n            addWidget: addVariant,\n            addVariantToCart: (a, b) => addVariant(a, b),\n            checkout: () => toaster.success(`checkout`) // checkout={this.props.checkout}\n            ,\n            key: product.node.id.toString(),\n            product: product.node,\n            client: \"Marketplace\",\n            atcDisabled: atcDisabled // buttons={\n            //   <Pane marginLeft=\"auto\" height={20}>\n            //     <AddProduct product={product.node} />\n            //   </Pane>\n            // }\n\n          })));\n        }), searchEntry && selectedChannel === 'zinc' && this.amzFunc(searchEntry));\n      }\n\n      return React.createElement(Pane, {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        width: \"100%\",\n        height: \"200px\"\n      }, React.createElement(Link, {\n        href: \"/settings\"\n      }, React.createElement(\"a\", null, React.createElement(TextButton, {\n        intent: \"primary\",\n        height: 30,\n        fontSize: 16\n      }, \"Apply for Beta Access\"))));\n    })));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}