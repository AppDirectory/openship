{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Box, Spinner } from '@chakra-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport OrderDetails from '../common/OrderDetails';\nimport { SHOP_ORDERS_QUERY } from '../completed/completedOrderList/CompletedOrderList';\n\nfunction Order({\n  store,\n  name\n}) {\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SHOP_ORDERS_QUERY, {\n    variables: {\n      domain: `${store}.myshopify.com`,\n      query: name,\n      first: 10\n    }\n  });\n\n  function formatNote(note) {\n    if (!note.includes('Walmart')) {\n      return note.split('||').map(a => {\n        const obj = {};\n        a.split(',').forEach(b => {\n          obj[b.split(':')[0].trim()] = b.split(':')[1].trim();\n        });\n        obj.lineID = obj.lineID.split('|').map(c => parseFloat(c));\n        obj.marketID = obj.marketID;\n        obj.transID = parseFloat(obj.transID);\n        return obj;\n      });\n    }\n\n    return null;\n  }\n\n  if (loading) return __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: \"100vh\"\n  }, __jsx(Spinner, {\n    size: 80\n  }));\n  if (error || !data.shopOrders) return __jsx(\"div\", null, error);\n  const {\n    note\n  } = data.shopOrders.edges[0].node;\n  return __jsx(Box, {\n    maxWidth: \"45em\"\n  }, __jsx(OrderDetails, _extends({}, data.shopOrders.edges[0].node, {\n    // note={note && formatNote(note)}\n    store: store\n  })));\n}\n\nexport default Order;\nOrder.propTypes = {\n  store: PropTypes.string,\n  name: PropTypes.string\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/order/Order.js"],"names":["Box","Spinner","useQuery","PropTypes","OrderDetails","SHOP_ORDERS_QUERY","Order","store","name","data","error","loading","variables","domain","query","first","formatNote","note","includes","split","map","a","obj","forEach","b","trim","lineID","c","parseFloat","marketID","transID","shopOrders","edges","node","propTypes","string"],"mappings":";;;;;AAAA,SAASA,GAAT,EAAcC,OAAd,QAA6B,iBAA7B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,SAASC,iBAAT,QAAkC,oDAAlC;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAf,EAAgC;AAC9B,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,MAA2BT,QAAQ,CAACG,iBAAD,EAAoB;AAC3DO,IAAAA,SAAS,EAAE;AACTC,MAAAA,MAAM,EAAG,GAAEN,KAAM,gBADR;AAETO,MAAAA,KAAK,EAAEN,IAFE;AAGTO,MAAAA,KAAK,EAAE;AAHE;AADgD,GAApB,CAAzC;;AAQA,WAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,QAAI,CAACA,IAAI,CAACC,QAAL,CAAc,SAAd,CAAL,EAA+B;AAC7B,aAAOD,IAAI,CAACE,KAAL,CAAW,IAAX,EAAiBC,GAAjB,CAAqBC,CAAC,IAAI;AAC/B,cAAMC,GAAG,GAAG,EAAZ;AAEAD,QAAAA,CAAC,CAACF,KAAF,CAAQ,GAAR,EAAaI,OAAb,CAAqBC,CAAC,IAAI;AACxBF,UAAAA,GAAG,CAACE,CAAC,CAACL,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBM,IAAhB,EAAD,CAAH,GAA8BD,CAAC,CAACL,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBM,IAAhB,EAA9B;AACD,SAFD;AAIAH,QAAAA,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACI,MAAJ,CAAWP,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA0BO,CAAC,IAAIC,UAAU,CAACD,CAAD,CAAzC,CAAb;AACAL,QAAAA,GAAG,CAACO,QAAJ,GAAeP,GAAG,CAACO,QAAnB;AACAP,QAAAA,GAAG,CAACQ,OAAJ,GAAcF,UAAU,CAACN,GAAG,CAACQ,OAAL,CAAxB;AAEA,eAAOR,GAAP;AACD,OAZM,CAAP;AAaD;;AACD,WAAO,IAAP;AACD;;AAED,MAAIX,OAAJ,EACE,OACE,MAAC,GAAD;AACE,IAAA,OAAO,EAAC,MADV;AAEE,IAAA,UAAU,EAAC,QAFb;AAGE,IAAA,cAAc,EAAC,QAHjB;AAIE,IAAA,MAAM,EAAC;AAJT,KAME,MAAC,OAAD;AAAS,IAAA,IAAI,EAAE;AAAf,IANF,CADF;AAUF,MAAID,KAAK,IAAI,CAACD,IAAI,CAACsB,UAAnB,EAA+B,OAAO,mBAAMrB,KAAN,CAAP;AAC/B,QAAM;AAAEO,IAAAA;AAAF,MAAWR,IAAI,CAACsB,UAAL,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBC,IAA1C;AAEA,SACE,MAAC,GAAD;AAAK,IAAA,QAAQ,EAAC;AAAd,KACE,MAAC,YAAD,eACMxB,IAAI,CAACsB,UAAL,CAAgBC,KAAhB,CAAsB,CAAtB,EAAyBC,IAD/B;AAEE;AACA,IAAA,KAAK,EAAE1B;AAHT,KADF,CADF;AASD;;AAED,eAAeD,KAAf;AAEAA,KAAK,CAAC4B,SAAN,GAAkB;AAChB3B,EAAAA,KAAK,EAAEJ,SAAS,CAACgC,MADD;AAEhB3B,EAAAA,IAAI,EAAEL,SAAS,CAACgC;AAFA,CAAlB","sourcesContent":["import { Box, Spinner } from '@chakra-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\nimport OrderDetails from '../common/OrderDetails';\nimport { SHOP_ORDERS_QUERY } from '../completed/completedOrderList/CompletedOrderList';\n\nfunction Order({ store, name }) {\n  const { data, error, loading } = useQuery(SHOP_ORDERS_QUERY, {\n    variables: {\n      domain: `${store}.myshopify.com`,\n      query: name,\n      first: 10,\n    },\n  });\n\n  function formatNote(note) {\n    if (!note.includes('Walmart')) {\n      return note.split('||').map(a => {\n        const obj = {};\n\n        a.split(',').forEach(b => {\n          obj[b.split(':')[0].trim()] = b.split(':')[1].trim();\n        });\n\n        obj.lineID = obj.lineID.split('|').map(c => parseFloat(c));\n        obj.marketID = obj.marketID;\n        obj.transID = parseFloat(obj.transID);\n\n        return obj;\n      });\n    }\n    return null;\n  }\n\n  if (loading)\n    return (\n      <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        height=\"100vh\"\n      >\n        <Spinner size={80} />\n      </Box>\n    );\n  if (error || !data.shopOrders) return <div>{error}</div>;\n  const { note } = data.shopOrders.edges[0].node;\n\n  return (\n    <Box maxWidth=\"45em\">\n      <OrderDetails\n        {...data.shopOrders.edges[0].node}\n        // note={note && formatNote(note)}\n        store={store}\n      />\n    </Box>\n  );\n}\n\nexport default Order;\n\nOrder.propTypes = {\n  store: PropTypes.string,\n  name: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}