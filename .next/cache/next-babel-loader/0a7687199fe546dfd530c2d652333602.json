{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport withApollo from \"next-with-apollo\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { endpoint, prodEndpoint } from \"../config\";\nexport default withApollo(function (_ref) {\n  var initialState = _ref.initialState,\n      headers = _ref.headers;\n  return new ApolloClient({\n    uri: false ? endpoint : prodEndpoint,\n    cache: new InMemoryCache().restore(initialState || {}),\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers: headers\n      });\n    }\n  });\n}, {\n  render: function render(_ref2) {\n    var Page = _ref2.Page,\n        props = _ref2.props;\n    return __jsx(ApolloProvider, {\n      client: props.apollo\n    }, __jsx(Page, props));\n  }\n}); // function createClient({ headers }) {\n//   return new ApolloClient({\n//     uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n//     request: operation => {\n//       operation.setContext({\n//         fetchOptions: {\n//           credentials: 'include',\n//         },\n//         headers,\n//       });\n//     },\n//   });\n// }\n// export default withApollo(createClient);","map":null,"metadata":{},"sourceType":"module"}