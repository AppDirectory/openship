{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport MktProduct from '../MarketplaceSearch/MktProduct';\n\nfunction ShopifySearch(_ref) {\n  var addCustomItem = _ref.addCustomItem,\n      atcDisabled = _ref.atcDisabled,\n      searchEntry = _ref.searchEntry,\n      token = _ref.token,\n      apiKey = _ref.apiKey,\n      url = _ref.url;\n\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  var _useState2 = useState(''),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  useEffect(function () {\n    function findItems() {\n      var query, variables, items;\n      return _regeneratorRuntime.async(function findItems$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = \"\\n      query AllOrdersQuery($query: String)\\n      {\\n        products(query: $query first:5) \\n        {\\n          pageInfo {\\n            hasNextPage\\n            hasPreviousPage\\n          }\\n          edges {\\n            node {\\n              id\\n              title\\n              options {\\n                id\\n                name\\n                values\\n              }\\n              variants(first: 250) {\\n                pageInfo {\\n                  hasNextPage\\n                  hasPreviousPage\\n                }\\n                edges {\\n                  node {\\n                    id\\n                    title\\n                    selectedOptions {\\n                      name\\n                      value\\n                    }\\n                    image {\\n                      src\\n                    }\\n                    price\\n                  }\\n                }\\n              }\\n              images(first: 250) {\\n                pageInfo {\\n                  hasNextPage\\n                  hasPreviousPage\\n                }\\n                edges {\\n                  node {\\n                    src\\n                  }\\n                }\\n              }\\n            }\\n          }\\n          }\\n        }\\n      \";\n              variables = {\n                query: searchEntry\n              };\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(\"https://\".concat(url, \".myshopify.com/api/graphql\"), {\n                method: 'POST',\n                body: JSON.stringify({\n                  query: query,\n                  variables: variables\n                }),\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-Shopify-Storefront-Access-Token': apiKey\n                }\n              }).then(function (res) {\n                return res.json();\n              }).then(function (json) {\n                return setResults(json.data.products.edges);\n              }));\n\n            case 4:\n              items = _context.sent;\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    searchEntry && findItems();\n  }, [apiKey, searchEntry, url]);\n  return results.map(function (product) {\n    return __jsx(MktProduct, {\n      addVariantToCart: function addVariantToCart(a, b) {\n        return addCustomItem(a, b);\n      },\n      checkout: function checkout() {\n        return toaster.success(\"checkout\");\n      },\n      key: product.node.id.toString(),\n      product: product.node,\n      client: \"Marketplace\",\n      atcDisabled: atcDisabled\n    });\n  });\n}\n\nexport default ShopifySearch;","map":{"version":3,"sources":["/Users/junaid/openship/components/find/ShopifySearch/index.js"],"names":["React","useState","useEffect","MktProduct","ShopifySearch","addCustomItem","atcDisabled","searchEntry","token","apiKey","url","results","setResults","error","setError","findItems","query","variables","fetch","method","body","JSON","stringify","headers","then","res","json","data","products","edges","items","map","product","a","b","toaster","success","node","id","toString"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,UAAP,MAAuB,iCAAvB;;AAEA,SAASC,aAAT,OAOG;AAAA,MANDC,aAMC,QANDA,aAMC;AAAA,MALDC,WAKC,QALDA,WAKC;AAAA,MAJDC,WAIC,QAJDA,WAIC;AAAA,MAHDC,KAGC,QAHDA,KAGC;AAAA,MAFDC,MAEC,QAFDA,MAEC;AAAA,MADDC,GACC,QADDA,GACC;;AAAA,kBAC6BT,QAAQ,CAAC,EAAD,CADrC;AAAA,MACMU,OADN;AAAA,MACeC,UADf;;AAAA,mBAEyBX,QAAQ,CAAC,EAAD,CAFjC;AAAA,MAEMY,KAFN;AAAA,MAEaC,QAFb;;AAIDZ,EAAAA,SAAS,CAAC,YAAM;AACd,aAAea,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,cAAAA,KADR;AAwDQC,cAAAA,SAxDR,GAwDoB;AAChBD,gBAAAA,KAAK,EAAET;AADS,eAxDpB;AAAA;AAAA,+CA4DsBW,KAAK,mBAAYR,GAAZ,iCAA6C;AACpES,gBAAAA,MAAM,EAAE,MAD4D;AAEpEC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEN,kBAAAA,KAAK,EAALA,KAAF;AAASC,kBAAAA,SAAS,EAATA;AAAT,iBAAf,CAF8D;AAGpEM,gBAAAA,OAAO,EAAE;AACP,kCAAgB,kBADT;AAEP,uDAAqCd;AAF9B;AAH2D,eAA7C,CAAL,CAQjBe,IARiB,CAQZ,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eARS,EASjBF,IATiB,CASZ,UAAAE,IAAI;AAAA,uBAAId,UAAU,CAACc,IAAI,CAACC,IAAL,CAAUC,QAAV,CAAmBC,KAApB,CAAd;AAAA,eATQ,CA5DtB;;AAAA;AA4DQC,cAAAA,KA5DR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAwEAvB,IAAAA,WAAW,IAAIQ,SAAS,EAAxB;AACD,GA1EQ,EA0EN,CAACN,MAAD,EAASF,WAAT,EAAsBG,GAAtB,CA1EM,CAAT;AA4EA,SAAOC,OAAO,CAACoB,GAAR,CAAY,UAAAC,OAAO;AAAA,WACxB,MAAC,UAAD;AACE,MAAA,gBAAgB,EAAE,0BAACC,CAAD,EAAIC,CAAJ;AAAA,eAAU7B,aAAa,CAAC4B,CAAD,EAAIC,CAAJ,CAAvB;AAAA,OADpB;AAEE,MAAA,QAAQ,EAAE;AAAA,eAAMC,OAAO,CAACC,OAAR,YAAN;AAAA,OAFZ;AAGE,MAAA,GAAG,EAAEJ,OAAO,CAACK,IAAR,CAAaC,EAAb,CAAgBC,QAAhB,EAHP;AAIE,MAAA,OAAO,EAAEP,OAAO,CAACK,IAJnB;AAKE,MAAA,MAAM,EAAC,aALT;AAME,MAAA,WAAW,EAAE/B;AANf,MADwB;AAAA,GAAnB,CAAP;AAUD;;AAED,eAAeF,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport MktProduct from '../MarketplaceSearch/MktProduct';\n\nfunction ShopifySearch({\n  addCustomItem,\n  atcDisabled,\n  searchEntry,\n  token,\n  apiKey,\n  url,\n}) {\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    async function findItems() {\n      const query = `\n      query AllOrdersQuery($query: String)\n      {\n        products(query: $query first:5) \n        {\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n          }\n          edges {\n            node {\n              id\n              title\n              options {\n                id\n                name\n                values\n              }\n              variants(first: 250) {\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  node {\n                    id\n                    title\n                    selectedOptions {\n                      name\n                      value\n                    }\n                    image {\n                      src\n                    }\n                    price\n                  }\n                }\n              }\n              images(first: 250) {\n                pageInfo {\n                  hasNextPage\n                  hasPreviousPage\n                }\n                edges {\n                  node {\n                    src\n                  }\n                }\n              }\n            }\n          }\n          }\n        }\n      `;\n\n      const variables = {\n        query: searchEntry,\n      };\n\n      const items = await fetch(`https://${url}.myshopify.com/api/graphql`, {\n        method: 'POST',\n        body: JSON.stringify({ query, variables }),\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Shopify-Storefront-Access-Token': apiKey,\n        },\n      })\n        .then(res => res.json())\n        .then(json => setResults(json.data.products.edges));\n    }\n\n    searchEntry && findItems();\n  }, [apiKey, searchEntry, url]);\n\n  return results.map(product => (\n    <MktProduct\n      addVariantToCart={(a, b) => addCustomItem(a, b)}\n      checkout={() => toaster.success(`checkout`)}\n      key={product.node.id.toString()}\n      product={product.node}\n      client=\"Marketplace\"\n      atcDisabled={atcDisabled}\n    />\n  ));\n}\n\nexport default ShopifySearch;\n"]},"metadata":{},"sourceType":"module"}