{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport { Box, Heading, Spinner, InputGroup, InputLeftElement, Input, Icon } from '@chakra-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport ShopSelect from '../common/ShopSelect';\nimport { CardStyle } from '../common/DefaultStyles';\nimport ProductsItem from './ProductsItem';\nconst PRODUCTS_QUERY = gql`\n  query shopProducts(\n    $domain: String!\n    $first: Int\n    $after: String\n    $before: String\n    $last: Int\n    $query: String\n  ) {\n    shopProducts(\n      domain: $domain\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      query: $query\n    ) {\n      pageInfo\n      edges\n    }\n  }\n`;\nexport default function Products({\n  shops\n}) {\n  const {\n    0: client,\n    1: setClient\n  } = useState(shops.length && shops[0].domain.split('.')[0]);\n  const {\n    0: afterCursor,\n    1: setAfterCursor\n  } = useState(null);\n  const {\n    0: beforeCursor,\n    1: setBeforeCursor\n  } = useState(null);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: first,\n    1: setFirst\n  } = useState(10);\n  const {\n    0: last,\n    1: setLast\n  } = useState(null);\n  const {\n    0: searchBar,\n    1: setSearchBar\n  } = useState('');\n  const {\n    data,\n    loading,\n    error\n  } = useQuery(PRODUCTS_QUERY, {\n    variables: {\n      domain: `${client}.myshopify.com`,\n      first,\n      last,\n      after: afterCursor,\n      before: beforeCursor,\n      query\n    }\n  });\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Products\"))), client ? __jsx(Box, CardStyle, __jsx(Box, {\n    display: \"flex\",\n    padding: \"1em\"\n  }, __jsx(Box, {\n    flex: 1\n  }, __jsx(InputGroup, {\n    width: \"100%\",\n    borderColor: \"gray.300\"\n  }, __jsx(InputLeftElement, {\n    children: __jsx(Icon, {\n      name: \"search\",\n      color: \"gray.300\"\n    })\n  }), __jsx(Input, {\n    value: searchBar,\n    onChange: e => {\n      setSearchBar(e.target.value);\n    },\n    onKeyPress: e => {\n      if (e.key === 'Enter') {\n        setQuery(e.target.value);\n      }\n    },\n    placeholder: \"Search\"\n  })), __jsx(ShopSelect, {\n    client: client,\n    shops: shops,\n    updateClient: updateClient\n  }))), (() => {\n    if (loading) return __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\"\n    }, __jsx(Spinner, {\n      size: 80\n    }));\n    if (error || !data.shopProducts) return __jsx(\"h1\", null, \"Error loading shops: \", error);\n    return __jsx(Box, {\n      width: \"100%\"\n    }, data.shopProducts.edges.map(product => __jsx(ProductsItem, {\n      client: client,\n      product: product.node\n    })));\n  })()) : __jsx(Box, {\n    backgroundColor: \"gray.100\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  }, __jsx(Heading, {\n    margin: \"1em\",\n    fontSize: \"xl\",\n    fontWeight: 600,\n    color: \"text\"\n  }, \"Your products will appear here after you add a shop.\")));\n}","map":null,"metadata":{},"sourceType":"module"}