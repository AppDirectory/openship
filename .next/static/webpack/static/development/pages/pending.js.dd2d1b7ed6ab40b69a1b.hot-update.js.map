{"version":3,"file":"static/webpack/static/development/pages/pending.js.dd2d1b7ed6ab40b69a1b.hot-update.js","sources":["webpack:///./components/find/Find.js"],"sourcesContent":["import React, { Component } from 'react';\nimport Link from 'next/link';\nimport { gql } from 'apollo-boost';\nimport {\n  Pane,\n  Heading,\n  Text,\n  SearchInput,\n  Icon,\n  TextInput,\n  IconButton,\n  Spinner,\n  TagInput,\n  toaster,\n  Tablist,\n  Tab,\n  Avatar,\n} from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport { Query } from 'react-apollo';\nimport Product from './findListItem/Product';\nimport AmzProduct from './findListItem/AmzProduct';\nimport User from '../user/User';\nimport Pagination from '../common/Pagination';\nimport TextButton from '../common/Button';\nimport { CardStyle } from '../common/DefaultStyles';\nimport { front, prodFront } from '../../config';\n\nconst getItems = gql`\n  query getItems(\n    $search: String\n    $limit: Int\n    $sort: String\n    $pageNum: Int\n    $exclude: Json\n    $include: Json\n    $priceCurrency: String\n    $price: String\n    $itemLocationCountry: String\n  ) {\n    getItems(\n      search: $search\n      limit: $limit\n      sort: $sort\n      pageNum: $pageNum\n      exclude: $exclude\n      include: $include\n      priceCurrency: $priceCurrency\n      price: $price\n      itemLocationCountry: $itemLocationCountry\n    ) {\n      item\n    }\n  }\n`;\n\nexport const getItemGroup = gql`\n  query getItemGroup($itemID: String) {\n    getItemGroup(itemID: $itemID) {\n      item\n    }\n  }\n`;\n\nconst sortOptions = [\n  {\n    label: 'Lowest Price',\n    value: 'price',\n  },\n  {\n    label: 'Highest Price',\n    value: '-price',\n  },\n  {\n    label: 'Best Match',\n    value: 'match',\n  },\n];\n\nconst option = (name, options, update, selected) => (\n  <Pane marginBottom={10} marginRight={10}>\n    <Heading size={500} fontSize=\"12px\" fontWeight={500} marginBottom={2}>\n      {name}\n    </Heading>\n    <Tablist>\n      {options.map((a, index) => (\n        <Tab\n          key={a}\n          id={a}\n          marginLeft={0}\n          height=\"20px\"\n          fontSize=\"10px\"\n          marginBottom={3}\n          letterSpacing=\"0.3px\"\n          fontWeight={400}\n          textTransform=\"uppercase\"\n          onSelect={() => update(a)}\n          isSelected={a === selected}\n          aria-controls={`panel-${a}`}\n        >\n          {a}\n        </Tab>\n      ))}\n    </Tablist>\n  </Pane>\n);\n\nexport default class Find extends Component {\n  static propTypes = {\n    headerSize: PropTypes.number,\n    atcDisabled: PropTypes.bool,\n    addVariant: PropTypes.func,\n  };\n\n  state = {\n    sort: {\n      label: 'Lowest Price',\n      value: 'price',\n    },\n    searchBar: '',\n    searchEntry: null,\n    limit: 10,\n    pageNum: 0,\n    min: '',\n    max: '',\n    price: null,\n    priceCurrency: 'USD',\n    itemLocationCountry: 'US',\n    include: [],\n    exclude: [],\n    selectedChannel: 'zinc',\n    zincResults: [],\n  };\n\n  zincSearch = (searchEntry, token) => {\n    console.log('called');\n    fetch(\n      `${\n        process.env.NODE_ENV === 'development' ? front : prodFront\n      }/api/zinc/search?query=${searchEntry}&token=${token}`\n    )\n      .then(res => res.json())\n      .then(json => this.setState({ zincResults: json }))\n      .catch(error => console.log('Error: ', error));\n  };\n\n  render() {\n    const { headerSize, atcDisabled, addMPItem, addZincItem } = this.props;\n    const {\n      pageNum,\n      searchBar,\n      sort,\n      limit,\n      itemLocationCountry,\n      selectedChannel,\n      min,\n      max,\n      include,\n      exclude,\n      searchEntry,\n      priceCurrency,\n      price,\n      zincResults,\n    } = this.state;\n    return (\n      <>\n        <Pane display=\"flex\" paddingTop={16} paddingBottom={16}>\n          <Pane flex={1} alignItems=\"center\" display=\"flex\">\n            <Heading size={headerSize || 700}>Marketplace</Heading>\n          </Pane>\n        </Pane>\n        <Pane {...CardStyle} background=\"white\">\n          <User>\n            {({ data: { me } }) => {\n              if (!me) return null;\n              if (me.buyer && me.buyer.status) {\n                return (\n                  <>\n                    <Pane\n                      display=\"flex\"\n                      paddingX=\"1em\"\n                      paddingY=\"1em\"\n                      flexWrap=\"wrap\"\n                    >\n                      <Pagination\n                        leftDisabled={pageNum === 0}\n                        onLeft={() =>\n                          this.setState(state => ({\n                            pageNum: state.pageNum - 1,\n                          }))\n                        }\n                        onRight={() =>\n                          this.setState(state => ({\n                            pageNum: state.pageNum + 1,\n                          }))\n                        }\n                      />\n                      <Pane flex={1}>\n                        <SearchInput\n                          placeholder=\"Search\"\n                          boxShadow=\"none\"\n                          width=\"100%\"\n                          height={36}\n                          value={searchBar}\n                          onChange={e =>\n                            this.setState({\n                              searchBar: e.target.value,\n                              pageNum: 0,\n                            })\n                          }\n                          onKeyPress={e => {\n                            if (e.key === 'Enter') {\n                              this.setState(state => ({\n                                searchEntry: state.searchBar,\n                              }));\n                              if (selectedChannel === 'zinc') {\n                                this.zincSearch(searchBar, me.zincToken);\n                              }\n                            }\n                          }}\n                        />\n                      </Pane>\n                    </Pane>\n\n                    <Pane\n                      display=\"flex\"\n                      flexWrap=\"wrap\"\n                      background=\"#f5f5f5\"\n                      paddingY=\".7em\"\n                      paddingX=\"1em\"\n                    >\n                      {option(\n                        'Channel',\n                        ['zinc', 'marketplace'],\n                        a => this.setState({ selectedChannel: a }),\n                        selectedChannel\n                      )}\n                      {option(\n                        'Location',\n                        ['US', 'CN', 'All'],\n                        a => this.setState({ itemLocationCountry: a }),\n                        itemLocationCountry\n                      )}\n                      {option(\n                        'Items per page',\n                        [10, 50, 100],\n                        a => this.setState({ limit: a }),\n                        limit\n                      )}\n                    </Pane>\n                    {searchEntry && selectedChannel === 'marketplace' && (\n                      <Query\n                        query={getItems}\n                        variables={{\n                          search: searchEntry,\n                          limit,\n                          sort: sort.value,\n                          pageNum,\n                          exclude,\n                          include,\n                          priceCurrency,\n                          price,\n                          itemLocationCountry,\n                        }}\n                      >\n                        {({ data, error, loading }) => {\n                          if (loading)\n                            return (\n                              <Pane\n                                display=\"flex\"\n                                alignItems=\"center\"\n                                justifyContent=\"center\"\n                                height=\"100vh\"\n                              >\n                                <Spinner size={80} />\n                              </Pane>\n                            );\n                          if (\n                            error ||\n                            !data.getItems.item ||\n                            data.getItems.item.length < 1\n                          )\n                            return (\n                              <Pane paddingX=\"1em\" paddingY=\"1em\">\n                                <Pane\n                                  background=\"tint2\"\n                                  display=\"flex\"\n                                  justifyContent=\"center\"\n                                  alignItems=\"center\"\n                                  flexDirection=\"column\"\n                                  borderRadius={3}\n                                >\n                                  <Heading margin=\"1em\" size={600}>\n                                    No items found.\n                                  </Heading>\n                                </Pane>\n                              </Pane>\n                            );\n                          return (\n                            <>\n                              {data.getItems.item.data.products.edges.map(\n                                product => (\n                                  <Product\n                                    addVariantToCart={(a, b) => addMPItem(a, b)}\n                                    checkout={() => toaster.success(`checkout`)}\n                                    key={product.node.id.toString()}\n                                    product={product.node}\n                                    client=\"Marketplace\"\n                                    atcDisabled={atcDisabled}\n                                  />\n                                )\n                              )}\n                            </>\n                          );\n                        }}\n                      </Query>\n                    )}\n                    {selectedChannel === 'zinc' && zincResults.length ? (\n                      zincResults.map(product => (\n                        <AmzProduct\n                          product={product}\n                          addVariantToCart={a => toaster.success(a)}\n                          atcDisabled={atcDisabled}\n                          addZincItem={(a, b, c, d, e) =>\n                            addZincItem(a, b, c, d, e)\n                          }\n                        />\n                      ))\n                    ) : (\n                      <Pane paddingX=\"1em\" paddingY=\"1em\">\n                        <Pane\n                          background=\"tint2\"\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                          borderRadius={3}\n                        >\n                          <Heading margin=\"1em\" size={600}>\n                            No items found\n                          </Heading>\n                        </Pane>\n                      </Pane>\n                    )}\n                  </>\n                );\n              }\n              return (\n                <Pane\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  width=\"100%\"\n                  height=\"200px\"\n                >\n                  <Link href=\"/settings\">\n                    <a>\n                      <TextButton intent=\"primary\" height={30} fontSize={16}>\n                        Apply for Beta Access\n                      </TextButton>\n                    </a>\n                  </Link>\n                </Pane>\n              );\n            }}\n          </User>\n        </Pane>\n      </>\n    );\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA4BA;AAQA;AAEA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAZA;AADA;AANA;AACA;AA2BA;;;;;;;;;;;;;;;;;;AAOA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AACA;AAmBA;AACA;AACA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AAAA;AACA;AACA;AADA;AAAA;AADA;AAKA;AAAA;AACA;AACA;AADA;AAAA;AADA;AAPA;AAaA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AADA;AAMA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AArBA;AA2BA;AACA;AACA;AACA;AACA;AALA;AAUA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAFA;AAcA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAGA;AAMA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAMA;AAGA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AADA;AAaA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAJA;AADA;AAWA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAQA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAKA;;;;AAtQA;AACA;AADA;AAEA;AACA;AACA;AAHA;AACA;;;;;A","sourceRoot":""}