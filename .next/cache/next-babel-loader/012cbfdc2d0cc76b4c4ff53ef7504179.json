{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useQuery } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport PropTypes from 'prop-types';\nimport CompletedOrderList from './completedOrderList/CompletedOrderList';\nimport { ALL_SHOPS_QUERY, shopsQueryVars } from '../shops/ShopList';\n\nfunction Completed(props) {\n  var _useQuery = useQuery(ALL_SHOPS_QUERY, {\n    variables: shopsQueryVars\n  }),\n      shops = _useQuery.data.shops,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  function formatNote(noteObj) {\n    return noteObj.split('||').map(function (a) {\n      var obj = {};\n      a.split(',').forEach(function (b) {\n        obj[b.split(':')[0].trim()] = b.split(':')[1].trim();\n      });\n      obj.lineID = obj.lineID.split('|').map(function (c) {\n        return parseFloat(c);\n      });\n      obj.marketID = obj.marketID;\n      obj.transID = parseFloat(obj.transID);\n      return obj;\n    });\n  }\n\n  return __jsx(React.Fragment, null, error || !shops ? null : __jsx(CompletedOrderList, {\n    shops: shops\n  }));\n}\n\nexport default Completed;\nCompleted.propTypes = {\n  name: PropTypes.string,\n  lineItems: PropTypes.array,\n  shippingAddress: PropTypes.string,\n  fulfillments: PropTypes.string,\n  note: PropTypes.string,\n  client: PropTypes.string\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/completed/Completed.js"],"names":["useQuery","Router","PropTypes","CompletedOrderList","ALL_SHOPS_QUERY","shopsQueryVars","Completed","props","variables","shops","data","loading","error","formatNote","noteObj","split","map","a","obj","forEach","b","trim","lineID","c","parseFloat","marketID","transID","propTypes","name","string","lineItems","array","shippingAddress","fulfillments","note","client"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,kBAAP,MAA+B,yCAA/B;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,mBAAhD;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA,kBAKpBP,QAAQ,CAACI,eAAD,EAAkB;AAC5BI,IAAAA,SAAS,EAAEH;AADiB,GAAlB,CALY;AAAA,MAEdI,KAFc,aAEtBC,IAFsB,CAEdD,KAFc;AAAA,MAGtBE,OAHsB,aAGtBA,OAHsB;AAAA,MAItBC,KAJsB,aAItBA,KAJsB;;AASxB,WAASC,UAAT,CAAoBC,OAApB,EAA6B;AAC3B,WAAOA,OAAO,CAACC,KAAR,CAAc,IAAd,EAAoBC,GAApB,CAAwB,UAAAC,CAAC,EAAI;AAClC,UAAMC,GAAG,GAAG,EAAZ;AAEAD,MAAAA,CAAC,CAACF,KAAF,CAAQ,GAAR,EAAaI,OAAb,CAAqB,UAAAC,CAAC,EAAI;AACxBF,QAAAA,GAAG,CAACE,CAAC,CAACL,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBM,IAAhB,EAAD,CAAH,GAA8BD,CAAC,CAACL,KAAF,CAAQ,GAAR,EAAa,CAAb,EAAgBM,IAAhB,EAA9B;AACD,OAFD;AAIAH,MAAAA,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACI,MAAJ,CAAWP,KAAX,CAAiB,GAAjB,EAAsBC,GAAtB,CAA0B,UAAAO,CAAC;AAAA,eAAIC,UAAU,CAACD,CAAD,CAAd;AAAA,OAA3B,CAAb;AACAL,MAAAA,GAAG,CAACO,QAAJ,GAAeP,GAAG,CAACO,QAAnB;AACAP,MAAAA,GAAG,CAACQ,OAAJ,GAAcF,UAAU,CAACN,GAAG,CAACQ,OAAL,CAAxB;AAEA,aAAOR,GAAP;AACD,KAZM,CAAP;AAaD;;AAED,SAAO,4BAAGN,KAAK,IAAI,CAACH,KAAV,GAAkB,IAAlB,GAAyB,MAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEA;AAA3B,IAA5B,CAAP;AACD;;AAED,eAAeH,SAAf;AAEAA,SAAS,CAACqB,SAAV,GAAsB;AACpBC,EAAAA,IAAI,EAAE1B,SAAS,CAAC2B,MADI;AAEpBC,EAAAA,SAAS,EAAE5B,SAAS,CAAC6B,KAFD;AAGpBC,EAAAA,eAAe,EAAE9B,SAAS,CAAC2B,MAHP;AAIpBI,EAAAA,YAAY,EAAE/B,SAAS,CAAC2B,MAJJ;AAKpBK,EAAAA,IAAI,EAAEhC,SAAS,CAAC2B,MALI;AAMpBM,EAAAA,MAAM,EAAEjC,SAAS,CAAC2B;AANE,CAAtB","sourcesContent":["import { useQuery } from '@apollo/react-hooks';\nimport Router from 'next/router';\nimport PropTypes from 'prop-types';\nimport CompletedOrderList from './completedOrderList/CompletedOrderList';\nimport { ALL_SHOPS_QUERY, shopsQueryVars } from '../shops/ShopList';\n\nfunction Completed(props) {\n  const {\n    data: { shops },\n    loading,\n    error,\n  } = useQuery(ALL_SHOPS_QUERY, {\n    variables: shopsQueryVars,\n  });\n\n  function formatNote(noteObj) {\n    return noteObj.split('||').map(a => {\n      const obj = {};\n\n      a.split(',').forEach(b => {\n        obj[b.split(':')[0].trim()] = b.split(':')[1].trim();\n      });\n\n      obj.lineID = obj.lineID.split('|').map(c => parseFloat(c));\n      obj.marketID = obj.marketID;\n      obj.transID = parseFloat(obj.transID);\n\n      return obj;\n    });\n  }\n\n  return <>{error || !shops ? null : <CompletedOrderList shops={shops} />}</>;\n}\n\nexport default Completed;\n\nCompleted.propTypes = {\n  name: PropTypes.string,\n  lineItems: PropTypes.array,\n  shippingAddress: PropTypes.string,\n  fulfillments: PropTypes.string,\n  note: PropTypes.string,\n  client: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}