{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Text, Box, Heading, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, useToast, Button } from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nimport { ORDER_QUERY, PAGINATION_QUERY } from '../pending/Pending';\nconst Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\nconst wideText = {\n  fontSize: 'xs',\n  fontWeight: 500,\n  color: 'gray.500',\n  letterSpacing: 'wide',\n  textTransform: 'uppercase'\n};\nconst CREATE_ORDER = gql`\n  mutation createOrder(\n    $shopName: String!\n    $orderId: Float!\n    $orderName: String!\n    $email: String\n    $first_name: String\n    $last_name: String\n    $streetAddress1: String!\n    $streetAddress2: String\n    $city: String!\n    $state: String!\n    $zip: String!\n    $lineItems: Json!\n    $currency: String!\n    $totalPrice: String!\n    $subTotalPrice: String!\n    $totalDiscount: String!\n    $totalTax: String!\n    $mpCart: String!\n    $zincCart: String!\n    $processed: Processed\n    $createAt: String!\n  ) {\n    createOrder(\n      shopName: $shopName\n      orderId: $orderId\n      orderName: $orderName\n      email: $email\n      first_name: $first_name\n      last_name: $last_name\n      streetAddress1: $streetAddress1\n      streetAddress2: $streetAddress2\n      city: $city\n      state: $state\n      zip: $zip\n      lineItems: $lineItems\n      currency: $currency\n      totalPrice: $totalPrice\n      totalDiscount: $totalDiscount\n      subTotalPrice: $subTotalPrice\n      totalTax: $totalTax\n      mpCart: $mpCart\n      zincCart: $zincCart\n      processed: $processed\n      createAt: $createAt\n    ) {\n      id\n      email\n    }\n  }\n`;\n\nfunction readFormField(data, field, onInput) {\n  return __jsx(Box, {\n    marginBottom: 2\n  }, __jsx(Text, {\n    contentEditable: \"true\",\n    onInput: onInput,\n    fontWeight: 500,\n    fontSize: \"md\",\n    color: \"text\"\n  }, data), __jsx(Heading, wideText, field));\n}\n\nconst Reshipment = ({\n  order,\n  shop,\n  isOpen,\n  onClose\n}) => {\n  const {\n    0: first,\n    1: setFirst\n  } = useState(null);\n  const {\n    0: last,\n    1: setLast\n  } = useState(null);\n  const {\n    0: address,\n    1: setAddress\n  } = useState(null);\n  const {\n    0: address2,\n    1: setAddress2\n  } = useState(null);\n  const {\n    0: city,\n    1: setCity\n  } = useState(null);\n  const {\n    0: state,\n    1: setState\n  } = useState(null);\n  const {\n    0: zip,\n    1: setZip\n  } = useState(null);\n  const {\n    0: lineItems,\n    1: setLineItems\n  } = useState(null);\n  const initialItems = [];\n  const toast = useToast();\n  const [createOrder, {\n    loading\n  }] = useMutation(CREATE_ORDER, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: 0,\n        first: 100,\n        orderBy: 'createdAt_ASC',\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  useEffect(() => {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  const handleLine = (ID, quantity, initialQty) => {\n    const temp = lineItems;\n    temp.map(item => {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        const itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  const resetLineItems = () => {\n    const temp = lineItems;\n    initialItems.reverse();\n    temp.map(item => {\n      initialItems.forEach(function (initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, null, __jsx(ModalHeader, null, \"Request Reshipment\"), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, __jsx(Box, Layout, __jsx(Box, {\n    marginBottom: 4\n  }, __jsx(Text, {\n    fontWeight: 600,\n    fontSize: \"md\",\n    color: \"text\"\n  }, order.name), __jsx(Heading, wideText, \"Order Number\")), readFormField(order.shippingAddress.name.split(' ')[0], 'First Name', e => setFirst(e.target.textContent)), readFormField(order.shippingAddress.name.split(' ').pop(), 'Last Name', e => setLast(e.target.textContent)), readFormField(order.shippingAddress.address1, 'Street Address', e => setAddress(e.target.textContent)), order.shippingAddress.address2 && readFormField(order.shippingAddress.address2, 'Apt, Suite, etc.', e => setAddress2(e.target.textContent)), readFormField(order.shippingAddress.city, 'City', e => setCity(e.target.textContent)), readFormField(order.shippingAddress.province, 'State', e => setState(e.target.textContent)), readFormField(order.shippingAddress.zip, 'Zip Code', e => setZip(e.target.textContent))), __jsx(Box, Layout, order.lineItems.edges.map(a => __jsx(ReshipmentLineItem, {\n    arg: a.node,\n    handleLine: handleLine\n  }))))), __jsx(ModalFooter, null, __jsx(Button, {\n    variant: \"ghost\",\n    mr: 3,\n    onClick: onClose\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    bg: \"blue.50\",\n    _hover: {\n      bg: 'blue.100'\n    },\n    isLoading: loading,\n    onClick: async () => {\n      const res = await createOrder({\n        variables: {\n          shopName: `${shop}.myshopify.com`,\n          orderId: order.id.split('/').pop(),\n          orderName: order.name,\n          email: order.email || 'noemail@noemail.com',\n          first_name: first,\n          last_name: last,\n          streetAddress1: address,\n          streetAddress2: address2,\n          city,\n          state,\n          zip,\n          phone: order.shippingAddress.phone,\n          lineItems: lineItems.filter(a => a.node.quantity > 0).map(b => {\n            b.node.id = parseFloat(b.node.id.split('/').pop());\n            return b.node;\n          }),\n          currency: 'USD',\n          totalPrice: order.totalReceivedSet.shopMoney.amount,\n          subTotalPrice: 0,\n          totalDiscount: 0,\n          totalTax: 0,\n          createAt: order.processedAt,\n          mpCart: '{}',\n          zincCart: '{}',\n          processed: 'FALSE'\n        }\n      });\n      onClose();\n      toast({\n        position: 'top-right',\n        title: `${order.name} has been requested for reshipment.`,\n        status: 'success',\n        duration: 2000,\n        isClosable: true\n      });\n    }\n  }, \"Confirm Reshipment\")))) : __jsx(React.Fragment, null);\n};\n\nexport default Reshipment;\nReshipment.propTypes = {\n  order: PropTypes.object,\n  isShown: PropTypes.bool,\n  onCloseComplete: PropTypes.func,\n  shop: PropTypes.string\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/common/Reshipment.js"],"names":["useState","useEffect","gql","useMutation","Text","Box","Heading","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","useToast","Button","PropTypes","ReshipmentLineItem","ORDER_QUERY","PAGINATION_QUERY","Layout","flex","marginLeft","marginTop","wideText","fontSize","fontWeight","color","letterSpacing","textTransform","CREATE_ORDER","readFormField","data","field","onInput","Reshipment","order","shop","isOpen","onClose","first","setFirst","last","setLast","address","setAddress","address2","setAddress2","city","setCity","state","setState","zip","setZip","lineItems","setLineItems","initialItems","toast","createOrder","loading","refetchQueries","query","variables","skip","orderBy","processed","shippingAddress","name","split","pop","address1","province","edges","handleLine","ID","quantity","initialQty","temp","map","item","node","id","itemObj","push","resetLineItems","reverse","forEach","initialItem","e","target","textContent","a","bg","res","shopName","orderId","orderName","email","first_name","last_name","streetAddress1","streetAddress2","phone","filter","b","parseFloat","currency","totalPrice","totalReceivedSet","shopMoney","amount","subTotalPrice","totalDiscount","totalTax","createAt","processedAt","mpCart","zincCart","position","title","status","duration","isClosable","propTypes","object","isShown","bool","onCloseComplete","func","string"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport {\n  Text,\n  Box,\n  Heading,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  useToast,\n  Button,\n} from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nimport { ORDER_QUERY, PAGINATION_QUERY } from '../pending/Pending';\n\nconst Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem',\n};\n\nconst wideText = {\n  fontSize: 'xs',\n  fontWeight: 500,\n  color: 'gray.500',\n  letterSpacing: 'wide',\n  textTransform: 'uppercase',\n};\n\nconst CREATE_ORDER = gql`\n  mutation createOrder(\n    $shopName: String!\n    $orderId: Float!\n    $orderName: String!\n    $email: String\n    $first_name: String\n    $last_name: String\n    $streetAddress1: String!\n    $streetAddress2: String\n    $city: String!\n    $state: String!\n    $zip: String!\n    $lineItems: Json!\n    $currency: String!\n    $totalPrice: String!\n    $subTotalPrice: String!\n    $totalDiscount: String!\n    $totalTax: String!\n    $mpCart: String!\n    $zincCart: String!\n    $processed: Processed\n    $createAt: String!\n  ) {\n    createOrder(\n      shopName: $shopName\n      orderId: $orderId\n      orderName: $orderName\n      email: $email\n      first_name: $first_name\n      last_name: $last_name\n      streetAddress1: $streetAddress1\n      streetAddress2: $streetAddress2\n      city: $city\n      state: $state\n      zip: $zip\n      lineItems: $lineItems\n      currency: $currency\n      totalPrice: $totalPrice\n      totalDiscount: $totalDiscount\n      subTotalPrice: $subTotalPrice\n      totalTax: $totalTax\n      mpCart: $mpCart\n      zincCart: $zincCart\n      processed: $processed\n      createAt: $createAt\n    ) {\n      id\n      email\n    }\n  }\n`;\n\nfunction readFormField(data, field, onInput) {\n  return (\n    <Box marginBottom={2}>\n      <Text\n        contentEditable=\"true\"\n        onInput={onInput}\n        fontWeight={500}\n        fontSize=\"md\"\n        color=\"text\"\n      >\n        {data}\n      </Text>\n      <Heading {...wideText}>{field}</Heading>\n    </Box>\n  );\n}\n\nconst Reshipment = ({ order, shop, isOpen, onClose }) => {\n  const [first, setFirst] = useState(null);\n  const [last, setLast] = useState(null);\n  const [address, setAddress] = useState(null);\n  const [address2, setAddress2] = useState(null);\n  const [city, setCity] = useState(null);\n  const [state, setState] = useState(null);\n  const [zip, setZip] = useState(null);\n  const [lineItems, setLineItems] = useState(null);\n  const initialItems = [];\n\n  const toast = useToast();\n\n  const [createOrder, { loading }] = useMutation(CREATE_ORDER, {\n    refetchQueries: [\n      {\n        query: ORDER_QUERY,\n        variables: {\n          skip: 0,\n          first: 100,\n          orderBy: 'createdAt_ASC',\n          processed: 'FALSE',\n        },\n      },\n      {\n        query: PAGINATION_QUERY,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  const handleLine = (ID, quantity, initialQty) => {\n    const temp = lineItems;\n\n    temp.map(item => {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        const itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  const resetLineItems = () => {\n    const temp = lineItems;\n    initialItems.reverse();\n    temp.map(item => {\n      initialItems.forEach(function(initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Request Reshipment</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Box\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            marginLeft=\"-2rem\"\n            marginTop=\"-2rem\"\n          >\n            <Box {...Layout}>\n              <Box marginBottom={4}>\n                <Text fontWeight={600} fontSize=\"md\" color=\"text\">\n                  {order.name}\n                </Text>\n                <Heading {...wideText}>Order Number</Heading>\n              </Box>\n              {readFormField(\n                order.shippingAddress.name.split(' ')[0],\n                'First Name',\n                e => setFirst(e.target.textContent)\n              )}\n              {readFormField(\n                order.shippingAddress.name.split(' ').pop(),\n                'Last Name',\n                e => setLast(e.target.textContent)\n              )}\n              {readFormField(\n                order.shippingAddress.address1,\n                'Street Address',\n                e => setAddress(e.target.textContent)\n              )}\n              {order.shippingAddress.address2 &&\n                readFormField(\n                  order.shippingAddress.address2,\n                  'Apt, Suite, etc.',\n                  e => setAddress2(e.target.textContent)\n                )}\n              {readFormField(order.shippingAddress.city, 'City', e =>\n                setCity(e.target.textContent)\n              )}\n              {readFormField(order.shippingAddress.province, 'State', e =>\n                setState(e.target.textContent)\n              )}\n              {readFormField(order.shippingAddress.zip, 'Zip Code', e =>\n                setZip(e.target.textContent)\n              )}\n            </Box>\n            <Box {...Layout}>\n              {order.lineItems.edges.map(a => (\n                <ReshipmentLineItem arg={a.node} handleLine={handleLine} />\n              ))}\n            </Box>\n          </Box>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button variant=\"ghost\" mr={3} onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"ghost\"\n            variantColor=\"blue\"\n            bg=\"blue.50\"\n            _hover={{ bg: 'blue.100' }}\n            isLoading={loading}\n            onClick={async () => {\n              const res = await createOrder({\n                variables: {\n                  shopName: `${shop}.myshopify.com`,\n                  orderId: order.id.split('/').pop(),\n                  orderName: order.name,\n                  email: order.email || 'noemail@noemail.com',\n                  first_name: first,\n                  last_name: last,\n                  streetAddress1: address,\n                  streetAddress2: address2,\n                  city,\n                  state,\n                  zip,\n                  phone: order.shippingAddress.phone,\n                  lineItems: lineItems\n                    .filter(a => a.node.quantity > 0)\n                    .map(b => {\n                      b.node.id = parseFloat(b.node.id.split('/').pop());\n                      return b.node;\n                    }),\n                  currency: 'USD',\n                  totalPrice: order.totalReceivedSet.shopMoney.amount,\n                  subTotalPrice: 0,\n                  totalDiscount: 0,\n                  totalTax: 0,\n                  createAt: order.processedAt,\n                  mpCart: '{}',\n                  zincCart: '{}',\n                  processed: 'FALSE',\n                },\n              });\n              onClose();\n              toast({\n                position: 'top-right',\n                title: `${order.name} has been requested for reshipment.`,\n                status: 'success',\n                duration: 2000,\n                isClosable: true,\n              });\n            }}\n          >\n            Confirm Reshipment\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  ) : (\n    <></>\n  );\n};\n\nexport default Reshipment;\n\nReshipment.propTypes = {\n  order: PropTypes.object,\n  isShown: PropTypes.bool,\n  onCloseComplete: PropTypes.func,\n  shop: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}