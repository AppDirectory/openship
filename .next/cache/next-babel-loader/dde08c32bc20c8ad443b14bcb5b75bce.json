{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { withRouter } from 'next/router';\nimport { Box, PseudoBox, Heading, Icon, Input, Text, Button, Popover, PopoverContent, PopoverTrigger, useToast } from '@chakra-ui/core';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { CHANNELS_QUERY, channelsQueryVars } from './Page';\nimport Signout from '../user/Signout';\nimport { front, prodFront } from '../../config';\nconst CREATE_CHANNEL_MUTATION = gql`\n  mutation CREATE_CHANNEL_MUTATION(\n    $name: String!\n    $type: ChannelType!\n    $settings: Json!\n  ) {\n    createChannel(name: $name, type: $type, settings: $settings) {\n      id\n      type\n      name\n      createdAt\n      settings\n    }\n  }\n`;\n\nconst Divider = __jsx(Box, {\n  flexShrink: 0,\n  height: \"3px\",\n  backgroundColor: \"rgb(44, 71, 118)\",\n  borderRadius: 1,\n  marginY: 1,\n  marginX: 3\n});\n\nconst option = (name, options, update, selected) => __jsx(Box, {\n  marginBottom: 2\n}, __jsx(Heading, {\n  fontSize: \"sm\",\n  fontWeight: 500,\n  marginBottom: 2,\n  color: \"gray.600\"\n}, name), __jsx(Box, {\n  width: \"100%\"\n}, options.map((a, index) => __jsx(Box, {\n  display: \"flex\",\n  alignItems: \"center\",\n  p: 2,\n  mt: 2,\n  borderRadius: 2,\n  bg: a === selected ? 'blue.50' : 'gray.50',\n  onClick: () => update(a),\n  cursor: \"pointer\"\n}, __jsx(Icon, {\n  name: \"check-circle\",\n  color: a === selected ? 'blue.200' : 'gray.400',\n  mr: 3\n}), __jsx(Heading, {\n  fontSize: \"xs\",\n  fontWeight: 500,\n  color: a === selected ? 'blue.600' : 'gray.500',\n  letterSpacing: \"wide\",\n  textTransform: \"uppercase\"\n}, a)))));\n\nexport const NavGroupTitle = ({\n  title,\n  icon,\n  fd\n}) => __jsx(Box, {\n  display: \"flex\",\n  flexDirection: fd || 'row',\n  alignItems: \"center\"\n}, __jsx(Heading, {\n  my: 2,\n  ml: 4,\n  mr: \"auto\",\n  textTransform: \"uppercase\",\n  letterSpacing: \"wide\",\n  fontSize: \"sm\",\n  fontWeight: 800,\n  color: \"#d7dae0\"\n}, title), icon);\n\nfunction postRequest(url, data) {\n  return fetch(url, {\n    credentials: 'same-origin',\n    // 'include', default: 'omit'\n    method: 'POST',\n    // 'GET', 'PUT', 'DELETE', etc.\n    body: JSON.stringify({\n      shops: data\n    }),\n    // Use correct payload (matching 'Content-Type')\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n}\n\nconst Header = ({\n  router,\n  logo,\n  onClick,\n  channels,\n  channelsError,\n  shops,\n  shopsError\n}) => {\n  const {\n    0: type,\n    1: setType\n  } = useState('zinc');\n  const {\n    0: shopURL,\n    1: setShopURL\n  } = useState('');\n  const {\n    0: name,\n    1: setName\n  } = useState('');\n  const {\n    0: key,\n    1: setKey\n  } = useState('');\n  const {\n    0: secret,\n    1: setSecret\n  } = useState('');\n  const toast = useToast();\n  const [createChannel] = useMutation(CREATE_CHANNEL_MUTATION, {\n    refetchQueries: [{\n      query: CHANNELS_QUERY,\n      variables: channelsQueryVars\n    }]\n  });\n  useEffect(() => {\n    postRequest(`${false ? front : prodFront}/_shopify`, shops);\n  }, [shops]);\n  const {\n    asPath\n  } = router;\n\n  const NavItem = ({\n    icon,\n    iconColor,\n    title,\n    href\n  }) => __jsx(Box, {\n    borderLeft: `3px solid ${asPath && asPath.startsWith(href) ? 'rgb(66, 95, 146)' : 'transparent'}`,\n    background: asPath && asPath.startsWith(href) ? 'rgb(35, 61, 106)' : null,\n    onSelect: onClick\n  }, __jsx(Link, {\n    href: href\n  }, __jsx(PseudoBox, {\n    onSelect: onClick,\n    cursor: \"pointer\",\n    width: \"100%\",\n    height: \"40px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    _hover: asPath && !asPath.startsWith(href) && {\n      bg: '#192c4e'\n    }\n  }, __jsx(Icon, {\n    name: icon,\n    color: iconColor || '#ffffff',\n    marginLeft: \"13px\" // size={15}\n\n  }), __jsx(Heading, {\n    color: \"#fff\",\n    ml: 2,\n    fontSize: 15,\n    overflow: \"visible\",\n    textTransform: \"capitalize\"\n  }, title))));\n\n  return __jsx(Box, {\n    background: \"rgb(23, 43, 77)\",\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, __jsx(Box, null, __jsx(Box, {\n    width: \"100%\"\n  }, logo, __jsx(Box, {\n    py: 2\n  }, __jsx(NavGroupTitle, {\n    title: \"Orders\"\n  }), __jsx(NavItem, {\n    icon: \"delta\",\n    title: \"Pending\",\n    href: \"/pending\"\n  }), __jsx(NavItem, {\n    icon: \"time\",\n    title: \"Processed\",\n    href: \"/processed\"\n  }), __jsx(NavItem, {\n    icon: \"check-circle\",\n    title: \"Completed\",\n    href: \"/completed\"\n  })), Divider, __jsx(Box, {\n    py: 2\n  }, __jsx(NavGroupTitle, {\n    title: \"Products\"\n  }), __jsx(NavItem, {\n    icon: \"database\",\n    title: \"All Products\",\n    href: \"/products\"\n  }), __jsx(NavItem, {\n    icon: \"globe\",\n    title: \"Marketplace\",\n    href: \"/find\"\n  })), Divider, __jsx(Box, {\n    py: 2\n  }, __jsx(NavGroupTitle, {\n    title: __jsx(Link, {\n      href: \"/shops\"\n    }, __jsx(Box, {\n      color: \"#d7dae0\",\n      cursor: \"pointer\"\n    }, \"Shops\")),\n    fd: shops && shops.length === 0 && 'column',\n    icon: __jsx(Popover, null, shops.length > 0 ? __jsx(PopoverTrigger, null, __jsx(Button, {\n      variantColor: \"green\",\n      backgroundImage: \"linear-gradient(to bottom, #23C277, #399D6C)\",\n      borderRadius: \"50%\",\n      height: \"20px\",\n      minWidth: \"20px\",\n      px: 0,\n      mr: 4\n    }, __jsx(Icon, {\n      size: 5,\n      name: \"small-add\"\n    }))) : __jsx(PopoverTrigger, null, __jsx(Box, {\n      px: 4,\n      mt: 2,\n      width: \"100%\"\n    }, __jsx(Button, {\n      variantColor: \"green\",\n      variant: \"ghost\",\n      bg: \"green.50\",\n      width: \"100%\",\n      borderRadius: 3,\n      marginRight: 1,\n      px: 2,\n      textTransform: \"uppercase\",\n      letterSpacing: \"wide\",\n      fontSize: \"md\",\n      fontWeight: 700,\n      _hover: {\n        opacity: 0.8\n      }\n    }, \"Add first shop\"))), __jsx(PopoverContent, {\n      zIndex: 4\n    }, __jsx(Box, {\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"left\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      padding: 15\n    }, __jsx(\"form\", {\n      method: \"GET\",\n      action: \"/shopify/auth\",\n      style: {\n        width: '100%'\n      }\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"Shop Name\"), __jsx(Input, {\n      label: \"Shop Name\",\n      mb: 2\n    }), __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"Shop URL\"), __jsx(Input, {\n      label: \"Shop URL\",\n      mb: 1,\n      id: \"shop\",\n      name: \"shop\"\n    }), __jsx(Text, {\n      fontSize: \"xs\",\n      color: \"gray.500\",\n      mb: 1\n    }, \"Must end in .myshopify.com\"), __jsx(Button, {\n      variantColor: \"green\",\n      variant: \"ghost\",\n      backgroundColor: \"green.50\",\n      borderRadius: 3,\n      marginRight: 1,\n      px: 3,\n      height: 8,\n      width: \"100%\"\n    }, __jsx(Heading, {\n      fontSize: \"sm\",\n      fontWeight: 700,\n      textTransform: \"uppercase\",\n      letterSpacing: \"wide\"\n    }, \"Add Shop\"))))))\n  }), (() => {\n    if (shopsError || !shops) return null;\n    return shops.map((shop, index) => __jsx(Box, {\n      key: index\n    }, __jsx(NavItem, {\n      icon: \"vinyl\",\n      iconColor: \"green.500\",\n      title: shop.name,\n      href: `/shop?shop=${shop.domain.split('.')[0]}`\n    })));\n  })()), Divider, __jsx(Box, {\n    py: 2\n  }, __jsx(NavGroupTitle, {\n    title: __jsx(Box, {\n      color: \"#d7dae0\",\n      cursor: \"pointer\"\n    }, \"Channels\"),\n    fd: channels && channels.length === 0 && 'column',\n    icon: __jsx(Popover, null, channels && channels.length === 0 ? __jsx(PopoverTrigger, null, __jsx(Box, {\n      px: 4,\n      mt: 2,\n      width: \"100%\"\n    }, __jsx(Button, {\n      variantColor: \"blue\",\n      variant: \"ghost\",\n      bg: \"blue.50\",\n      width: \"100%\",\n      borderRadius: 3,\n      marginRight: 1,\n      px: 2,\n      textTransform: \"uppercase\",\n      letterSpacing: \"wide\",\n      fontSize: \"md\",\n      fontWeight: 700,\n      _hover: {\n        opacity: 0.8\n      }\n    }, \"Add first channel\"))) : __jsx(PopoverTrigger, null, __jsx(Button, {\n      variantColor: \"green\",\n      backgroundImage: \"linear-gradient(to bottom, #23C277, #399D6C)\",\n      borderRadius: \"50%\",\n      height: \"20px\",\n      minWidth: \"20px\",\n      px: 0,\n      mr: 4\n    }, __jsx(Icon, {\n      size: 5,\n      name: \"small-add\"\n    }))), __jsx(PopoverContent, {\n      zIndex: 4\n    }, __jsx(Box, {\n      width: \"100%\",\n      display: \"flex\",\n      alignItems: \"left\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      padding: 15\n    }, option('Channel Type', ['zinc', 'shopify'], a => setType(a), type), __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"Name\"), __jsx(Input, {\n      label: \"Name\",\n      mb: 2,\n      value: name,\n      onChange: e => setName(e.target.value)\n    }), type === 'zinc' && __jsx(React.Fragment, null, __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"API Key\"), __jsx(Input, {\n      label: \"API Key\",\n      mb: 1,\n      value: key,\n      onChange: e => setKey(e.target.value)\n    }), __jsx(Text, {\n      fontSize: \"xs\",\n      color: \"gray.500\",\n      mb: 2\n    }, \"You must get the key at Zinc.io\")), type === 'shopify' && __jsx(React.Fragment, null, __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"Shop URL\"), __jsx(Input, {\n      label: \"Name\",\n      mb: 2,\n      value: shopURL,\n      onChange: e => setShopURL(e.target.value)\n    }), __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"API Key\"), __jsx(Input, {\n      label: \"key\",\n      mb: 2,\n      value: key,\n      onChange: e => setKey(e.target.value)\n    }), __jsx(Text, {\n      fontSize: \"sm\",\n      color: \"gray.600\",\n      mb: 1,\n      fontWeight: 500\n    }, \"Secret\"), __jsx(Input, {\n      label: \"Secret\",\n      mb: 2,\n      value: secret,\n      onChange: e => setSecret(e.target.value)\n    })), __jsx(Button, {\n      variantColor: \"green\",\n      variant: \"ghost\",\n      backgroundColor: \"green.50\",\n      borderRadius: 3,\n      marginRight: 1,\n      px: 3,\n      height: 8,\n      width: \"100%\",\n      onClick: async () => {\n        await createChannel({\n          variables: {\n            type: type.toUpperCase(),\n            name,\n            settings: _objectSpread({}, key && {\n              key\n            }, {}, secret && {\n              secret\n            }, {}, shopURL && {\n              shopURL\n            })\n          }\n        });\n        setName('');\n        setKey('');\n        setSecret('');\n        setShopURL('');\n        toast({\n          position: 'top-right',\n          title: 'Channel has been added.',\n          status: 'success',\n          duration: 2000,\n          isClosable: true\n        });\n      }\n    }, __jsx(Heading, {\n      fontSize: \"sm\",\n      fontWeight: 700,\n      textTransform: \"uppercase\",\n      letterSpacing: \"wide\"\n    }, \"Add Channel\")))))\n  }), (() => {\n    if (channelsError || !channels) return null;\n    return channels.map((channel, index) => __jsx(Box, {\n      key: index\n    }, __jsx(NavItem, {\n      icon: \"vinyl\",\n      iconColor: \"green.500\",\n      title: channel.name,\n      href: `/channel?channel=${channel.name}`\n    })));\n  })()), Divider, __jsx(Box, null, __jsx(NavItem, {\n    icon: \"settings\",\n    title: \"Settings\",\n    href: \"/settings\"\n  })))), __jsx(Box, {\n    marginTop: \"auto\"\n  }, __jsx(Signout, null)));\n};\n\nexport default withRouter(Header);","map":null,"metadata":{},"sourceType":"module"}