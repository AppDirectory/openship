{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseFloat from \"@babel/runtime-corejs2/core-js/parse-float\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createOrder(\\n    $shopName: String!\\n    $orderId: Float!\\n    $orderName: String!\\n    $email: String\\n    $first_name: String\\n    $last_name: String\\n    $streetAddress1: String!\\n    $streetAddress2: String\\n    $city: String!\\n    $state: String!\\n    $zip: String!\\n    $lineItems: Json!\\n    $currency: String!\\n    $totalPrice: String!\\n    $subTotalPrice: String!\\n    $totalDiscount: String!\\n    $totalTax: String!\\n    $mpCart: String!\\n    $zincCart: String!\\n    $createAt: String!\\n  ) {\\n    createOrder(\\n      shopName: $shopName\\n      orderId: $orderId\\n      orderName: $orderName\\n      email: $email\\n      first_name: $first_name\\n      last_name: $last_name\\n      streetAddress1: $streetAddress1\\n      streetAddress2: $streetAddress2\\n      city: $city\\n      state: $state\\n      zip: $zip\\n      lineItems: $lineItems\\n      currency: $currency\\n      totalPrice: $totalPrice\\n      totalDiscount: $totalDiscount\\n      subTotalPrice: $subTotalPrice\\n      totalTax: $totalTax\\n      mpCart: $mpCart\\n      zincCart: $zincCart\\n      createAt: $createAt\\n    ) {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { Mutation } from 'react-apollo';\nimport { Text, Pane, Dialog, Heading, toaster } from 'evergreen-ui';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nvar Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\nvar CREATE_ORDER = gql(_templateObject());\n\nfunction readFormField(data, field, onInput) {\n  return React.createElement(Pane, {\n    marginBottom: 6\n  }, React.createElement(Text, {\n    contenteditable: \"true\",\n    fontWeight: 500,\n    size: 400,\n    onInput: onInput\n  }, data), React.createElement(Heading, {\n    lineHeight: \"10px\",\n    fontSize: \"10px\",\n    size: 100\n  }, field));\n}\n\nvar Reshipment = function Reshipment(_ref) {\n  var order = _ref.order,\n      isShown = _ref.isShown,\n      onCloseComplete = _ref.onCloseComplete,\n      shop = _ref.shop;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      first = _useState2[0],\n      setFirst = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      last = _useState4[0],\n      setLast = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      address = _useState6[0],\n      setAddress = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      address2 = _useState8[0],\n      setAddress2 = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      city = _useState10[0],\n      setCity = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      state = _useState12[0],\n      setState = _useState12[1];\n\n  var _useState13 = useState(null),\n      _useState14 = _slicedToArray(_useState13, 2),\n      zip = _useState14[0],\n      setZip = _useState14[1];\n\n  var _useState15 = useState(null),\n      _useState16 = _slicedToArray(_useState15, 2),\n      lineItems = _useState16[0],\n      setLineItems = _useState16[1];\n\n  var initialItems = [];\n  useEffect(function () {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  var handleLine = function handleLine(ID, quantity, initialQty) {\n    var temp = lineItems;\n    temp.map(function (item) {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        var itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  var resetLineItems = function resetLineItems() {\n    var temp = lineItems;\n    initialItems.reverse();\n    temp.map(function (item) {\n      initialItems.forEach(function (initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? React.createElement(Mutation, {\n    mutation: CREATE_ORDER\n  }, function (createOrder, _ref2) {\n    var error = _ref2.error,\n        loading = _ref2.loading;\n    return React.createElement(Dialog, {\n      isShown: isShown,\n      title: \"Confirm Reshipment\",\n      onCloseComplete: onCloseComplete,\n      onCancel: function onCancel(close) {\n        resetLineItems();\n        close();\n      },\n      isConfirmLoading: loading,\n      isConfirmDisabled: loading,\n      hasHeader: false,\n      confirmLabel: \"Confirm Reshipment\",\n      onConfirm:\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return createOrder({\n                  variables: {\n                    shopName: \"\".concat(shop, \".myshopify.com\"),\n                    orderId: order.id.split('/').pop(),\n                    orderName: order.name,\n                    email: order.email || 'noemail@noemail.com',\n                    first_name: first,\n                    last_name: last,\n                    streetAddress1: address,\n                    streetAddress2: address2,\n                    city: city,\n                    state: state,\n                    zip: zip,\n                    phone: order.shippingAddress.phone,\n                    lineItems: lineItems.filter(function (a) {\n                      return a.node.quantity > 0;\n                    }).map(function (b) {\n                      b.node.id = _parseFloat(b.node.id.split('/').pop());\n                      return b.node;\n                    }),\n                    currency: 'USD',\n                    totalPrice: order.totalReceivedSet.shopMoney.amount,\n                    subTotalPrice: 0,\n                    totalDiscount: 0,\n                    totalTax: 0,\n                    createAt: order.processedAt,\n                    mpCart: '{}',\n                    zincCart: '{}',\n                    processed: 'FALSE'\n                  }\n                });\n\n              case 2:\n                res = _context.sent;\n                onCloseComplete();\n                toaster.success(\"\".concat(order.name, \" has been requested for reshipment.\"));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))\n    }, React.createElement(Pane, {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      marginLeft: \"-2rem\",\n      marginTop: \"-2rem\"\n    }, React.createElement(Pane, Layout, React.createElement(Pane, {\n      marginBottom: 10\n    }, React.createElement(Text, {\n      fontWeight: 500,\n      size: 500\n    }, order.name), React.createElement(Heading, {\n      size: 100\n    }, \"Order Number\")), readFormField(order.shippingAddress.name.split(' ')[0], 'First Name', function (e) {\n      return setFirst(e.target.textContent);\n    }), readFormField(order.shippingAddress.name.split(' ').pop(), 'Last Name', function (e) {\n      return setLast(e.target.textContent);\n    }), readFormField(order.shippingAddress.address1, 'Street Address', function (e) {\n      return setAddress(e.target.textContent);\n    }), order.shippingAddress.address2 && readFormField(order.shippingAddress.address2, 'Apt, Suite, etc.', function (e) {\n      return setAddress2(e.target.textContent);\n    }), readFormField(order.shippingAddress.city, 'City', function (e) {\n      return setCity(e.target.textContent);\n    }), readFormField(order.shippingAddress.province, 'State', function (e) {\n      return setState(e.target.textContent);\n    }), readFormField(order.shippingAddress.zip, 'Zip Code', function (e) {\n      return setZip(e.target.textContent);\n    })), React.createElement(Pane, Layout, order.lineItems.edges.map(function (a) {\n      return React.createElement(ReshipmentLineItem, {\n        arg: a.node,\n        handleLine: handleLine\n      });\n    }))));\n  }) : React.createElement(React.Fragment, null);\n};\n\nexport default Reshipment;","map":null,"metadata":{},"sourceType":"module"}