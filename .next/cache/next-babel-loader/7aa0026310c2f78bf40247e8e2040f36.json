{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Box, Heading, Text, Icon, Badge, Button, useDisclosure } from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport Reshipment from './Reshipment';\nvar secondaryLayout = {\n  flex: '1 1 10rem',\n  marginLeft: '1.5rem',\n  marginTop: '.3rem'\n};\nvar Layout = {\n  flex: '2 2 20rem',\n  marginLeft: '1.5rem',\n  marginTop: '.3rem'\n};\n\nvar OrderDetailsComp = function OrderDetailsComp(_ref) {\n  var backgroundColor = _ref.backgroundColor,\n      name = _ref.name,\n      store = _ref.store,\n      processedAt = _ref.processedAt,\n      fulfillments = _ref.fulfillments,\n      lineItems = _ref.lineItems,\n      shippingAddress = _ref.shippingAddress,\n      onOpen = _ref.onOpen;\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    paddingY: 4,\n    backgroundColor: backgroundColor,\n    boxShadow: backgroundColor && '0 0 1px rgba(67, 90, 111, 0.3)',\n    paddingX: backgroundColor && 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Box, null, __jsx(Heading, {\n    size: \"lg\",\n    fontWeight: 600,\n    color: \"text\"\n  }, name), __jsx(Heading, {\n    fontSize: \"xs\",\n    fontWeight: 600,\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    textTransform: \"uppercase\",\n    display: \"flex\",\n    alignItems: \"center\"\n  }, store, \" \\xB7\", __jsx(Text, {\n    ml: 1,\n    color: \"#234361\",\n    fontSize: \"xs\",\n    fontWeight: 400\n  }, processedAt && Intl.DateTimeFormat('en-US').format(Date.parse(processedAt)))), __jsx(Badge, {\n    marginTop: 2,\n    variantColor: fulfillments.length > 0 ? 'green' : 'red',\n    variant: \"solid\"\n  }, fulfillments.length > 0 ? 'Processed' : 'Not Processed'))), __jsx(Button, {\n    background: \"#DDEBF7\",\n    borderRadius: 3,\n    marginRight: 1,\n    px: 3,\n    height: 8,\n    onClick: onOpen\n  }, __jsx(Heading, {\n    fontSize: \"sm\",\n    fontWeight: 700,\n    color: \"#1070CA\",\n    marginRight: 2\n  }, \"RESHIP\"), __jsx(Icon, {\n    size: 4,\n    color: \"#1070CA\",\n    name: \"repeat\"\n  }))), __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-1.5rem\",\n    marginTop: \"-.3rem\",\n    padding: backgroundColor && 4\n  }, __jsx(Box, Layout, lineItems.edges.map(function (a) {\n    var ID = a.node.id.toString().split('/').pop();\n    return __jsx(Box, {\n      boxShadow: \"sm\",\n      background: \"white\",\n      padding: 2,\n      marginBottom: 15,\n      key: ID\n    }, __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\"\n    }, __jsx(Box, null, __jsx(Box, {\n      as: \"img\",\n      src: a.node.image && a.node.image.originalSrc,\n      borderStyle: \"solid\",\n      borderWidth: \"1px\",\n      borderRadius: 3,\n      borderColor: \"#e8e9ea\",\n      width: \"130px\"\n    })), __jsx(Box, {\n      marginLeft: 4\n    }, __jsx(Heading, {\n      size: \"sm\",\n      fontWeight: 600,\n      color: \"text\"\n    }, a.node.name), __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\"\n    }, __jsx(Text, {\n      color: \"#66788a\",\n      fontSize: 14,\n      mr: 1\n    }, ID), \"-\", __jsx(Text, {\n      color: \"#234361\",\n      fontSize: \"sm\",\n      ml: 1\n    }, \"QUANTITY: \", a.node.quantity)))));\n  })), __jsx(Box, secondaryLayout, __jsx(Box, {\n    boxShadow: \"sm\",\n    background: \"white\",\n    padding: 3,\n    marginBottom: 15\n  }, __jsx(Heading, {\n    fontSize: \"xs\",\n    fontWeight: 500,\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    textTransform: \"uppercase\",\n    mb: 2\n  }, \"Customer\"), __jsx(Box, {\n    display: \"block\"\n  }, __jsx(Box, {\n    fontSize: \"sm\",\n    color: \"#425A70\",\n    fontWeight: 500\n  }, __jsx(Box, null, shippingAddress.name.split(' ')[0], ' ', shippingAddress.name.split(' ').pop()), shippingAddress.address1, \" \", shippingAddress.address2, __jsx(\"br\", null), shippingAddress.city, ', ', shippingAddress.province, \" \", shippingAddress.zip))), fulfillments.length > 0 && __jsx(Box, {\n    boxShadow: \"sm\",\n    background: \"white\",\n    padding: 3,\n    marginBottom: 15\n  }, __jsx(Heading, {\n    fontSize: \"xs\",\n    fontWeight: 500,\n    color: \"gray.500\",\n    letterSpacing: \"wide\",\n    textTransform: \"uppercase\",\n    mb: 2\n  }, \"Shipments\"), __jsx(Box, {\n    display: \"block\"\n  }, fulfillments.map(function (a) {\n    return a.trackingInfo.map(function (b, index) {\n      return __jsx(Box, {\n        key: index,\n        display: \"flex\",\n        alignItems: \"center\"\n      }, __jsx(Icon, {\n        size: 4,\n        name: \"check-circle\",\n        color: \"#47B881\",\n        marginRight: 2\n      }), __jsx(\"a\", {\n        href: b.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\"\n      }, __jsx(Box, {\n        fontSize: \"md\",\n        color: \"#425A70\",\n        fontWeight: 500\n      }, b.number)));\n    });\n  }))))));\n};\n\nvar OrderDetails = function OrderDetails(props) {\n  var _useDisclosure = useDisclosure(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  return __jsx(React.Fragment, null, __jsx(Reshipment, {\n    isOpen: isOpen,\n    onClose: onClose,\n    order: props,\n    shop: props.store\n  }), __jsx(OrderDetailsComp, _extends({}, props, {\n    onOpen: onOpen\n  })));\n};\n\nexport default OrderDetails;\nexport { OrderDetailsComp };\nOrderDetails.propTypes = {\n  store: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  name: PropTypes.string,\n  processedAt: PropTypes.string,\n  note: PropTypes.object,\n  lineItems: PropTypes.array,\n  shippingAddress: PropTypes.object,\n  fulfillments: PropTypes.array\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/common/OrderDetails.js"],"names":["React","Box","Heading","Text","Icon","Badge","Button","useDisclosure","PropTypes","Reshipment","secondaryLayout","flex","marginLeft","marginTop","Layout","OrderDetailsComp","backgroundColor","name","store","processedAt","fulfillments","lineItems","shippingAddress","onOpen","Intl","DateTimeFormat","format","Date","parse","length","edges","map","a","ID","node","id","toString","split","pop","image","originalSrc","quantity","address1","address2","city","province","zip","trackingInfo","b","index","url","number","OrderDetails","props","isOpen","onClose","propTypes","string","note","object","array"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Heading,\n  Text,\n  Icon,\n  Badge,\n  Button,\n  useDisclosure,\n} from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport Reshipment from './Reshipment';\n\nconst secondaryLayout = {\n  flex: '1 1 10rem',\n  marginLeft: '1.5rem',\n  marginTop: '.3rem',\n};\n\nconst Layout = {\n  flex: '2 2 20rem',\n  marginLeft: '1.5rem',\n  marginTop: '.3rem',\n};\n\nconst OrderDetailsComp = ({\n  backgroundColor,\n  name,\n  store,\n  processedAt,\n  fulfillments,\n  lineItems,\n  shippingAddress,\n  onOpen,\n}) => (\n  <>\n    <Box\n      display=\"flex\"\n      paddingY={4}\n      backgroundColor={backgroundColor}\n      boxShadow={backgroundColor && '0 0 1px rgba(67, 90, 111, 0.3)'}\n      paddingX={backgroundColor && 4}\n    >\n      <Box flex={1} alignItems=\"center\" display=\"flex\">\n        <Box>\n          <Heading size=\"lg\" fontWeight={600} color=\"text\">\n            {name}\n          </Heading>\n          <Heading\n            fontSize=\"xs\"\n            fontWeight={600}\n            color=\"gray.500\"\n            letterSpacing=\"wide\"\n            textTransform=\"uppercase\"\n            display=\"flex\"\n            alignItems=\"center\"\n          >\n            {store} ·\n            <Text ml={1} color=\"#234361\" fontSize=\"xs\" fontWeight={400}>\n              {processedAt &&\n                Intl.DateTimeFormat('en-US').format(Date.parse(processedAt))}\n            </Text>\n          </Heading>\n          <Badge\n            marginTop={2}\n            variantColor={fulfillments.length > 0 ? 'green' : 'red'}\n            variant=\"solid\"\n          >\n            {fulfillments.length > 0 ? 'Processed' : 'Not Processed'}\n          </Badge>\n        </Box>\n      </Box>\n      {/* <Button\n          background=\"#DDEBF7\"\n          borderRadius={3}\n          marginRight={5}\n          onClick={onOpen}\n        >\n          <Box padding={3} display=\"flex\" alignItems=\"center\">\n            <Heading\n              size={100}\n              fontSize={13}\n              fontWeight={700}\n              color=\"#1070CA\"\n              marginRight={2}\n            >\n              RESHIP\n            </Heading>\n            <Icon size={4} color=\"#1070CA\" name=\"repeat\" />\n          </Box>\n        </Button> */}\n      <Button\n        background=\"#DDEBF7\"\n        borderRadius={3}\n        marginRight={1}\n        px={3}\n        height={8}\n        onClick={onOpen}\n      >\n        <Heading fontSize=\"sm\" fontWeight={700} color=\"#1070CA\" marginRight={2}>\n          RESHIP\n        </Heading>\n        <Icon size={4} color=\"#1070CA\" name=\"repeat\" />\n      </Button>\n    </Box>\n    <Box\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      marginLeft=\"-1.5rem\"\n      marginTop=\"-.3rem\"\n      padding={backgroundColor && 4}\n    >\n      <Box {...Layout}>\n        {lineItems.edges.map(a => {\n          const ID = a.node.id\n            .toString()\n            .split('/')\n            .pop();\n          return (\n            <Box\n              boxShadow=\"sm\"\n              background=\"white\"\n              padding={2}\n              marginBottom={15}\n              key={ID}\n            >\n              <Box display=\"flex\" alignItems=\"center\">\n                <Box>\n                  <Box\n                    as=\"img\"\n                    src={a.node.image && a.node.image.originalSrc}\n                    borderStyle=\"solid\"\n                    borderWidth=\"1px\"\n                    borderRadius={3}\n                    borderColor=\"#e8e9ea\"\n                    width=\"130px\"\n                  />\n                </Box>\n                <Box marginLeft={4}>\n                  <Heading size=\"sm\" fontWeight={600} color=\"text\">\n                    {a.node.name}\n                  </Heading>\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <Text color=\"#66788a\" fontSize={14} mr={1}>\n                      {ID}\n                    </Text>\n                    -\n                    <Text color=\"#234361\" fontSize=\"sm\" ml={1}>\n                      QUANTITY: {a.node.quantity}\n                    </Text>\n                  </Box>\n                </Box>\n              </Box>\n              {/* {props.note && mOrderLineItem(props.note, Number(ID))} */}\n            </Box>\n          );\n        })}\n      </Box>\n      <Box {...secondaryLayout}>\n        <Box boxShadow=\"sm\" background=\"white\" padding={3} marginBottom={15}>\n          <Heading\n            fontSize=\"xs\"\n            fontWeight={500}\n            color=\"gray.500\"\n            letterSpacing=\"wide\"\n            textTransform=\"uppercase\"\n            mb={2}\n          >\n            Customer\n          </Heading>\n          <Box display=\"block\">\n            <Box fontSize=\"sm\" color=\"#425A70\" fontWeight={500}>\n              <Box>\n                {shippingAddress.name.split(' ')[0]}{' '}\n                {shippingAddress.name.split(' ').pop()}\n              </Box>\n              {shippingAddress.address1} {shippingAddress.address2}\n              <br />\n              {shippingAddress.city}\n              {', '}\n              {shippingAddress.province} {shippingAddress.zip}\n            </Box>\n          </Box>\n        </Box>\n        {fulfillments.length > 0 && (\n          <Box boxShadow=\"sm\" background=\"white\" padding={3} marginBottom={15}>\n            <Heading\n              fontSize=\"xs\"\n              fontWeight={500}\n              color=\"gray.500\"\n              letterSpacing=\"wide\"\n              textTransform=\"uppercase\"\n              mb={2}\n            >\n              Shipments\n            </Heading>\n            <Box display=\"block\">\n              {fulfillments.map(a =>\n                a.trackingInfo.map((b, index) => (\n                  <Box key={index} display=\"flex\" alignItems=\"center\">\n                    <Icon\n                      size={4}\n                      name=\"check-circle\"\n                      color=\"#47B881\"\n                      marginRight={2}\n                    />\n                    <a href={b.url} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <Box fontSize=\"md\" color=\"#425A70\" fontWeight={500}>\n                        {b.number}\n                      </Box>\n                    </a>\n                  </Box>\n                ))\n              )}\n            </Box>\n          </Box>\n        )}\n      </Box>\n    </Box>\n  </>\n);\n\nconst OrderDetails = props => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Reshipment\n        isOpen={isOpen}\n        onClose={onClose}\n        order={props}\n        shop={props.store}\n      />\n      <OrderDetailsComp {...props} onOpen={onOpen} />\n    </>\n  );\n};\n\nexport default OrderDetails;\n\nexport { OrderDetailsComp };\n\nOrderDetails.propTypes = {\n  store: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  name: PropTypes.string,\n  processedAt: PropTypes.string,\n  note: PropTypes.object,\n  lineItems: PropTypes.array,\n  shippingAddress: PropTypes.object,\n  fulfillments: PropTypes.array,\n};\n"]},"metadata":{},"sourceType":"module"}