{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport Link from 'next/link';\nimport { Pane, Heading, SearchInput, Spinner, IconButton, Icon } from 'evergreen-ui';\nimport { Query } from 'react-apollo';\nimport ShopSelect from '../../common/ShopSelect';\nimport OrderListItem from '../../common/orderListItem/OrderListItem';\nimport Pagination from '../../common/Pagination';\nimport Button from '../../common/Button';\nimport Reshipment from '../../common/Reshipment';\nimport { CardStyle } from '../../common/DefaultStyles';\nexport const shopOrders = gql`\n  query shopOrders(\n    $domain: String!\n    $first: Int\n    $after: String\n    $before: String\n    $last: Int\n    $query: String\n  ) {\n    shopOrders(\n      domain: $domain\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      query: $query\n    ) {\n      pageInfo\n      edges\n    }\n  }\n`;\nexport default function CompletedOrderList({\n  shops\n}) {\n  const {\n    0: client,\n    1: setClient\n  } = useState(shops.length && shops[0].domain.split('.')[0]);\n  const {\n    0: afterCursor,\n    1: setAfterCursor\n  } = useState(null);\n  const {\n    0: beforeCursor,\n    1: setBeforeCursor\n  } = useState(null);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: first,\n    1: setFirst\n  } = useState(10);\n  const {\n    0: last,\n    1: setLast\n  } = useState(null);\n  const {\n    0: isShown,\n    1: setIsShown\n  } = useState(false);\n  const {\n    0: selectedOrder,\n    1: setSelectedOrder\n  } = useState(null);\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function updateDialog(arg) {\n    setIsShown(true);\n    setSelectedOrder(arg);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Pane, {\n    display: \"flex\",\n    paddingTop: 16,\n    paddingBottom: 16\n  }, __jsx(Pane, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    size: 700\n  }, \"Completed Orders\"))), client ? __jsx(Pane, CardStyle, __jsx(Pane, {\n    display: \"block\",\n    padding: \"1em\"\n  }, __jsx(Pane, {\n    display: \"flex\"\n  }, __jsx(SearchInput, {\n    placeholder: \"Search\",\n    width: \"100%\",\n    height: 36,\n    value: query,\n    onChange: e => setQuery(e.target.value)\n  })), __jsx(Pane, null, __jsx(ShopSelect, {\n    client: client,\n    shops: shops,\n    updateClient: updateClient\n  }))), __jsx(Query, {\n    query: shopOrders,\n    variables: {\n      domain: `${client}.myshopify.com`,\n      after: afterCursor,\n      before: beforeCursor,\n      first,\n      last,\n      query\n    }\n  }, ({\n    data,\n    error,\n    loading\n  }) => {\n    if (loading) return __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\"\n    }, __jsx(Spinner, {\n      size: 80\n    }));\n    if (error || !data.shopOrders) return __jsx(\"div\", null, error);\n    return __jsx(React.Fragment, null, __jsx(Pane, {\n      width: \"100%\"\n    }, selectedOrder && __jsx(Reshipment, {\n      isShown: isShown,\n      onCloseComplete: () => setIsShown(false),\n      order: data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder)[0].node,\n      shop: client\n    }), data.shopOrders.edges.map((order, index) => __jsx(Pane, {\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(OrderListItem, {\n      key: index,\n      disabled: true,\n      client: client,\n      orderName: order.node.name,\n      first_name: order.node.shippingAddress.name.split(' ')[0],\n      last_name: order.node.shippingAddress.name.split(' ').pop(),\n      streetAddress1: order.node.shippingAddress.address1,\n      streetAddress2: order.node.shippingAddress.address2,\n      city: order.node.shippingAddress.city,\n      state: order.node.shippingAddress.province,\n      zip: order.node.shippingAddress.zip,\n      shopName: client,\n      lineItems: order.node.lineItems.edges,\n      createAt: order.node.processedAt,\n      note: order.node.note && order.node.note // errorText={order.node.note && order.node.note}\n      // processText={order.node.note && order.node.note}\n      ,\n      orderId: order.node.id.split('/').pop(),\n      buttons: __jsx(React.Fragment, null, __jsx(Pane, {\n        height: 20,\n        marginLeft: 6\n      }, __jsx(Button, {\n        background: \"#F9F9FB\",\n        borderRadius: 3,\n        marginRight: 5,\n        onClick: () => updateDialog(order.node.id.split('/').pop())\n      }, __jsx(Heading, {\n        size: 100,\n        fontWeight: 700,\n        color: \"#234361\",\n        marginRight: 4\n      }, \"RESHIP\"), __jsx(Icon, {\n        color: \"#234361\",\n        icon: \"social-media\",\n        size: 12\n      }))), __jsx(Link, {\n        href: {\n          pathname: '/completed',\n          query: {\n            order: order.node.name,\n            email: order.node.email,\n            name: order.node.name,\n            processedAt: Intl.DateTimeFormat('en-US').format(Date.parse(order.node.processedAt)),\n            shippingAddress: _JSON$stringify(order.node.shippingAddress),\n            totalRecievedSet: order.totalPrice,\n            lineItems: _JSON$stringify(order.node.lineItems),\n            client,\n            note: order.node.note && order.node.note,\n            fulfillments: _JSON$stringify(order.node.fulfillments)\n          }\n        },\n        as: `/order?store=${client}&name=${order.node.name}`\n      }, __jsx(IconButton, {\n        height: 20,\n        appearance: \"minimal\",\n        icon: \"arrow-right\",\n        iconSize: 15,\n        pointerEvents: \"visible\",\n        marginRight: 2,\n        onClick: e => e.stopPropagation()\n      })))\n    })))));\n  })) : __jsx(Pane, {\n    background: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    borderRadius: 3\n  }, __jsx(Heading, {\n    margin: \"1em\",\n    size: 600\n  }, \"Your orders will appear here after you add a shop.\")));\n}","map":null,"metadata":{},"sourceType":"module"}