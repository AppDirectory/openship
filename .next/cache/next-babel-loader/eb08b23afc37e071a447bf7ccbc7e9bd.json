{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation SIGNUP_MUTATION($email: String!) {\\n    requestReset(email: $email) {\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport Userform from './Userform';\nvar REUQEST_RESET_MUTATION = gql(_templateObject());\n\nfunction RequestReset(_ref) {\n  var formChange = _ref.formChange;\n\n  var _useState = useState(''),\n      email = _useState[0],\n      setEmail = _useState[1];\n\n  var _useMutation = useMutation(REUQEST_RESET_MUTATION, {\n    variables: {\n      email: email\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      reset = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      error = _useMutation2$.error,\n      loading = _useMutation2$.loading,\n      called = _useMutation2$.called;\n\n  return __jsx(Userform, {\n    title: \"Please enter your email and we'll send a link to reset your password\",\n    handleToggleClick: function handleToggleClick() {\n      return formChange();\n    },\n    buttonTitle: \"Send Reset Link\",\n    buttonColor: \"#14B5D0\",\n    error: error,\n    loading: loading,\n    buttonDisabled: !email,\n    fields: [{\n      label: 'Email',\n      value: email,\n      onChange: setEmail,\n      icon: 'envelope'\n    }],\n    bottomLinkText: \"Back to sign in\",\n    onSubmit: function _callee(e) {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(reset());\n\n            case 3:\n              setEmail('');\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    success: called\n  });\n}\n\nexport default RequestReset;\nRequestReset.propTypes = {\n  formChange: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/junaid/openship2/components/user/RequestReset.js"],"names":["React","useState","useMutation","gql","PropTypes","Userform","REUQEST_RESET_MUTATION","RequestReset","formChange","email","setEmail","variables","reset","error","loading","called","label","value","onChange","icon","e","preventDefault","propTypes","func","isRequired"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,sBAAsB,GAAGH,GAAH,mBAA5B;;AAQA,SAASI,YAAT,OAAsC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACVP,QAAQ,CAAC,EAAD,CADE;AAAA,MAC7BQ,KAD6B;AAAA,MACtBC,QADsB;;AAAA,qBAGQR,WAAW,CACrDI,sBADqD,EAErD;AACEK,IAAAA,SAAS,EAAE;AAAEF,MAAAA,KAAK,EAALA;AAAF;AADb,GAFqD,CAHnB;AAAA;AAAA,MAG7BG,KAH6B;AAAA;AAAA,MAGpBC,KAHoB,kBAGpBA,KAHoB;AAAA,MAGbC,OAHa,kBAGbA,OAHa;AAAA,MAGJC,MAHI,kBAGJA,MAHI;;AAUpC,SACE,MAAC,QAAD;AACE,IAAA,KAAK,EAAC,sEADR;AAEE,IAAA,iBAAiB,EAAE;AAAA,aAAMP,UAAU,EAAhB;AAAA,KAFrB;AAGE,IAAA,WAAW,EAAC,iBAHd;AAIE,IAAA,WAAW,EAAC,SAJd;AAKE,IAAA,KAAK,EAAEK,KALT;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,cAAc,EAAE,CAACL,KAPnB;AAQE,IAAA,MAAM,EAAE,CACN;AACEO,MAAAA,KAAK,EAAE,OADT;AAEEC,MAAAA,KAAK,EAAER,KAFT;AAGES,MAAAA,QAAQ,EAAER,QAHZ;AAIES,MAAAA,IAAI,EAAE;AAJR,KADM,CARV;AAgBE,IAAA,cAAc,EAAC,iBAhBjB;AAiBE,IAAA,QAAQ,EAAE,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACRA,cAAAA,CAAC,CAACC,cAAF;AADQ;AAAA,+CAEFT,KAAK,EAFH;;AAAA;AAGRF,cAAAA,QAAQ,CAAC,EAAD,CAAR;;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAjBZ;AAsBE,IAAA,OAAO,EAAEK;AAtBX,IADF;AA0BD;;AAED,eAAeR,YAAf;AAEAA,YAAY,CAACe,SAAb,GAAyB;AACvBd,EAAAA,UAAU,EAAEJ,SAAS,CAACmB,IAAV,CAAeC;AADJ,CAAzB","sourcesContent":["import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport Userform from './Userform';\n\nconst REUQEST_RESET_MUTATION = gql`\n  mutation SIGNUP_MUTATION($email: String!) {\n    requestReset(email: $email) {\n      message\n    }\n  }\n`;\n\nfunction RequestReset({ formChange }) {\n  const [email, setEmail] = useState('');\n\n  const [reset, { error, loading, called }] = useMutation(\n    REUQEST_RESET_MUTATION,\n    {\n      variables: { email },\n    }\n  );\n\n  return (\n    <Userform\n      title=\"Please enter your email and we'll send a link to reset your password\"\n      handleToggleClick={() => formChange()}\n      buttonTitle=\"Send Reset Link\"\n      buttonColor=\"#14B5D0\"\n      error={error}\n      loading={loading}\n      buttonDisabled={!email}\n      fields={[\n        {\n          label: 'Email',\n          value: email,\n          onChange: setEmail,\n          icon: 'envelope',\n        },\n      ]}\n      bottomLinkText=\"Back to sign in\"\n      onSubmit={async e => {\n        e.preventDefault();\n        await reset();\n        setEmail('');\n      }}\n      success={called}\n    />\n  );\n}\n\nexport default RequestReset;\n\nRequestReset.propTypes = {\n  formChange: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}