{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport Link from 'next/link';\nimport { Box, Heading, Spinner, Drawer, DrawerOverlay, DrawerContent, Button, DrawerBody, InputGroup, InputLeftElement, Icon, Input, useDisclosure } from '@chakra-ui/core';\nimport { useQuery } from '@apollo/react-hooks';\nimport ShopSelect from '../../common/ShopSelect';\nimport OrderListItem from '../../common/orderListItem/OrderListItem';\nimport Reshipment from '../../common/Reshipment';\nimport { OrderDetailsComp } from '../../common/OrderDetails';\nimport { CardStyle } from '../../common/DefaultStyles';\nexport const SHOP_ORDERS_QUERY = gql`\n  query shopOrders(\n    $domain: String!\n    $first: Int\n    $after: String\n    $before: String\n    $last: Int\n    $query: String\n  ) {\n    shopOrders(\n      domain: $domain\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      query: $query\n    ) {\n      pageInfo\n      edges\n    }\n  }\n`;\nexport default function CompletedOrderList({\n  shops\n}) {\n  const {\n    0: client,\n    1: setClient\n  } = useState(shops.length && shops[0].domain.split('.')[0]);\n  const {\n    0: afterCursor,\n    1: setAfterCursor\n  } = useState(null);\n  const {\n    0: beforeCursor,\n    1: setBeforeCursor\n  } = useState(null);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: first,\n    1: setFirst\n  } = useState(10);\n  const {\n    0: last,\n    1: setLast\n  } = useState(null);\n  const {\n    0: selectedOrder,\n    1: setSelectedOrder\n  } = useState(null);\n  const {\n    0: selectedOrder2,\n    1: setSelectedOrder2\n  } = useState(null);\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    isOpen: drawerIsOpen,\n    onOpen: drawerOnOpen,\n    onClose: drawerOnClose\n  } = useDisclosure();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SHOP_ORDERS_QUERY, {\n    variables: {\n      domain: `${client}.myshopify.com`,\n      after: afterCursor,\n      before: beforeCursor,\n      first,\n      last,\n      query\n    }\n  });\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function updateDialog(arg) {\n    onOpen();\n    setSelectedOrder(arg);\n  }\n\n  function updateDrawer(arg) {\n    drawerOnOpen();\n    setSelectedOrder2(arg);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Completed Orders\"))), selectedOrder2 && __jsx(Drawer, {\n    size: \"md\",\n    isOpen: drawerIsOpen,\n    placement: \"right\",\n    onClose: drawerOnClose\n  }, __jsx(DrawerOverlay, null), __jsx(DrawerContent, null, __jsx(DrawerBody, {\n    bg: \"#f9f9fb\",\n    p: 0\n  }, __jsx(Box, null, __jsx(OrderDetailsComp, _extends({}, data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder2)[0].node, {\n    store: client,\n    backgroundColor: \"white\",\n    onOpen: () => updateDialog(selectedOrder2)\n  })))))), client ? __jsx(Box, CardStyle, __jsx(Box, {\n    display: \"block\",\n    padding: \"1em\"\n  }, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(InputGroup, {\n    width: \"100%\",\n    borderColor: \"gray.300\"\n  }, __jsx(InputLeftElement, {\n    children: __jsx(Icon, {\n      name: \"search\",\n      color: \"gray.300\"\n    })\n  }), __jsx(Input, {\n    value: query,\n    onChange: e => setQuery(e.target.value),\n    type: \"phone\",\n    placeholder: \"Search\"\n  }))), __jsx(Box, null, __jsx(ShopSelect, {\n    client: client,\n    shops: shops,\n    updateClient: updateClient\n  }))), (() => {\n    if (loading) return __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    }));\n    if (error || !data.shopOrders) return __jsx(\"div\", null, error);\n    return __jsx(React.Fragment, null, __jsx(Box, {\n      width: \"100%\"\n    }, selectedOrder && __jsx(Reshipment, {\n      isOpen: isOpen,\n      onClose: onClose,\n      order: data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder).length > 0 && data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder)[0].node,\n      shop: client\n    }), data.shopOrders.edges.map((order, index) => __jsx(Box, {\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(OrderListItem, {\n      key: index,\n      disabled: true,\n      client: client,\n      orderName: order.node.name,\n      first_name: order.node.shippingAddress.name.split(' ')[0],\n      last_name: order.node.shippingAddress.name.split(' ').pop(),\n      streetAddress1: order.node.shippingAddress.address1,\n      streetAddress2: order.node.shippingAddress.address2,\n      city: order.node.shippingAddress.city,\n      state: order.node.shippingAddress.province,\n      zip: order.node.shippingAddress.zip,\n      shopName: client,\n      lineItems: order.node.lineItems.edges,\n      createAt: order.node.processedAt,\n      note: order.node.note && order.node.note,\n      email: order.node.email // errorText={order.node.note && order.node.note}\n      // processText={order.node.note && order.node.note}\n      ,\n      orderId: order.node.id.split('/').pop(),\n      buttons: __jsx(React.Fragment, null, __jsx(Button, {\n        background: \"#DDEBF7\",\n        borderRadius: 3,\n        marginRight: 1,\n        px: 2,\n        height: 5,\n        onClick: () => updateDialog(order.node.id.split('/').pop())\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        color: \"#1070CA\",\n        marginRight: 2\n      }, \"RESHIP\"), __jsx(Icon, {\n        size: 3,\n        color: \"#1070CA\",\n        name: \"repeat\"\n      })), __jsx(Link, {\n        href: {\n          pathname: '/completed'\n        },\n        as: `/order?store=${client}&name=${order.node.name}`\n      }, __jsx(Button, {\n        onClick: () => updateDrawer(order.node.id.split('/').pop()),\n        bg: \"transparent\",\n        color: \"#66788a\",\n        \"aria-label\": \"show order\",\n        height: \"1.3rem\",\n        minWidth: \"1.3rem\",\n        px: 0,\n        ml: 1\n      }, __jsx(Icon, {\n        name: \"arrow-forward\",\n        size: \"18px\"\n      }))))\n    })))));\n  })()) : __jsx(Box, {\n    background: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    borderRadius: 3\n  }, __jsx(Heading, {\n    margin: \"1em\",\n    size: 600\n  }, \"Your orders will appear here after you add a shop.\")));\n}","map":null,"metadata":{},"sourceType":"module"}