{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Box, Heading, Text, Code, Switch } from '@chakra-ui/core';\nimport { front, prodFront, prodEndpoint } from '../../config';\n\nfunction getWebhooks(domain, accessToken, setResults) {\n  var url = \"\".concat(false ? front : prodFront, \"/\").concat(accessToken, \"/graphql\");\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: \"\\n    {\\n      webhookSubscriptions(first :5\\n        callbackUrl: \\\"\".concat(prodEndpoint, \"order?spdn=\").concat(domain, \"\\\"\\n        ) {\\n          edges{\\n            node{\\n              id\\n              callbackUrl\\n              createdAt\\n              topic\\n              includeFields\\n            }\\n          }\\n        }\\n      }\\n    \")\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    if (res.data) {\n      var results = res.data.webhookSubscriptions.edges;\n      setResults(results);\n    }\n  });\n}\n\nfunction createWebhook(domain, accessToken, setResults) {\n  var url = \"\".concat(false ? front : prodFront, \"/\").concat(accessToken, \"/graphql\");\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: \"\\n      mutation webhookSubscriptionCreate(\\n        $topic: WebhookSubscriptionTopic!\\n        $webhookSubscription: WebhookSubscriptionInput!\\n      ) {\\n        webhookSubscriptionCreate(\\n          topic: $topic\\n          webhookSubscription: $webhookSubscription\\n        ) {\\n          userErrors {\\n            field\\n            message\\n          }\\n          webhookSubscription {\\n            id\\n          }\\n        }\\n      }\\n    \",\n      variables: {\n        topic: 'ORDERS_CREATE',\n        webhookSubscription: {\n          callbackUrl: \"\".concat(prodEndpoint, \"order?spdn=\").concat(domain),\n          format: 'JSON'\n        }\n      }\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    var webhook = res.data.webhookSubscriptionCreate;\n    getWebhooks(domain, accessToken, setResults);\n  });\n}\n\nfunction deleteWebhook(id, domain, accessToken, setResults) {\n  var url = \"\".concat(false ? front : prodFront, \"/\").concat(accessToken, \"/graphql\");\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: \"\\n      mutation   {\\n        webhookSubscriptionDelete(\\n          id: \\\"\".concat(id, \"\\\"\\n        ) {\\n          deletedWebhookSubscriptionId\\n        }\\n      }\\n    \")\n    })\n  }).then(function (res) {\n    return res.json();\n  }).then(function (res) {\n    getWebhooks(domain, accessToken, setResults);\n  });\n}\n\nvar WebhookSwitch = function WebhookSwitch(_ref) {\n  var domain = _ref.domain,\n      accessToken = _ref.accessToken;\n\n  var _useState = useState([]),\n      results = _useState[0],\n      setResults = _useState[1];\n\n  useEffect(function () {\n    getWebhooks(domain, accessToken, setResults);\n  }, [domain, accessToken]);\n\n  function handleSwitch(e) {\n    if (e.target.checked) {\n      createWebhook(domain, accessToken, setResults);\n    } else {\n      deleteWebhook(results[0].node.id, domain, accessToken, setResults);\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    paddingY: 2,\n    paddingX: 4,\n    background: \"#f5f5f5\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  }, __jsx(Box, {\n    paddingRight: 15\n  }, __jsx(Heading, {\n    fontSize: \"sm\",\n    fontWeight: 500,\n    mb: 1,\n    color: \"gray.800\"\n  }, \"Push orders to Openship\"), __jsx(Text, {\n    fontSize: \"xs\",\n    color: \"gray.700\"\n  }, \"Orders will be pushed to the pending tab to be fulfilled\")), __jsx(Switch, {\n    marginLeft: \"auto\",\n    isChecked: results.length > 0,\n    onChange: function onChange(e) {\n      return handleSwitch(e);\n    }\n  })), results.map(function (a) {\n    return __jsx(Box, {\n      paddingY: 2,\n      paddingX: 3\n    }, __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      marginBottom: 2\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      fontWeight: 500,\n      align: \"right\",\n      marginRight: 2,\n      flexBasis: \"100px\",\n      textAlign: \"right\",\n      color: \"text\"\n    }, \"Endpoint:\"), __jsx(Code, {\n      variantColor: \"blue\",\n      fontSize: \"xs\",\n      wordWrap: \"break-word\"\n    }, \"Openship\")), __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\"\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      fontWeight: 500,\n      align: \"right\",\n      marginRight: 2,\n      flexBasis: \"100px\",\n      textAlign: \"right\",\n      color: \"text\"\n    }, \"Topic:\"), __jsx(Code, {\n      variantColor: \"blue\",\n      fontSize: \"xs\"\n    }, a.node.topic)));\n  }));\n};\n\nexport default WebhookSwitch;","map":null,"metadata":{},"sourceType":"module"}