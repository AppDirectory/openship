{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Box, Heading, Spinner, Icon, Button } from '@chakra-ui/core';\nimport OrderListItem from '../common/orderListItem/OrderListItem';\nimport { CardStyle } from '../common/DefaultStyles';\nexport const ORDER_QUERY = gql`\n  query OrdersQuery($skip: Int, $first: Int, $processed: Processed) {\n    orders(\n      first: $first\n      skip: $skip\n      orderBy: createAt_DESC\n      where: { processed: $processed }\n    ) {\n      id\n      orderId\n      orderName\n      email\n      first_name\n      last_name\n      streetAddress1\n      streetAddress2\n      city\n      state\n      zip\n      phone\n      lineItems\n      currency\n      totalPrice\n      subTotalPrice\n      totalDiscount\n      totalTax\n      createAt\n      mpCart\n      mpCheckout\n      zincCart\n      zincCheckout\n      processed\n      shopName\n    }\n  }\n`;\nconst PAGINATION_QUERY = gql`\n  query PAGINATION_QUERY {\n    ordersConnection(where: { processed: TRUE }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\n\nfunction PendingOrders() {\n  const {\n    0: skip,\n    1: setSkip\n  } = useState(0);\n  const {\n    0: firstQ,\n    1: setFirstQ\n  } = useState(100);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    data: ordersData,\n    error: ordersError,\n    loading: ordersLoading\n  } = useQuery(ORDER_QUERY, {\n    variables: {\n      skip,\n      first: firstQ,\n      processed: 'TRUE'\n    }\n  });\n  const {\n    data: pageData,\n    error: pageError,\n    loading: pageLoading\n  } = useQuery(PAGINATION_QUERY);\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Processed Orders\"))), __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  }, (() => {\n    if (ordersLoading) return __jsx(React.Fragment, null, __jsx(Box, {\n      width: \"100%\"\n    }, __jsx(Box, CardStyle, __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"50vh\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    })))));\n    if (ordersError) return `Error! ${ordersError.message}`;\n    const {\n      orders\n    } = ordersData;\n    return __jsx(React.Fragment, null, __jsx(Box, _extends({\n      width: \"100%\"\n    }, CardStyle), __jsx(Box, {\n      display: \"flex\",\n      paddingX: \"1em\",\n      paddingY: \".6em\",\n      alignItems: \"center\"\n    }, (() => {\n      const count = pageData.ordersConnection ? pageData.ordersConnection.aggregate.count : 0;\n      return __jsx(React.Fragment, null, __jsx(Heading, {\n        fontSize: \"xs\",\n        letterSpacing: \"wider\",\n        textTransform: \"uppercase\",\n        color: \"gray.500\",\n        fontWeight: 400\n      }, count, \" Orders\"), __jsx(Box, {\n        marginLeft: \"auto\"\n      }, __jsx(Button, {\n        background: \"#DDEBF7\",\n        color: \"#1070CA\",\n        borderRadius: 3,\n        px: 2,\n        height: 6,\n        onClick: () => setOpen(!open)\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        letterSpacing: \"wide\",\n        marginRight: 1,\n        textTransform: \"uppercase\"\n      }, open ? 'Collapse' : 'Expand', \" All\"), __jsx(Icon, {\n        size: 5,\n        name: \"chevron-down\"\n      }))));\n    })()), orders.length ? orders.map(order => __jsx(Box, {\n      key: order.id\n    }, __jsx(Box, {\n      opacity: ordersLoading && '0.2',\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\"\n    }, ordersLoading && __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\"\n    }, __jsx(Spinner, {\n      size: 80\n    })), __jsx(Box, {\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(OrderListItem, _extends({}, order, {\n      key: order.id,\n      index: order.id,\n      disabled: true,\n      open: open\n    })))))) : __jsx(Box, {\n      backgroundColor: \"gray.100\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\"\n    }, __jsx(Heading, {\n      margin: \"1em\",\n      fontSize: \"xl\",\n      fontWeight: 600,\n      color: \"text\"\n    }, \"Your processed orders will appear here.\"))));\n  })()));\n}\n\nexport default PendingOrders;","map":null,"metadata":{},"sourceType":"module"}