{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Box, Heading, Spinner, Text, Icon, Button, useToast } from '@chakra-ui/core';\nimport OrderListItem from '../common/orderListItem/OrderListItem';\nimport Find from '../find/Find';\nimport { CURRENT_USER_QUERY } from '../user/User';\nimport { CHANNELS_QUERY, channelsQueryVars } from '../layout/Page';\nimport OrderLine from '../common/orderListItem/OrderLine';\nimport { CardStyle } from '../common/DefaultStyles';\nimport MPCart from './Cart/MPCart';\nimport ZincCart from './Cart/ZincCart';\nimport { placeZincOrder } from './placeZincOrder';\nimport { placeCustomOrder } from './placeCustomOrder';\nexport const ORDER_QUERY = gql`\n  query OrdersQuery(\n    $skip: Int\n    $first: Int\n    $orderBy: OrderOrderByInput\n    $processed: Processed\n  ) {\n    orders(\n      first: $first\n      skip: $skip\n      orderBy: $orderBy\n      where: { processed: $processed }\n    ) {\n      id\n      orderId\n      orderName\n      email\n      first_name\n      last_name\n      streetAddress1\n      streetAddress2\n      city\n      state\n      zip\n      phone\n      lineItems\n      currency\n      totalPrice\n      subTotalPrice\n      totalDiscount\n      totalTax\n      createAt\n      mpCart\n      mpCheckout\n      zincCart\n      zincCheckout\n      customCheckout\n      customCart\n      processed\n      shopName\n    }\n  }\n`;\nexport const PAGINATION_QUERY = gql`\n  query PAGINATION_QUERY {\n    ordersConnection(where: { processed: FALSE }) {\n      aggregate {\n        count\n      }\n    }\n  }\n`;\nconst UPDATE_ORDER_MUTATION = gql`\n  mutation updateOrder(\n    $id: ID!\n    $mpCart: String\n    $customCart: String\n    $customCheckout: Json\n    $zincCart: String\n    $zincCheckout: Json\n    $first_name: String\n    $last_name: String\n    $streetAddress1: String\n    $streetAddress2: String\n    $city: String\n    $state: String\n    $zip: String\n    $processed: Processed\n  ) {\n    updateOrder(\n      id: $id\n      mpCart: $mpCart\n      customCart: $customCart\n      customCheckout: $customCheckout\n      zincCart: $zincCart\n      zincCheckout: $zincCheckout\n      first_name: $first_name\n      last_name: $last_name\n      streetAddress1: $streetAddress1\n      streetAddress2: $streetAddress2\n      city: $city\n      state: $state\n      zip: $zip\n      processed: $processed\n    ) {\n      id\n      email\n    }\n  }\n`;\nconst UPSERT_MATCH_MUTATION = gql`\n  mutation upsertMatch($id: ID!) {\n    upsertMatch(id: $id) {\n      item\n    }\n  }\n`;\nconst PURCHASE_ORDER_MUTATION = gql`\n  mutation purchaseItems($ids: Json!) {\n    purchaseItems(ids: $ids) {\n      checkout\n      cart\n    }\n  }\n`;\nconst CREATE_CHECKOUT_MUTATION = gql`\n  mutation createCheckout($input: Json!) {\n    createCheckout(input: $input) {\n      checkout\n    }\n  }\n`;\nconst CHECKOUT_ADD_MUTATION = gql`\n  mutation checkoutLineItemsAdd($checkoutId: ID!, $lineItems: Json!) {\n    checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\n      checkout\n    }\n  }\n`;\nconst CHECKOUT_REMOVE_MUTATION = gql`\n  mutation checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: Json!) {\n    checkoutLineItemsRemove(\n      checkoutId: $checkoutId\n      lineItemIds: $lineItemIds\n    ) {\n      checkout\n    }\n  }\n`;\nconst CHECKOUT_UPDATE_MUTATION = gql`\n  mutation checkoutLineItemsUpdate($checkoutId: ID!, $lineItems: Json!) {\n    checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n      checkout\n    }\n  }\n`;\nconst DELETE_ORDER = gql`\n  mutation deleteOrder($id: ID!) {\n    deleteOrder(id: $id) {\n      id\n    }\n  }\n`;\nconst Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\n\nfunction PendingOrders() {\n  const {\n    0: selectedOrderIndex,\n    1: setSelectedOrderIndex\n  } = useState(null);\n  const {\n    0: skip,\n    1: setSkip\n  } = useState(0);\n  const {\n    0: orderBy,\n    1: setOrderBy\n  } = useState('createdAt_ASC');\n  const {\n    0: firstQ,\n    1: setFirstQ\n  } = useState(100);\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: cartLoading,\n    1: setCartLoading\n  } = useState(false);\n  const {\n    0: processingOrder,\n    1: setProcessingOrder\n  } = useState(null);\n  const toast = useToast();\n  const {\n    data: {\n      me\n    }\n  } = useQuery(CURRENT_USER_QUERY);\n  const allOrders = useQuery(ORDER_QUERY, {\n    variables: {\n      skip,\n      first: firstQ,\n      orderBy,\n      processed: 'FALSE'\n    }\n  });\n  const allChannels = useQuery(CHANNELS_QUERY, {\n    variables: channelsQueryVars\n  });\n  const {\n    data: channelsData,\n    error: channelsError,\n    loading: channelsLoading\n  } = allChannels;\n  const pagination = useQuery(PAGINATION_QUERY);\n  const [deleteOrder] = useMutation(DELETE_ORDER, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [purchaseOrder, {\n    loading: purchaseOrderLoading,\n    error: purchaseOrderError\n  }] = useMutation(PURCHASE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [updateOrder, {\n    loading: updateOrderLoading\n  }] = useMutation(UPDATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [createCheckout] = useMutation(CREATE_CHECKOUT_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [checkoutLineItemsRemove] = useMutation(CHECKOUT_REMOVE_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [checkoutLineItemsUpdate] = useMutation(CHECKOUT_UPDATE_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [checkoutLineItemsAdd] = useMutation(CHECKOUT_ADD_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip,\n        first: firstQ,\n        orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  });\n  const [upsertMatch] = useMutation(UPSERT_MATCH_MUTATION);\n\n  async function _currentOrder(arg) {\n    setSelectedOrderIndex(arg);\n  }\n\n  async function overwrite(id) {\n    setCartLoading(true);\n    const upsertMatchRes = await upsertMatch({\n      variables: {\n        id\n      }\n    });\n    toast({\n      position: 'top-right',\n      title: 'Line items have been matched to cart items',\n      status: 'success',\n      duration: 2000,\n      isClosable: true\n    }); // setSelectedOrderIndex(null);\n\n    setCartLoading(false);\n  }\n\n  async function doPurchase(ids) {\n    const res = await purchaseOrder({\n      variables: {\n        ids\n      }\n    });\n  }\n\n  async function createCheck(input, orderID) {\n    const varCheck = await createCheckout({\n      variables: {\n        input\n      }\n    });\n    const newCheck = varCheck.data.createCheckout.checkout;\n    const res = await updateOrder({\n      variables: {\n        id: orderID,\n        mpCart: JSON.stringify(newCheck)\n      }\n    });\n  }\n\n  async function createCustomCheck(input, orderID, createCheckoutFunc, updateOrderFunc, url, key) {\n    const query = `\n    mutation checkoutCreate($input: CheckoutCreateInput!)\n    {\n      checkoutCreate(input: $input) {\n        userErrors {\n          message\n          field\n        }\n        checkout {\n          id\n          email\n          webUrl\n          subtotalPrice\n          totalTax\n          totalPrice\n          shippingAddress{\n            firstName\n            lastName\n            address1\n            address2\n            city\n            provinceCode\n            zip\n            country\n          }\n          lineItems (first:250) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                id\n                title\n                variant {\n                  id\n                  title\n                  image {\n                    src\n                  }\n                  price\n                }\n                quantity\n              }\n            }\n          }\n        }\n      }\n      }\n    `;\n    const variables = {\n      input\n    };\n    const checkout = await fetch(`https://${url}.myshopify.com/api/graphql`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query,\n        variables\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Storefront-Access-Token': key\n      }\n    }).then(response => response.json());\n    console.log(checkout);\n    const newCheck = checkout.data.checkoutCreate.checkout;\n    const res = await updateOrderFunc({\n      variables: {\n        id: selectedOrderIndex,\n        customCart: JSON.stringify(newCheck)\n      }\n    });\n  }\n\n  async function addCustomVariant(id, quantity, checkoutID, checkoutLineItemsAddFunc, updateOrderFunc, url, key) {\n    toast({\n      position: 'top-right',\n      title: 'custom checkout does exist',\n      status: 'success',\n      duration: 2000,\n      isClosable: true\n    });\n    const query = `\n    mutation checkoutLineItemsAdd($lineItems: [CheckoutLineItemInput!]!, $checkoutId: ID!) {\n      checkoutLineItemsAdd(lineItems: $lineItems, checkoutId: $checkoutId) {\n        userErrors {\n          message\n          field\n        }\n        checkout {\n          id\n          email\n          webUrl\n          subtotalPrice\n          totalTax\n          totalPrice\n          shippingAddress {\n            address1\n            address2\n            city\n            countryCodeV2\n            provinceCode\n            zip\n            firstName\n            lastName\n          }\n          lineItems (first:250) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                id\n                title\n                variant {\n                  id\n                  title\n                  image {\n                    src\n                  }\n                  price\n                }\n                quantity\n              }\n            }\n          }\n        }\n      }\n    }\n    `;\n    const variables = {\n      checkoutId: checkoutID,\n      lineItems: [{\n        variantId: id,\n        quantity\n      }]\n    };\n    const checkout = await fetch(`https://${url}.myshopify.com/api/graphql`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query,\n        variables\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Storefront-Access-Token': key\n      }\n    }).then(res => res.json());\n    console.log(checkout);\n    const newCheck = checkout.data.checkoutLineItemsAdd.checkout;\n    const res = await updateOrderFunc({\n      variables: {\n        id: selectedOrderIndex,\n        customCart: JSON.stringify(newCheck)\n      }\n    });\n  }\n\n  async function addVariant(id, quantity, checkoutID) {\n    toast({\n      position: 'top-right',\n      title: 'checkout does exist',\n      status: 'success',\n      duration: 2000,\n      isClosable: true\n    });\n    const varCheck = await checkoutLineItemsAdd({\n      variables: {\n        checkoutId: checkoutID,\n        lineItems: [{\n          variantId: id,\n          quantity\n        }]\n      }\n    });\n    const newCheck = varCheck.data.checkoutLineItemsAdd.checkout;\n    const res = await updateOrder({\n      variables: {\n        id: selectedOrderIndex,\n        mpCart: JSON.stringify(newCheck)\n      }\n    });\n  }\n\n  async function addZincItem(id, quantity, title, src, price, cart) {\n    const find = cart && cart.products && cart.products.length && cart.products.find(obj => obj.product_id === id);\n\n    if (cart && cart.products && cart.products.length && find !== undefined) {\n      console.log(true);\n      console.log(find);\n      const newQ = find.quantity + quantity;\n      find.quantity = newQ;\n      console.log(find);\n      const res = await updateOrder({\n        variables: {\n          id: selectedOrderIndex,\n          zincCart: JSON.stringify({\n            products: [find, ...cart.products.filter(a => a.product_id !== id)]\n          })\n        }\n      });\n    } else {\n      console.log(false);\n      const res = await updateOrder({\n        variables: {\n          id: selectedOrderIndex,\n          zincCart: JSON.stringify({\n            products: [{\n              product_id: id,\n              quantity,\n              title,\n              price,\n              src\n            }, ...(cart && cart.products && cart.products.length ? cart.products : [])]\n          })\n        }\n      });\n    }\n  }\n\n  async function removeMPItem(lineItemIds, checkoutID) {\n    const varCheck = await checkoutLineItemsRemove({\n      variables: {\n        checkoutId: checkoutID,\n        lineItemIds\n      }\n    });\n    const res = await updateOrder({\n      variables: {\n        id: selectedOrderIndex,\n        mpCart: JSON.stringify(varCheck.data.checkoutLineItemsRemove.checkout)\n      }\n    });\n  }\n\n  async function removeCustomItem(lineItemIds, checkoutID, key, url) {\n    const query = `\n    mutation checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: [ID!]!) {\n      checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\n        userErrors {\n          message\n          field\n        }\n        checkout {\n          id\n          email\n          webUrl\n          subtotalPrice\n          totalTax\n          totalPrice\n          shippingAddress {\n            address1\n            address2\n            city\n            countryCodeV2\n            provinceCode\n            zip\n            firstName\n            lastName\n          }\n          lineItems (first:250) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                id\n                title\n                variant {\n                  id\n                  title\n                  image {\n                    src\n                  }\n                  price\n                }\n                quantity\n              }\n            }\n          }\n        }\n      }\n    }\n    `;\n    const variables = {\n      checkoutId: checkoutID,\n      lineItemIds\n    };\n    const checkout = await fetch(`https://${url}.myshopify.com/api/graphql`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query,\n        variables\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Storefront-Access-Token': key\n      }\n    }).then(res => res.json());\n    const res = await updateOrder({\n      variables: {\n        id: selectedOrderIndex,\n        customCart: JSON.stringify(checkout.data.checkoutLineItemsRemove.checkout)\n      }\n    });\n  }\n\n  async function updateMPItem(lineItems, checkoutID) {\n    const varCheck = await checkoutLineItemsUpdate({\n      variables: {\n        checkoutId: checkoutID,\n        lineItems\n      }\n    });\n    const res = await updateOrder({\n      variables: {\n        id: selectedOrderIndex,\n        mpCart: JSON.stringify(varCheck.data.checkoutLineItemsUpdate.checkout)\n      }\n    });\n  }\n\n  async function updateCustomItem(lineItems, checkoutID, key, url) {\n    const query = `\n    mutation checkoutLineItemsUpdate ($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\n      checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\n        userErrors {\n          message\n          field\n        }\n        checkout {\n          id\n          email\n          webUrl\n          subtotalPrice\n          totalTax\n          totalPrice\n          shippingAddress {\n            address1\n            address2\n            city\n            countryCodeV2\n            provinceCode\n            zip\n            firstName\n            lastName\n          }\n          lineItems (first:250) {\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n            }\n            edges {\n              node {\n                id\n                title\n                variant {\n                  id\n                  title\n                  image {\n                    src\n                  }\n                  price\n                }\n                quantity\n              }\n            }\n          }\n        }\n      }\n    }\n    `;\n    const variables = {\n      checkoutId: checkoutID,\n      lineItems\n    };\n    const checkout = await fetch(`https://${url}.myshopify.com/api/graphql`, {\n      method: 'POST',\n      body: JSON.stringify({\n        query,\n        variables\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Shopify-Storefront-Access-Token': key\n      }\n    }).then(res => res.json());\n    const res = await updateOrder({\n      variables: {\n        id: selectedOrderIndex,\n        customCart: JSON.stringify(checkout.data.checkoutLineItemsUpdate.checkout)\n      }\n    });\n  }\n\n  function play() {\n    if (firstQ === 1) {\n      setFirstQ(100);\n      setOpen(false);\n      setSkip(0);\n    } else {\n      setFirstQ(1);\n      setOpen(true);\n    } // setSkip(0);\n\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Pending Orders\"))), __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, (() => {\n    if (allOrders.loading) return __jsx(React.Fragment, null, __jsx(Box, Layout, __jsx(Box, CardStyle, __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"50vh\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    })))), __jsx(Box, Layout, __jsx(Box, _extends({}, CardStyle, {\n      padding: 3\n    }), __jsx(Box, {\n      p: 2,\n      display: \"flex\",\n      borderLeft: \"3px solid #d9822b\",\n      borderRight: \"1px solid #E2E8F0\",\n      borderTop: \"1px solid #E2E8F0\",\n      borderBottom: \"1px solid #E2E8F0\"\n    }, __jsx(Icon, {\n      name: \"warning-2\",\n      color: \"#d9812a\",\n      mr: 2\n    }), __jsx(Heading, {\n      fontSize: \"sm\",\n      color: \"text\"\n    }, \"Please choose an order or a line item.\")))));\n    if (allOrders.error) return `Error! ${allOrders.error.message}`;\n    const {\n      orders\n    } = allOrders.data;\n    const theOrder = orders.filter(order => order.id === selectedOrderIndex)[0];\n    return __jsx(React.Fragment, null, __jsx(Box, Layout, __jsx(Box, CardStyle, __jsx(Box, {\n      display: \"flex\",\n      paddingX: \"1em\",\n      paddingY: \".8em\",\n      alignItems: \"center\"\n    }, (() => {\n      const count = pagination.data && pagination.data.ordersConnection ? pagination.data.ordersConnection.aggregate.count : 0;\n      return __jsx(React.Fragment, null, firstQ === 1 ? __jsx(Heading, {\n        fontSize: \"xs\",\n        letterSpacing: \"wider\",\n        textTransform: \"uppercase\",\n        color: \"gray.500\",\n        fontWeight: 400\n      }, \"Order \", skip + 1, \" of \", count) : __jsx(Heading, {\n        fontSize: \"xs\",\n        letterSpacing: \"wider\",\n        textTransform: \"uppercase\",\n        color: \"gray.500\",\n        fontWeight: 400\n      }, count, \" Order\", count !== 1 && 's'), __jsx(Box, {\n        marginLeft: \"auto\",\n        display: \"flex\"\n      }, __jsx(Button, {\n        borderRadius: 3,\n        marginX: 1,\n        px: 2,\n        height: 5,\n        onClick: () => setOrderBy(orderBy === 'createdAt_DESC' ? 'createdAt_ASC' : 'createdAt_DESC')\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        textTransform: \"uppercase\"\n      }, orderBy.split('_')[1])), __jsx(Button, {\n        bg: \"#d4eee2\",\n        color: \"#00783e\",\n        _hover: {\n          bg: '#bfe3d2'\n        },\n        borderRadius: 3,\n        marginX: 1,\n        px: 2,\n        height: 5,\n        onClick: () => play()\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        textTransform: \"uppercase\"\n      }, firstQ !== 1 ? 'Play' : 'Show All')), firstQ === 1 ? __jsx(Button, {\n        background: \"#fbe6a2\",\n        color: \"#7e6514\",\n        _hover: {\n          bg: '#f0d98d'\n        },\n        borderRadius: 3,\n        ml: 1,\n        px: 2,\n        height: 5,\n        onClick: () => setSkip(skip + 1) // disabled={firstQ !== 1 || skip + 1 === count}\n\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        marginRight: 2,\n        textTransform: \"uppercase\"\n      }, \"Skip\"), __jsx(Icon, {\n        size: 2,\n        name: \"arrow-right\"\n      })) : __jsx(Button, {\n        borderRadius: 3,\n        marginX: 1,\n        px: 2,\n        height: 5,\n        bg: \"#ddebf7\",\n        color: \"#1070ca\",\n        _hover: {\n          bg: '#c0d8ed'\n        },\n        disabled: firstQ !== 1 || skip + 1 === count,\n        isLoading: purchaseOrderLoading\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        textTransform: \"uppercase\"\n      }, \"Process\"))));\n    })()), orders.length ? orders.map(order => __jsx(Box, {\n      key: order.id\n    }, __jsx(Box, {\n      opacity: processingOrder === order.id && '0.2',\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\"\n    }, processingOrder === order.id && __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      width: \"100%\",\n      height: \"100%\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    })), __jsx(Box, {\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(Box, {\n      borderLeft: `3px solid ${selectedOrderIndex === order.id ? '#007489' : 'transparent'}`\n    }, __jsx(OrderListItem, _extends({}, order, {\n      updateIndex: arg => _currentOrder(arg),\n      open: open,\n      createCheckout: a => createCheck(a, order.id),\n      key: order.id,\n      index: order.id,\n      selectedOrderIndex: selectedOrderIndex,\n      disabled: !(!selectedOrderIndex || selectedOrderIndex === order.id),\n      buttons: __jsx(React.Fragment, null, __jsx(Button, {\n        \"aria-label\": \"delete order\",\n        height: \"1.3rem\",\n        minWidth: \"1.3rem\",\n        bg: \"transparent\",\n        color: \"#66788a\",\n        px: 0,\n        mx: 1,\n        onClick: async e => {\n          e.stopPropagation();\n          setProcessingOrder(order.id);\n          const res = await deleteOrder({\n            variables: {\n              id: order.id\n            }\n          });\n          setProcessingOrder(null);\n        }\n      }, __jsx(Icon, {\n        name: \"small-close\",\n        size: 4\n      })), __jsx(Button, {\n        \"aria-label\": \"show line-items\",\n        height: \"1.3rem\",\n        minWidth: \"1.3rem\",\n        bg: \"transparent\",\n        color: \"#66788a\",\n        px: 0,\n        mx: 1,\n        onClick: async e => {\n          e.stopPropagation();\n          setProcessingOrder(order.id);\n          setSelectedOrderIndex(null);\n\n          if (JSON.parse(order.customCart).lineItems.edges.length > 0) {\n            toast({\n              position: 'top-right',\n              title: 'custom called',\n              status: 'success',\n              duration: 2000,\n              isClosable: true\n            });\n            await placeCustomOrder(order.customCart, order.id, updateOrder, channelsData);\n          } else if (JSON.parse(order.mpCart).lineItems.edges.length > 0) {\n            await doPurchase([order.id]);\n          } else if (JSON.parse(order.zincCart).products.length > 0) {\n            toast({\n              position: 'top-right',\n              title: 'zinc called',\n              status: 'success',\n              duration: 2000,\n              isClosable: true\n            });\n            await placeZincOrder({\n              retailer: 'amazon',\n              products: JSON.parse(order.zincCart).products,\n              shipping_address: {\n                first_name: order.first_name,\n                last_name: order.last_name,\n                address_line1: order.streetAddress1,\n                address_line2: order.streetAddress2,\n                zip_code: order.zip,\n                city: order.city,\n                state: order.state,\n                country: 'US',\n                phone_number: '281-337-9862'\n              },\n              addax: true,\n              is_gift: true,\n              gift_message: `Here is your package, ${order.first_name}! Enjoy!`,\n              shipping: {\n                order_by: 'price',\n                max_days: 5,\n                max_price: 1000\n              },\n              webhooks: {\n                request_succeeded: 'https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c',\n                request_failed: 'https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c',\n                tracking_obtained: 'https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c'\n              },\n              client_notes: {\n                shopify_order_id: order.orderId,\n                os_order_id: order.id\n              }\n            }, me.zincToken, updateOrder);\n          } else {\n            toast({\n              position: 'top-right',\n              title: 'Not called',\n              status: 'success',\n              duration: 2000,\n              isClosable: true\n            });\n          }\n\n          setProcessingOrder(null);\n        }\n      }, __jsx(Icon, {\n        name: \"check\",\n        size: 3\n      })))\n    }))))))) : __jsx(Box, {\n      backgroundColor: \"gray.100\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\"\n    }, __jsx(Heading, {\n      margin: \"1em\",\n      fontSize: \"xl\",\n      fontWeight: 600,\n      color: \"text\"\n    }, \"Your pending orders will appear here.\")))), __jsx(Box, Layout, selectedOrderIndex ? __jsx(Box, null, __jsx(Box, _extends({}, CardStyle, {\n      padding: 15,\n      opacity: cartLoading && '0.2',\n      width: \"100%\",\n      height: \"100%\"\n    }), cartLoading && __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      margin: \"auto\"\n    }, __jsx(Box, {\n      position: \"fixed\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    }))), __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      fontWeight: 600,\n      background: \"white\"\n    }, __jsx(React.Fragment, null, __jsx(Heading, {\n      fontSize: \"md\",\n      color: \"text\",\n      mb: 1\n    }, theOrder.orderName), __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginLeft: 4\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      fontWeight: 500,\n      marginX: 2,\n      color: \"#7B8B9A\",\n      cursor: \"pointer\",\n      onClick: () => {\n        // setSelectedLineIndex([]);\n        setSelectedOrderIndex(null);\n      }\n    }, \"Empty\"), __jsx(Button, {\n      borderRadius: 3,\n      marginX: 1,\n      px: 2,\n      height: 5,\n      bg: \"#ddebf7\",\n      color: \"#1070ca\",\n      _hover: {\n        bg: '#c0d8ed'\n      },\n      onClick: () => overwrite(theOrder.id),\n      disabled: theOrder.mpCart && theOrder.mpCart.lineItems && theOrder.mpCart.lineItems.edges.length === 0 || !theOrder.mpCart\n    }, __jsx(Heading, {\n      fontSize: \"xs\",\n      fontWeight: 700,\n      textTransform: \"uppercase\"\n    }, \"Match\"))))), __jsx(Box, null, __jsx(Box, {\n      display: \"flex\"\n    }, __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      marginRight: 1,\n      lineHeight: \"short\"\n    }, theOrder.first_name), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.last_name)), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.streetAddress1), theOrder.streetAddress2 && __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.streetAddress2), __jsx(Box, {\n      display: \"flex\"\n    }, __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      marginRight: 1,\n      lineHeight: \"short\"\n    }, theOrder.city), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      marginRight: 2,\n      lineHeight: \"short\"\n    }, theOrder.state), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.zip))), __jsx(Box, {\n      paddingTop: 2\n    }, __jsx(Box, {\n      marginLeft: \"-3px\",\n      background: \"#F7F9FD\",\n      paddingY: \".7em\",\n      paddingX: \"1em\",\n      border: \"1px solid #edf0f2\"\n    }, __jsx(Box, {\n      marginBottom: 2\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      fontWeight: 500,\n      color: \"#084B8A\"\n    }, \"Line Items\")), theOrder.lineItems.map(a => __jsx(OrderLine, {\n      key: a.id,\n      item: a.node ? a.node : a\n    })))), channelsData.channels.filter(channel => channel.type === 'MARKETPLACE').length > 0 && __jsx(MPCart, {\n      cartName: \"Marketplace\",\n      cart: JSON.parse(theOrder.mpCart),\n      removeItem: a => removeMPItem(a, JSON.parse(theOrder.mpCart).id),\n      checkoutLineItemsUpdate: a => updateMPItem(a, JSON.parse(theOrder.mpCart).id),\n      loading: updateOrderLoading\n    }), channelsData.channels.filter(channel => channel.type === 'SHOPIFY').length > 0 && __jsx(MPCart, {\n      cartName: \"BN\",\n      background: \"#F1FBFC\",\n      color: \"#007489\",\n      cart: JSON.parse(theOrder.customCart),\n      removeItem: a => removeCustomItem(a, JSON.parse(theOrder.customCart).id, channelsData.channels.filter(channel => channel.type === 'SHOPIFY')[0].settings.key, channelsData.channels.filter(channel => channel.type === 'SHOPIFY')[0].settings.shopURL),\n      checkoutLineItemsUpdate: a => updateCustomItem(a, JSON.parse(theOrder.customCart).id, channelsData.channels.filter(channel => channel.type === 'SHOPIFY')[0].settings.key, channelsData.channels.filter(channel => channel.type === 'SHOPIFY')[0].settings.shopURL),\n      loading: updateOrderLoading\n    }), channelsData.channels.filter(channel => channel.type === 'ZINC').length > 0 && __jsx(ZincCart, {\n      cart: JSON.parse(theOrder.zincCart),\n      removeItem: async productID => {\n        const res = await updateOrder({\n          variables: {\n            id: selectedOrderIndex,\n            zincCart: JSON.stringify({\n              products: JSON.parse(theOrder.zincCart).products.filter(a => a.product_id !== productID)\n            })\n          }\n        });\n      },\n      checkoutLineItemsUpdate: async (productID, quantity) => {\n        if (quantity === 0) {\n          const res = await updateOrder({\n            variables: {\n              id: selectedOrderIndex,\n              zincCart: JSON.stringify({\n                products: JSON.parse(theOrder.zincCart).products.filter(a => a.product_id !== productID)\n              })\n            }\n          });\n        } else {\n          const find = JSON.parse(theOrder.zincCart).products.find(obj => obj.product_id === productID);\n          const newQ = quantity;\n          find.quantity = newQ;\n          const res = await updateOrder({\n            variables: {\n              id: selectedOrderIndex,\n              zincCart: JSON.stringify({\n                products: [find, ...JSON.parse(theOrder.zincCart).products.filter(a => a.product_id !== productID)]\n              })\n            }\n          });\n        }\n      },\n      loading: updateOrderLoading\n    }))) : __jsx(Box, _extends({}, CardStyle, {\n      padding: 3\n    }), __jsx(Box, {\n      p: 2,\n      display: \"flex\",\n      borderLeft: \"3px solid #d9822b\",\n      borderRight: \"1px solid #E2E8F0\",\n      borderTop: \"1px solid #E2E8F0\",\n      borderBottom: \"1px solid #E2E8F0\"\n    }, __jsx(Icon, {\n      name: \"warning-2\",\n      color: \"#d9812a\",\n      mr: 2\n    }), __jsx(Heading, {\n      fontSize: \"sm\",\n      color: \"text\"\n    }, \"Please choose an order or a line item.\"))), __jsx(Find, {\n      headerSize: 600,\n      atcDisabled: !theOrder,\n      addMPItem: (a, b) => {\n        if (theOrder.mpCart && JSON.parse(theOrder.mpCart).id) {\n          addVariant(a, b, JSON.parse(theOrder.mpCart).id);\n        } else {\n          toast({\n            position: 'top-right',\n            title: 'checkout does not exist',\n            status: 'success',\n            duration: 2000,\n            isClosable: true\n          });\n          createCheck({\n            shippingAddress: {\n              address1: theOrder.streetAddress1,\n              address2: theOrder.streetAddress2 && theOrder.streetAddress2,\n              city: theOrder.city,\n              province: theOrder.state,\n              country: 'US',\n              zip: theOrder.zip,\n              firstName: theOrder.first_name,\n              lastName: theOrder.last_name\n            },\n            lineItems: [{\n              variantId: a,\n              quantity: b\n            }]\n          }, theOrder.id);\n        }\n      },\n      addCustomItem: (a, b, url, key) => {\n        if (theOrder.customCart && JSON.parse(theOrder.customCart).id) {\n          addCustomVariant(a, b, JSON.parse(theOrder.customCart).id, checkoutLineItemsAdd, updateOrder, url, key);\n        } else {\n          toast({\n            position: 'top-right',\n            title: 'checkout does not exist',\n            status: 'success',\n            duration: 2000,\n            isClosable: true\n          });\n          createCustomCheck({\n            shippingAddress: {\n              address1: theOrder.streetAddress1,\n              address2: theOrder.streetAddress2 && theOrder.streetAddress2,\n              city: theOrder.city,\n              province: theOrder.state,\n              country: 'US',\n              zip: theOrder.zip,\n              firstName: theOrder.first_name,\n              lastName: theOrder.last_name\n            },\n            lineItems: [{\n              variantId: a,\n              quantity: b\n            }],\n            email: 'junaidkabani@windstream.net'\n          }, theOrder.id, createCheckout, updateOrder, url, key);\n        }\n      },\n      addZincItem: (a, b, c, d, e) => addZincItem(a, b, c, d, e, JSON.parse(theOrder.zincCart))\n    })));\n  })()));\n}\n\nexport default PendingOrders;","map":null,"metadata":{},"sourceType":"module"}