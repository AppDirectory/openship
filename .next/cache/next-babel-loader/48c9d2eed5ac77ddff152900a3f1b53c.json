{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport Link from 'next/link';\nimport { Box, Heading, Spinner, Drawer, DrawerOverlay, DrawerContent, Button, DrawerBody, InputGroup, InputLeftElement, Icon, Input, useDisclosure } from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport ShopSelect from '../../common/ShopSelect';\nimport OrderListItem from '../../common/orderListItem/OrderListItem';\nimport Reshipment from '../../common/Reshipment';\nimport { OrderDetailsComp } from '../../common/OrderDetails';\nimport { CardStyle } from '../../common/DefaultStyles';\nexport const SHOP_ORDERS_QUERY = gql`\n  query shopOrders(\n    $domain: String!\n    $first: Int\n    $after: String\n    $before: String\n    $last: Int\n    $query: String\n  ) {\n    shopOrders(\n      domain: $domain\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      query: $query\n    ) {\n      pageInfo\n      edges\n    }\n  }\n`;\nexport default function CompletedOrderList({\n  shops\n}) {\n  const {\n    0: client,\n    1: setClient\n  } = useState(shops.length && shops[0].domain.split('.')[0]);\n  const {\n    0: afterCursor,\n    1: setAfterCursor\n  } = useState(null);\n  const {\n    0: beforeCursor,\n    1: setBeforeCursor\n  } = useState(null);\n  const {\n    0: query,\n    1: setQuery\n  } = useState('');\n  const {\n    0: first,\n    1: setFirst\n  } = useState(10);\n  const {\n    0: last,\n    1: setLast\n  } = useState(null);\n  const {\n    0: selectedOrder,\n    1: setSelectedOrder\n  } = useState(null);\n  const {\n    0: selectedOrder2,\n    1: setSelectedOrder2\n  } = useState(null);\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = useDisclosure();\n  const {\n    isOpen: drawerIsOpen,\n    onOpen: drawerOnOpen,\n    onClose: drawerOnClose\n  } = useDisclosure();\n  const {\n    data,\n    error,\n    loading\n  } = useQuery(SHOP_ORDERS_QUERY, {\n    variables: {\n      domain: `${client}.myshopify.com`,\n      after: afterCursor,\n      before: beforeCursor,\n      first,\n      last,\n      query\n    }\n  });\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function updateDialog(arg) {\n    onOpen();\n    setSelectedOrder(arg);\n  }\n\n  function updateDrawer(arg) {\n    drawerOnOpen();\n    setSelectedOrder2(arg);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Completed Orders\"))), selectedOrder2 && __jsx(Drawer, {\n    size: \"md\",\n    isOpen: drawerIsOpen,\n    placement: \"right\",\n    onClose: drawerOnClose\n  }, __jsx(DrawerOverlay, null), __jsx(DrawerContent, null, __jsx(DrawerBody, {\n    bg: \"#f9f9fb\",\n    p: 0\n  }, __jsx(Box, null, __jsx(OrderDetailsComp, _extends({}, data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder2)[0].node, {\n    store: client,\n    backgroundColor: \"white\",\n    onOpen: () => updateDialog(selectedOrder2)\n  })))))), client ? __jsx(Box, CardStyle, __jsx(Box, {\n    display: \"block\",\n    padding: \"1em\"\n  }, __jsx(Box, {\n    display: \"flex\"\n  }, __jsx(InputGroup, {\n    width: \"100%\",\n    borderColor: \"gray.300\"\n  }, __jsx(InputLeftElement, {\n    children: __jsx(Icon, {\n      name: \"search\",\n      color: \"gray.300\"\n    })\n  }), __jsx(Input, {\n    value: query,\n    onChange: e => setQuery(e.target.value),\n    type: \"phone\",\n    placeholder: \"Search\"\n  }))), __jsx(Box, null, __jsx(ShopSelect, {\n    client: client,\n    shops: shops,\n    updateClient: updateClient\n  }))), (() => {\n    if (loading) return __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    }));\n    if (error || !data.shopOrders) return __jsx(\"div\", null, error);\n    return __jsx(React.Fragment, null, __jsx(Box, {\n      width: \"100%\"\n    }, selectedOrder && __jsx(Reshipment, {\n      isOpen: isOpen,\n      onClose: onClose,\n      order: data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder).length > 0 && data.shopOrders.edges.filter(order => order.node.id.split('/').pop() === selectedOrder)[0].node,\n      shop: client\n    }), data.shopOrders.edges.map((order, index) => __jsx(Box, {\n      borderTop: \"0.1rem solid #dfe3e8\"\n    }, __jsx(OrderListItem, {\n      key: index,\n      disabled: true,\n      client: client,\n      orderName: order.node.name,\n      first_name: order.node.shippingAddress.name.split(' ')[0],\n      last_name: order.node.shippingAddress.name.split(' ').pop(),\n      streetAddress1: order.node.shippingAddress.address1,\n      streetAddress2: order.node.shippingAddress.address2,\n      city: order.node.shippingAddress.city,\n      state: order.node.shippingAddress.province,\n      zip: order.node.shippingAddress.zip,\n      shopName: client,\n      lineItems: order.node.lineItems.edges,\n      createAt: order.node.processedAt,\n      note: order.node.note && order.node.note,\n      email: order.node.email // errorText={order.node.note && order.node.note}\n      // processText={order.node.note && order.node.note}\n      ,\n      orderId: order.node.id.split('/').pop(),\n      buttons: __jsx(React.Fragment, null, __jsx(Button, {\n        background: \"#DDEBF7\",\n        borderRadius: 3,\n        marginRight: 1,\n        px: 2,\n        height: 5,\n        onClick: () => updateDialog(order.node.id.split('/').pop())\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        color: \"#1070CA\",\n        marginRight: 2\n      }, \"RESHIP\"), __jsx(Icon, {\n        size: 3,\n        color: \"#1070CA\",\n        name: \"repeat\"\n      })), __jsx(Link, {\n        href: {\n          pathname: '/completed'\n        },\n        as: `/order?store=${client}&name=${order.node.name}`\n      }, __jsx(Button, {\n        onClick: () => updateDrawer(order.node.id.split('/').pop()),\n        bg: \"transparent\",\n        color: \"#66788a\",\n        \"aria-label\": \"show order\",\n        height: \"1.3rem\",\n        minWidth: \"1.3rem\",\n        px: 0,\n        ml: 1\n      }, __jsx(Icon, {\n        name: \"arrow-forward\",\n        size: \"18px\"\n      }))))\n    })))));\n  })()) : __jsx(Box, {\n    background: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    borderRadius: 3\n  }, __jsx(Heading, {\n    margin: \"1em\",\n    size: 600\n  }, \"Your orders will appear here after you add a shop.\")));\n}\nCompletedOrderList.propTypes = {\n  shops: PropTypes.string\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/completed/completedOrderList/CompletedOrderList.js"],"names":["React","useState","gql","Link","Box","Heading","Spinner","Drawer","DrawerOverlay","DrawerContent","Button","DrawerBody","InputGroup","InputLeftElement","Icon","Input","useDisclosure","PropTypes","useQuery","ShopSelect","OrderListItem","Reshipment","OrderDetailsComp","CardStyle","SHOP_ORDERS_QUERY","CompletedOrderList","shops","client","setClient","length","domain","split","afterCursor","setAfterCursor","beforeCursor","setBeforeCursor","query","setQuery","first","setFirst","last","setLast","selectedOrder","setSelectedOrder","selectedOrder2","setSelectedOrder2","isOpen","onOpen","onClose","drawerIsOpen","drawerOnOpen","drawerOnClose","data","error","loading","variables","after","before","updateClient","arg","onPrevious","onNext","updateDialog","updateDrawer","shopOrders","edges","filter","order","node","id","pop","e","target","value","map","index","name","shippingAddress","address1","address2","city","province","zip","lineItems","processedAt","note","email","pathname","propTypes","string"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport Link from 'next/link';\nimport {\n  Box,\n  Heading,\n  Spinner,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  Button,\n  DrawerBody,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n  Input,\n  useDisclosure,\n} from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport ShopSelect from '../../common/ShopSelect';\nimport OrderListItem from '../../common/orderListItem/OrderListItem';\nimport Reshipment from '../../common/Reshipment';\nimport { OrderDetailsComp } from '../../common/OrderDetails';\nimport { CardStyle } from '../../common/DefaultStyles';\n\nexport const SHOP_ORDERS_QUERY = gql`\n  query shopOrders(\n    $domain: String!\n    $first: Int\n    $after: String\n    $before: String\n    $last: Int\n    $query: String\n  ) {\n    shopOrders(\n      domain: $domain\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      query: $query\n    ) {\n      pageInfo\n      edges\n    }\n  }\n`;\n\nexport default function CompletedOrderList({ shops }) {\n  const [client, setClient] = useState(\n    shops.length && shops[0].domain.split('.')[0]\n  );\n  const [afterCursor, setAfterCursor] = useState(null);\n  const [beforeCursor, setBeforeCursor] = useState(null);\n  const [query, setQuery] = useState('');\n  const [first, setFirst] = useState(10);\n  const [last, setLast] = useState(null);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [selectedOrder2, setSelectedOrder2] = useState(null);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    isOpen: drawerIsOpen,\n    onOpen: drawerOnOpen,\n    onClose: drawerOnClose,\n  } = useDisclosure();\n\n  const { data, error, loading } = useQuery(SHOP_ORDERS_QUERY, {\n    variables: {\n      domain: `${client}.myshopify.com`,\n      after: afterCursor,\n      before: beforeCursor,\n      first,\n      last,\n      query,\n    },\n  });\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function updateDialog(arg) {\n    onOpen();\n    setSelectedOrder(arg);\n  }\n\n  function updateDrawer(arg) {\n    drawerOnOpen();\n    setSelectedOrder2(arg);\n  }\n  return (\n    <>\n      <Box display=\"flex\" py={4}>\n        <Box flex={1} alignItems=\"center\" display=\"flex\">\n          <Heading fontSize=\"2xl\" color=\"text\" fontWeight={500}>\n            Completed Orders\n          </Heading>\n        </Box>\n      </Box>\n      {selectedOrder2 && (\n        <Drawer\n          size=\"md\"\n          isOpen={drawerIsOpen}\n          placement=\"right\"\n          onClose={drawerOnClose}\n        >\n          <DrawerOverlay />\n          <DrawerContent>\n            {/* <DrawerCloseButton /> */}\n            <DrawerBody bg=\"#f9f9fb\" p={0}>\n              <Box>\n                <OrderDetailsComp\n                  {...data.shopOrders.edges.filter(\n                    order => order.node.id.split('/').pop() === selectedOrder2\n                  )[0].node}\n                  store={client}\n                  backgroundColor=\"white\"\n                  onOpen={() => updateDialog(selectedOrder2)}\n                />\n              </Box>\n            </DrawerBody>\n          </DrawerContent>\n        </Drawer>\n      )}\n      {client ? (\n        <Box {...CardStyle}>\n          <Box display=\"block\" padding=\"1em\">\n            <Box display=\"flex\">\n              <InputGroup width=\"100%\" borderColor=\"gray.300\">\n                <InputLeftElement\n                  children={<Icon name=\"search\" color=\"gray.300\" />}\n                />\n                <Input\n                  value={query}\n                  onChange={e => setQuery(e.target.value)}\n                  type=\"phone\"\n                  placeholder=\"Search\"\n                />\n              </InputGroup>\n            </Box>\n            <Box>\n              <ShopSelect\n                client={client}\n                shops={shops}\n                updateClient={updateClient}\n              />\n            </Box>\n          </Box>\n\n          {(() => {\n            if (loading)\n              return (\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  height=\"100vh\"\n                >\n                  <Spinner\n                    thickness=\"4px\"\n                    speed=\"0.65s\"\n                    emptyColor=\"gray.200\"\n                    color=\"blue.500\"\n                    size=\"xl\"\n                  />\n                </Box>\n              );\n            if (error || !data.shopOrders) return <div>{error}</div>;\n            return (\n              <>\n                <Box width=\"100%\">\n                  {selectedOrder && (\n                    <Reshipment\n                      isOpen={isOpen}\n                      onClose={onClose}\n                      order={\n                        data.shopOrders.edges.filter(\n                          order =>\n                            order.node.id.split('/').pop() === selectedOrder\n                        ).length > 0 &&\n                        data.shopOrders.edges.filter(\n                          order =>\n                            order.node.id.split('/').pop() === selectedOrder\n                        )[0].node\n                      }\n                      shop={client}\n                    />\n                  )}\n                  {data.shopOrders.edges.map((order, index) => (\n                    <Box borderTop=\"0.1rem solid #dfe3e8\">\n                      <OrderListItem\n                        key={index}\n                        disabled\n                        client={client}\n                        orderName={order.node.name}\n                        first_name={\n                          order.node.shippingAddress.name.split(' ')[0]\n                        }\n                        last_name={order.node.shippingAddress.name\n                          .split(' ')\n                          .pop()}\n                        streetAddress1={order.node.shippingAddress.address1}\n                        streetAddress2={order.node.shippingAddress.address2}\n                        city={order.node.shippingAddress.city}\n                        state={order.node.shippingAddress.province}\n                        zip={order.node.shippingAddress.zip}\n                        shopName={client}\n                        lineItems={order.node.lineItems.edges}\n                        createAt={order.node.processedAt}\n                        note={order.node.note && order.node.note}\n                        email={order.node.email}\n                        // errorText={order.node.note && order.node.note}\n                        // processText={order.node.note && order.node.note}\n                        orderId={order.node.id.split('/').pop()}\n                        buttons={\n                          <>\n                            <Button\n                              background=\"#DDEBF7\"\n                              borderRadius={3}\n                              marginRight={1}\n                              px={2}\n                              height={5}\n                              onClick={() =>\n                                updateDialog(order.node.id.split('/').pop())\n                              }\n                            >\n                              <Heading\n                                fontSize=\"xs\"\n                                fontWeight={700}\n                                color=\"#1070CA\"\n                                marginRight={2}\n                              >\n                                RESHIP\n                              </Heading>\n                              <Icon size={3} color=\"#1070CA\" name=\"repeat\" />\n                            </Button>\n                            <Link\n                              href={{\n                                pathname: '/completed',\n                              }}\n                              as={`/order?store=${client}&name=${\n                                order.node.name\n                              }`}\n                            >\n                              <Button\n                                onClick={() =>\n                                  updateDrawer(order.node.id.split('/').pop())\n                                }\n                                bg=\"transparent\"\n                                color=\"#66788a\"\n                                aria-label=\"show order\"\n                                height=\"1.3rem\"\n                                minWidth=\"1.3rem\"\n                                px={0}\n                                ml={1}\n                              >\n                                <Icon name=\"arrow-forward\" size=\"18px\" />\n                              </Button>\n                            </Link>\n                          </>\n                        }\n                      />\n                    </Box>\n                  ))}\n                </Box>\n              </>\n            );\n          })()}\n        </Box>\n      ) : (\n        <Box\n          background=\"white\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          borderRadius={3}\n        >\n          <Heading margin=\"1em\" size={600}>\n            Your orders will appear here after you add a shop.\n          </Heading>\n        </Box>\n      )}\n    </>\n  );\n}\n\nCompletedOrderList.propTypes = {\n  shops: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}