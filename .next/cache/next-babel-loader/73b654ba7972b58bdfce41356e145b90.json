{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React, { Component } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { Pane, Dialog, Heading, TextInput, Text, Icon, Switch } from 'evergreen-ui';\nimport Composer from 'react-composer';\nimport ShopList, { shopsQuery, shopsQueryVars } from '../components/shops/ShopList';\nconst CREATE_SHOP_MUTATION = gql`\n  mutation CREATE_SHOP_MUTATION(\n    $domain: String!\n    $accessToken: String!\n    $name: String!\n  ) {\n    upsertShop(accessToken: $accessToken, domain: $domain, name: $name) {\n      id\n    }\n  }\n`;\nconst WEBHOOK_MUTATION = gql`\n  mutation createWebhook($domain: String!, $accessToken: String!) {\n    createWebhook(domain: $domain, accessToken: $accessToken) {\n      userErrors\n      webhookSubscription\n    }\n  }\n`;\nexport default class Shops extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      open: this.props.shop && true,\n      name: this.props.shop && this.props.shop.split(\".\")[0],\n      checked: false\n    });\n\n    _defineProperty(this, \"handleClick\", async (upsertShop, createWebhook) => {\n      const data1 = await upsertShop();\n\n      if (this.state.checked) {\n        const data2 = await createWebhook();\n      }\n\n      this.setState({\n        open: false\n      });\n    });\n  }\n\n  static async getInitialProps({\n    query: {\n      shop,\n      accessToken\n    }\n  }) {\n    return {\n      shop,\n      accessToken\n    };\n  }\n\n  render() {\n    const {\n      shop,\n      accessToken\n    } = this.props;\n    const {\n      open,\n      name,\n      checked\n    } = this.state;\n    return React.createElement(React.Fragment, null, React.createElement(Composer, {\n      components: [React.createElement(Mutation, {\n        mutation: CREATE_SHOP_MUTATION,\n        variables: {\n          domain: shop,\n          accessToken,\n          name\n        },\n        refetchQueries: [{\n          query: shopsQuery,\n          variables: shopsQueryVars\n        }]\n      }), React.createElement(Mutation, {\n        mutation: WEBHOOK_MUTATION,\n        variables: {\n          domain: shop,\n          accessToken\n        }\n      })]\n    }, ([upsertShop, createWebhook]) => React.createElement(React.Fragment, null, React.createElement(Pane, null, React.createElement(Dialog, {\n      width: \"440px\",\n      isShown: open,\n      title: \"Add shop to Openship\" // hasHeader={false}\n      // hasFooter={false}\n      ,\n      confirmLabel: \"Confirm\",\n      intent: \"success\",\n      onConfirm: () => this.handleClick(upsertShop, createWebhook)\n    }, React.createElement(Pane, null, React.createElement(Pane, {\n      position: \"relative\",\n      display: \"inline-flex\",\n      height: 32,\n      width: \"100%\",\n      marginBottom: 3\n    }, React.createElement(Pane, {\n      width: 32,\n      height: 32,\n      pointerEvents: \"none\",\n      position: \"absolute\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }, React.createElement(Icon, {\n      icon: \"shop\",\n      color: \"#8b949c\",\n      size: 12,\n      zIndex: 3\n    })), React.createElement(TextInput, {\n      className: \"clean-input\",\n      paddingLeft: 32 // name=\"Shop Name\"\n      ,\n      width: \"100%\",\n      value: name,\n      fontSize: 15,\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      marginBottom: 15 // placeholder=\"Shop Name\"\n      ,\n      backgroundColor: \"#F5F6F7 !important\"\n    })), React.createElement(Heading, {\n      lineHeight: \"10px\",\n      fontSize: \"11px\",\n      size: 100,\n      padding: 3,\n      marginBottom: 10\n    }, \"Shop Name\"), React.createElement(Pane, {\n      display: \"flex\",\n      alignItems: \"center\"\n    }, React.createElement(Text, {\n      paddingX: 3,\n      paddingY: 2,\n      fontSize: 15\n    }, shop)), React.createElement(Heading, {\n      lineHeight: \"10px\",\n      fontSize: \"11px\",\n      size: 100,\n      padding: 3,\n      marginBottom: 15\n    }, \"Shopify URL\")), React.createElement(Pane, {\n      display: \"flex\",\n      alignItems: \"center\"\n    }, React.createElement(Pane, {\n      paddingRight: 15\n    }, React.createElement(Heading, {\n      size: 500,\n      fontSize: \"15px\",\n      fontWeight: 500\n    }, \"Push orders to Openship\"), React.createElement(Text, {\n      size: 300\n    }, \"Orders will be pushed to the pending tab to be fulfilled\")), React.createElement(Switch, {\n      marginLeft: \"auto\",\n      checked: checked,\n      onChange: e => this.setState({\n        checked: e.target.checked\n      })\n    })))), React.createElement(ShopList, null))));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}