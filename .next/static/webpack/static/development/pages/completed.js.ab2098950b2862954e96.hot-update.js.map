{"version":3,"file":"static/webpack/static/development/pages/completed.js.ab2098950b2862954e96.hot-update.js","sources":["webpack:///./components/common/orderListItem/OrderListItem.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Box, Heading, Text, Button, Icon } from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport MPCart from '../../pending/Cart/MPCart';\nimport ZincCart from '../../pending/Cart/ZincCart';\nimport OrderLine from './OrderLine';\nimport { CHANNELS_QUERY, channelsQueryVars } from '../../layout/Page';\n\nconst priceString = (price, quantity) => {\n  const total = Math.round(price * quantity * 100).toString();\n  return `${total.substring(0, total.length - 2)}.${total.substring(\n    total.length - 2\n  )}`;\n};\n\nexport default function OrderListItem(props) {\n  const [open, setOpen] = useState();\n\n  const {\n    data: { channels },\n    error,\n    loading,\n  } = useQuery(CHANNELS_QUERY, {\n    variables: channelsQueryVars,\n  });\n\n  useEffect(() => {\n    setOpen(props.open);\n  }, [props.open]);\n\n  async function onCheckAllChange(e, updateIndexFunc) {\n    updateIndexFunc(e ? props.index : null);\n  }\n\n  function handleToggleClick(e) {\n    e.stopPropagation();\n    setOpen(prevOpen => !prevOpen);\n  }\n\n  function parseMP(name, string, checkout) {\n    const parse = JSON.parse(string);\n    return (\n      parse.lineItems && (\n        <MPCart cart={parse} checkout={checkout} cartName={name} />\n      )\n    );\n  }\n  function parseZinc(string, checkout) {\n    const parse = JSON.parse(string);\n    return parse.products && <ZincCart cart={parse} checkout={checkout} />;\n  }\n\n  const {\n    id,\n    orderId,\n    orderName,\n    email,\n    first_name,\n    last_name,\n    streetAddress1,\n    streetAddress2,\n    city,\n    state,\n    zip,\n    shopName,\n    phone,\n    lineItems,\n    currency,\n    totalPrice,\n    subTotalPrice,\n    totalDiscount,\n    totalTax,\n    createAt,\n    mpCheckout,\n    mpCart,\n    zincCheckout,\n    zincCart,\n    customCheckout,\n    customCart,\n    note,\n    disabled,\n    buttons,\n    selectedOrderIndex,\n    updateIndex,\n    createCheckout,\n  } = props;\n  return (\n    <Box>\n      <Box\n        display=\"flex\"\n        paddingX=\"1em\"\n        paddingY=\".7em\"\n        onClick={\n          !disabled\n            ? () =>\n                onCheckAllChange(\n                  !selectedOrderIndex,\n                  updateIndex,\n                  // createCheckout,\n                  mpCart\n                )\n            : undefined\n        }\n        pointerEvents={\n          !selectedOrderIndex || selectedOrderIndex === id ? null : 'none'\n        }\n        className={\n          !selectedOrderIndex || selectedOrderIndex === id ? 'hover' : null\n        }\n        cursor={\n          !selectedOrderIndex || selectedOrderIndex === id ? 'pointer' : null\n        }\n      >\n        <Box>\n          <Box display=\"flex\" flexWrap=\"wrap\" alignItems=\"center\" mb={1}>\n            <Heading fontSize=\"sm\" marginRight={3} color=\"text\">\n              <a\n                href={`https://${\n                  shopName.split('.')[0]\n                }.myshopify.com/admin/orders/${orderId}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                {orderName}\n              </a>\n            </Heading>\n            <Heading\n              fontSize=\"xs\"\n              fontWeight={500}\n              letterSpacing=\"wide\"\n              textTransform=\"uppercase\"\n              color=\"gray.500\"\n              mr={3}\n            >\n              {shopName.split('.')[0]}\n            </Heading>\n\n            <Heading fontSize=\"xs\" color=\"gray.500\">\n              {Intl.DateTimeFormat('en-US').format(Date.parse(createAt))}\n            </Heading>\n          </Box>\n          <Box as=\"p\" fontSize=\"sm\" color=\"#425A70\" lineHeight=\"short\">\n            {first_name} {last_name}\n            <br />\n            {streetAddress1} {streetAddress2}\n            <br />\n            {city}\n            {', '}\n            {state} {zip}\n          </Box>\n        </Box>\n        <Box\n          display=\"flex\"\n          marginLeft=\"auto\"\n          justifyContent=\"center\"\n          // alignItems=\"center\"\n        >\n          {buttons}\n\n          <Button\n            bg={open && '#EDF2F7'}\n            onClick={handleToggleClick}\n            color=\"#66788a\"\n            aria-label=\"show line-items\"\n            height=\"1.3rem\"\n            minWidth=\"1.3rem\"\n            px={0}\n            ml={1}\n          >\n            <Icon name=\"chevron-down\" size=\"22px\" />\n          </Button>\n        </Box>\n      </Box>\n      {open && (\n        <>\n          <Box\n            marginLeft=\"-3px\"\n            background=\"#F7F9FD\"\n            border=\"muted\"\n            paddingY=\".7em\"\n            paddingX=\"1em\"\n          >\n            <Box marginBottom={2}>\n              <Text fontSize=\"sm\" fontWeight={500} color=\"#084B8A\">\n                Line Items\n              </Text>\n            </Box>\n            {lineItems.map(a => (\n              <OrderLine key={a.id} item={a.node ? a.node : a} />\n            ))}\n          </Box>\n\n          {channels.filter(channel => channel.type === 'MARKETPLACE').length >\n            0 &&\n            mpCart &&\n            JSON.parse(mpCart).lineItems &&\n            JSON.parse(mpCart).lineItems.edges.length > 0 && (\n              <MPCart cart={JSON.parse(mpCart)} cartName=\"Marketplace\" />\n            )}\n          {channels.filter(channel => channel.type === 'SHOPIFY').length > 0 &&\n            customCart &&\n            JSON.parse(customCart).lineItems &&\n            JSON.parse(customCart).lineItems.edges.length > 0 && (\n              <MPCart\n                cart={JSON.parse(customCart)}\n                cartName=\"BN\"\n                background=\"#F1FBFC\"\n                color=\"#007489\"\n              />\n            )}\n          {channels.filter(channel => channel.type === 'ZINC').length > 0 &&\n            zincCart &&\n            JSON.parse(zincCart).products &&\n            JSON.parse(zincCart).products.length > 0 &&\n            parseZinc(zincCart, zincCheckout)}\n          {mpCheckout && (\n            <Box\n              marginLeft=\"-3px\"\n              background=\"#F1FAF5\"\n              border=\"muted\"\n              paddingY=\".7em\"\n              paddingX=\"1em\"\n            >\n              <Box marginBottom={10}>\n                <Text size={400} fontWeight={500} color=\"#00783E\">\n                  Marketplace Order\n                </Text>\n              </Box>\n              {mpCheckout[0].marketLineItems.map(a => (\n                <Box background=\"#fff\" border=\"muted\" marginBottom={5}>\n                  <Box display=\"flex\" alignItems=\"center\">\n                    <Box\n                      height=\"100%\"\n                      background=\"white\"\n                      borderRight=\"1px solid #e8e9ea\"\n                    >\n                      <Box as=\"img\" src={a.variantImg} width=\"100px\" />\n                    </Box>\n                    <Box padding={5} paddingLeft={10}>\n                      <Heading size={300}>{a.title}</Heading>\n                      <Box display=\"flex\">\n                        {a.quantity > 1 && (\n                          <Box>\n                            <Text size={300} color=\"muted\">\n                              ${a.variantPrice} x {a.quantity}\n                            </Text>\n                          </Box>\n                        )}\n                        <Heading size={300} marginRight={10} color=\"green\">\n                          $\n                          {a.variantPrice &&\n                            priceString(a.variantPrice, a.quantity)}\n                        </Heading>\n                      </Box>\n                    </Box>\n                  </Box>\n                </Box>\n              ))}\n            </Box>\n          )}\n        </>\n      )}\n    </Box>\n  );\n}\n\nOrderListItem.propTypes = {\n  id: PropTypes.string,\n  orderId: PropTypes.string,\n  orderName: PropTypes.string,\n  email: PropTypes.string,\n  first_name: PropTypes.string,\n  last_name: PropTypes.string,\n  streetAddress1: PropTypes.string,\n  streetAddress2: PropTypes.string,\n  city: PropTypes.string,\n  state: PropTypes.string,\n  zip: PropTypes.string,\n  shopName: PropTypes.string,\n  phone: PropTypes.string,\n  lineItems: PropTypes.object,\n  currency: PropTypes.string,\n  totalPrice: PropTypes.number,\n  subTotalPrice: PropTypes.number,\n  totalDiscount: PropTypes.number,\n  totalTax: PropTypes.number,\n  createAt: PropTypes.number,\n  mpCheckout: PropTypes.object,\n  mpCart: PropTypes.object,\n  note: PropTypes.object,\n  disabled: PropTypes.bool,\n  selectedOrderIndex: PropTypes.number,\n  selectedLineIndex: PropTypes.array,\n  open: PropTypes.bool,\n  updateIndex: PropTypes.func,\n  index: PropTypes.number,\n  createCheckout: PropTypes.func,\n  buttons: PropTypes.element,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAQA;AADA;AAPA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AApCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuEA;AAGA;AACA;AACA;AACA;AAEA;AAKA;AALA;AASA;AAGA;AAGA;AArBA;AA0BA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AALA;AAWA;AACA;AACA;AACA;AACA;AACA;AANA;AAWA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAJA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AADA;AAKA;AAAA;AAKA;AAAA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAOA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AApBA;AAoCA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA/BA;;;;A","sourceRoot":""}