{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport React from \"react\";\nimport { useState, useEffect } from 'react';\nimport fetch from 'isomorphic-unfetch';\nimport { Pane, TextInput, Heading, Text, Code, Switch } from 'evergreen-ui';\nimport { resultKeyNameFromField } from 'apollo-utilities';\nimport Button from '../common/Button';\nimport { front, prodFront, prodEndpoint } from '../../config';\n\nfunction getWebhooks(domain, accessToken, setResults) {\n  const url = `${process.env.NODE_ENV === 'development' ? front : prodFront}/${accessToken}/graphql`;\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      query: `\n    {\n      webhookSubscriptions(first :5\n        callbackUrl: \"${prodEndpoint}order?spdn=${domain}\"\n        ) {\n          edges{\n            node{\n              id\n              callbackUrl\n              createdAt\n              topic\n              includeFields\n            }\n          }\n        }\n      }\n    `\n    })\n  }).then(res => res.json()).then(res => {\n    if (res.data) {\n      const results = res.data.webhookSubscriptions.edges;\n      setResults(results);\n    }\n  });\n}\n\nfunction createWebhook(domain, accessToken, setResults) {\n  const url = `${process.env.NODE_ENV === 'development' ? front : prodFront}/${accessToken}/graphql`;\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      query: `\n      mutation webhookSubscriptionCreate(\n        $topic: WebhookSubscriptionTopic!\n        $webhookSubscription: WebhookSubscriptionInput!\n      ) {\n        webhookSubscriptionCreate(\n          topic: $topic\n          webhookSubscription: $webhookSubscription\n        ) {\n          userErrors {\n            field\n            message\n          }\n          webhookSubscription {\n            id\n          }\n        }\n      }\n    `,\n      variables: {\n        topic: 'ORDERS_CREATE',\n        webhookSubscription: {\n          callbackUrl: `${prodEndpoint}order?spdn=${domain}`,\n          format: 'JSON'\n        }\n      }\n    })\n  }).then(res => res.json()).then(res => {\n    const webhook = res.data.webhookSubscriptionCreate;\n    getWebhooks(domain, accessToken, setResults);\n  });\n}\n\nfunction deleteWebhook(id, domain, accessToken, setResults) {\n  const url = `${process.env.NODE_ENV === 'development' ? front : prodFront}/${accessToken}/graphql`;\n  fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: _JSON$stringify({\n      query: `\n      mutation   {\n        webhookSubscriptionDelete(\n          id: \"${id}\"\n        ) {\n          deletedWebhookSubscriptionId\n        }\n      }\n    `\n    })\n  }).then(res => res.json()).then(res => {\n    getWebhooks(domain, accessToken, setResults);\n  });\n}\n\nconst WebhookSwitch = ({\n  domain,\n  accessToken\n}) => {\n  const [results, setResults] = useState([]);\n  useEffect(() => {\n    getWebhooks(domain, accessToken, setResults);\n  }, [domain, accessToken]);\n\n  function handleSwitch(e) {\n    if (e.target.checked) {\n      createWebhook(domain, accessToken, setResults);\n    } else {\n      deleteWebhook(results[0].node.id, domain, accessToken, setResults);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Pane, {\n    paddingY: 10,\n    paddingX: 15,\n    background: \"#f5f5f5\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\"\n  }, React.createElement(Pane, {\n    paddingRight: 15\n  }, React.createElement(Heading, {\n    size: 500,\n    fontSize: \"15px\",\n    fontWeight: 500\n  }, \"Push orders to Openship\"), React.createElement(Text, {\n    size: 300\n  }, \"Orders will be pushed to the pending tab to be fulfilled\")), React.createElement(Switch, {\n    marginLeft: \"auto\",\n    checked: results.length > 0,\n    onChange: e => handleSwitch(e)\n  })), results.map(a => React.createElement(Pane, {\n    paddingY: 10,\n    paddingX: 15\n  }, React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginBottom: 10\n  }, React.createElement(Text, {\n    size: 400,\n    paddingRight: 5,\n    fontWeight: 500,\n    align: \"right\",\n    marginRight: 5,\n    flexBasis: \"100px\"\n  }, \"Endpoint:\"), React.createElement(Code, {\n    fontSize: \"12px\",\n    size: 300,\n    wordWrap: \"break-word\"\n  }, \"Openship\")), React.createElement(Pane, {\n    display: \"flex\",\n    alignItems: \"center\"\n  }, React.createElement(Text, {\n    size: 400,\n    paddingRight: 5,\n    fontWeight: 500,\n    align: \"right\",\n    marginRight: 5,\n    flexBasis: \"100px\"\n  }, \"Topic:\"), React.createElement(Code, {\n    fontSize: \"12px\",\n    size: 300\n  }, a.node.topic)))));\n};\n\nexport default WebhookSwitch;","map":null,"metadata":{},"sourceType":"module"}