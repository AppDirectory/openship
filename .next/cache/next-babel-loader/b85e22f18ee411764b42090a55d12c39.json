{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createOrder(\\n    $shopName: String!\\n    $orderId: Float!\\n    $orderName: String!\\n    $email: String\\n    $first_name: String\\n    $last_name: String\\n    $streetAddress1: String!\\n    $streetAddress2: String\\n    $city: String!\\n    $state: String!\\n    $zip: String!\\n    $lineItems: Json!\\n    $currency: String!\\n    $totalPrice: String!\\n    $subTotalPrice: String!\\n    $totalDiscount: String!\\n    $totalTax: String!\\n    $mpCart: String!\\n    $zincCart: String!\\n    $processed: Processed\\n    $createAt: String!\\n  ) {\\n    createOrder(\\n      shopName: $shopName\\n      orderId: $orderId\\n      orderName: $orderName\\n      email: $email\\n      first_name: $first_name\\n      last_name: $last_name\\n      streetAddress1: $streetAddress1\\n      streetAddress2: $streetAddress2\\n      city: $city\\n      state: $state\\n      zip: $zip\\n      lineItems: $lineItems\\n      currency: $currency\\n      totalPrice: $totalPrice\\n      totalDiscount: $totalDiscount\\n      subTotalPrice: $subTotalPrice\\n      totalTax: $totalTax\\n      mpCart: $mpCart\\n      zincCart: $zincCart\\n      processed: $processed\\n      createAt: $createAt\\n    ) {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Text, Box, Heading, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter, useToast, Button } from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nimport { ORDER_QUERY, PAGINATION_QUERY } from '../pending/Pending';\nvar Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\nvar wideText = {\n  fontSize: 'xs',\n  fontWeight: 500,\n  color: 'gray.500',\n  letterSpacing: 'wide',\n  textTransform: 'uppercase'\n};\nvar CREATE_ORDER = gql(_templateObject());\n\nfunction readFormField(data, field, onInput) {\n  return __jsx(Box, {\n    marginBottom: 2\n  }, __jsx(Text, {\n    contentEditable: \"true\",\n    onInput: onInput,\n    fontWeight: 500,\n    fontSize: \"md\",\n    color: \"text\"\n  }, data), __jsx(Heading, wideText, field));\n}\n\nvar Reshipment = function Reshipment(_ref) {\n  var order = _ref.order,\n      shop = _ref.shop,\n      isOpen = _ref.isOpen,\n      onClose = _ref.onClose;\n\n  var _useState = useState(null),\n      first = _useState[0],\n      setFirst = _useState[1];\n\n  var _useState2 = useState(null),\n      last = _useState2[0],\n      setLast = _useState2[1];\n\n  var _useState3 = useState(null),\n      address = _useState3[0],\n      setAddress = _useState3[1];\n\n  var _useState4 = useState(null),\n      address2 = _useState4[0],\n      setAddress2 = _useState4[1];\n\n  var _useState5 = useState(null),\n      city = _useState5[0],\n      setCity = _useState5[1];\n\n  var _useState6 = useState(null),\n      state = _useState6[0],\n      setState = _useState6[1];\n\n  var _useState7 = useState(null),\n      zip = _useState7[0],\n      setZip = _useState7[1];\n\n  var _useState8 = useState(null),\n      lineItems = _useState8[0],\n      setLineItems = _useState8[1];\n\n  var initialItems = [];\n  var toast = useToast();\n\n  var _useMutation = useMutation(CREATE_ORDER, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: 0,\n        first: 100,\n        orderBy: 'createdAt_ASC',\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createOrder = _useMutation2[0],\n      loading = _useMutation2[1].loading;\n\n  useEffect(function () {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  var handleLine = function handleLine(ID, quantity, initialQty) {\n    var temp = lineItems;\n    temp.map(function (item) {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        var itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  var resetLineItems = function resetLineItems() {\n    var temp = lineItems;\n    initialItems.reverse();\n    temp.map(function (item) {\n      initialItems.forEach(function (initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? __jsx(Modal, {\n    isOpen: isOpen,\n    onClose: onClose\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, null, __jsx(ModalHeader, null, \"Request Reshipment\"), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, __jsx(Box, Layout, __jsx(Box, {\n    marginBottom: 4\n  }, __jsx(Text, {\n    fontWeight: 600,\n    fontSize: \"md\",\n    color: \"text\"\n  }, order.name), __jsx(Heading, wideText, \"Order Number\")), readFormField(order.shippingAddress.name.split(' ')[0], 'First Name', function (e) {\n    return setFirst(e.target.textContent);\n  }), readFormField(order.shippingAddress.name.split(' ').pop(), 'Last Name', function (e) {\n    return setLast(e.target.textContent);\n  }), readFormField(order.shippingAddress.address1, 'Street Address', function (e) {\n    return setAddress(e.target.textContent);\n  }), order.shippingAddress.address2 && readFormField(order.shippingAddress.address2, 'Apt, Suite, etc.', function (e) {\n    return setAddress2(e.target.textContent);\n  }), readFormField(order.shippingAddress.city, 'City', function (e) {\n    return setCity(e.target.textContent);\n  }), readFormField(order.shippingAddress.province, 'State', function (e) {\n    return setState(e.target.textContent);\n  }), readFormField(order.shippingAddress.zip, 'Zip Code', function (e) {\n    return setZip(e.target.textContent);\n  })), __jsx(Box, Layout, order.lineItems.edges.map(function (a) {\n    return __jsx(ReshipmentLineItem, {\n      arg: a.node,\n      handleLine: handleLine\n    });\n  })))), __jsx(ModalFooter, null, __jsx(Button, {\n    variant: \"ghost\",\n    mr: 3,\n    onClick: onClose\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"blue\",\n    bg: \"blue.50\",\n    _hover: {\n      bg: 'blue.100'\n    },\n    isLoading: loading,\n    onClick: function _callee() {\n      var res;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(createOrder({\n                variables: {\n                  shopName: \"\".concat(shop, \".myshopify.com\"),\n                  orderId: order.id.split('/').pop(),\n                  orderName: order.name,\n                  email: order.email || 'noemail@noemail.com',\n                  first_name: first,\n                  last_name: last,\n                  streetAddress1: address,\n                  streetAddress2: address2,\n                  city: city,\n                  state: state,\n                  zip: zip,\n                  phone: order.shippingAddress.phone,\n                  lineItems: lineItems.filter(function (a) {\n                    return a.node.quantity > 0;\n                  }).map(function (b) {\n                    b.node.id = parseFloat(b.node.id.split('/').pop());\n                    return b.node;\n                  }),\n                  currency: 'USD',\n                  totalPrice: order.totalReceivedSet.shopMoney.amount,\n                  subTotalPrice: 0,\n                  totalDiscount: 0,\n                  totalTax: 0,\n                  createAt: order.processedAt,\n                  mpCart: '{}',\n                  zincCart: '{}',\n                  processed: 'FALSE'\n                }\n              }));\n\n            case 2:\n              res = _context.sent;\n              onClose();\n              toast({\n                position: 'top-right',\n                title: \"\".concat(order.name, \" has been requested for reshipment.\"),\n                status: 'success',\n                duration: 2000,\n                isClosable: true\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n  }, \"Confirm Reshipment\")))) : __jsx(React.Fragment, null);\n};\n\nexport default Reshipment;\nReshipment.propTypes = {\n  order: PropTypes.object,\n  isShown: PropTypes.bool,\n  onCloseComplete: PropTypes.func,\n  shop: PropTypes.string\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/common/Reshipment.js"],"names":["useState","useEffect","gql","useMutation","Text","Box","Heading","Modal","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","ModalFooter","useToast","Button","PropTypes","ReshipmentLineItem","ORDER_QUERY","PAGINATION_QUERY","Layout","flex","marginLeft","marginTop","wideText","fontSize","fontWeight","color","letterSpacing","textTransform","CREATE_ORDER","readFormField","data","field","onInput","Reshipment","order","shop","isOpen","onClose","first","setFirst","last","setLast","address","setAddress","address2","setAddress2","city","setCity","state","setState","zip","setZip","lineItems","setLineItems","initialItems","toast","refetchQueries","query","variables","skip","orderBy","processed","createOrder","loading","shippingAddress","name","split","pop","address1","province","edges","handleLine","ID","quantity","initialQty","temp","map","item","node","id","itemObj","push","resetLineItems","reverse","forEach","initialItem","e","target","textContent","a","bg","shopName","orderId","orderName","email","first_name","last_name","streetAddress1","streetAddress2","phone","filter","b","parseFloat","currency","totalPrice","totalReceivedSet","shopMoney","amount","subTotalPrice","totalDiscount","totalTax","createAt","processedAt","mpCart","zincCart","res","position","title","status","duration","isClosable","propTypes","object","isShown","bool","onCloseComplete","func","string"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useMutation } from '@apollo/react-hooks';\nimport {\n  Text,\n  Box,\n  Heading,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  useToast,\n  Button,\n} from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport ReshipmentLineItem from './ReshipmentLineItem';\nimport { ORDER_QUERY, PAGINATION_QUERY } from '../pending/Pending';\n\nconst Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem',\n};\n\nconst wideText = {\n  fontSize: 'xs',\n  fontWeight: 500,\n  color: 'gray.500',\n  letterSpacing: 'wide',\n  textTransform: 'uppercase',\n};\n\nconst CREATE_ORDER = gql`\n  mutation createOrder(\n    $shopName: String!\n    $orderId: Float!\n    $orderName: String!\n    $email: String\n    $first_name: String\n    $last_name: String\n    $streetAddress1: String!\n    $streetAddress2: String\n    $city: String!\n    $state: String!\n    $zip: String!\n    $lineItems: Json!\n    $currency: String!\n    $totalPrice: String!\n    $subTotalPrice: String!\n    $totalDiscount: String!\n    $totalTax: String!\n    $mpCart: String!\n    $zincCart: String!\n    $processed: Processed\n    $createAt: String!\n  ) {\n    createOrder(\n      shopName: $shopName\n      orderId: $orderId\n      orderName: $orderName\n      email: $email\n      first_name: $first_name\n      last_name: $last_name\n      streetAddress1: $streetAddress1\n      streetAddress2: $streetAddress2\n      city: $city\n      state: $state\n      zip: $zip\n      lineItems: $lineItems\n      currency: $currency\n      totalPrice: $totalPrice\n      totalDiscount: $totalDiscount\n      subTotalPrice: $subTotalPrice\n      totalTax: $totalTax\n      mpCart: $mpCart\n      zincCart: $zincCart\n      processed: $processed\n      createAt: $createAt\n    ) {\n      id\n      email\n    }\n  }\n`;\n\nfunction readFormField(data, field, onInput) {\n  return (\n    <Box marginBottom={2}>\n      <Text\n        contentEditable=\"true\"\n        onInput={onInput}\n        fontWeight={500}\n        fontSize=\"md\"\n        color=\"text\"\n      >\n        {data}\n      </Text>\n      <Heading {...wideText}>{field}</Heading>\n    </Box>\n  );\n}\n\nconst Reshipment = ({ order, shop, isOpen, onClose }) => {\n  const [first, setFirst] = useState(null);\n  const [last, setLast] = useState(null);\n  const [address, setAddress] = useState(null);\n  const [address2, setAddress2] = useState(null);\n  const [city, setCity] = useState(null);\n  const [state, setState] = useState(null);\n  const [zip, setZip] = useState(null);\n  const [lineItems, setLineItems] = useState(null);\n  const initialItems = [];\n\n  const toast = useToast();\n\n  const [createOrder, { loading }] = useMutation(CREATE_ORDER, {\n    refetchQueries: [\n      {\n        query: ORDER_QUERY,\n        variables: {\n          skip: 0,\n          first: 100,\n          orderBy: 'createdAt_ASC',\n          processed: 'FALSE',\n        },\n      },\n      {\n        query: PAGINATION_QUERY,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    if (order) {\n      setFirst(order.shippingAddress.name.split(' ')[0]);\n      setLast(order.shippingAddress.name.split(' ').pop());\n      setAddress(order.shippingAddress.address1);\n      setAddress2(order.shippingAddress.address2);\n      setCity(order.shippingAddress.city);\n      setState(order.shippingAddress.province);\n      setZip(order.shippingAddress.zip);\n      setLineItems(order.lineItems.edges);\n    }\n  }, [order]);\n\n  const handleLine = (ID, quantity, initialQty) => {\n    const temp = lineItems;\n\n    temp.map(item => {\n      if (item.node.id === ID) {\n        item.node.quantity = quantity;\n        const itemObj = {};\n        itemObj.id = ID;\n        itemObj.quantity = initialQty;\n        initialItems.push(itemObj);\n      }\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  const resetLineItems = () => {\n    const temp = lineItems;\n    initialItems.reverse();\n    temp.map(item => {\n      initialItems.forEach(function(initialItem) {\n        if (item.node.id === initialItem.id) {\n          item.node.quantity = initialItem.quantity;\n        }\n      });\n      return null;\n    });\n    setLineItems(temp);\n  };\n\n  return order ? (\n    <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Request Reshipment</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Box\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            marginLeft=\"-2rem\"\n            marginTop=\"-2rem\"\n          >\n            <Box {...Layout}>\n              <Box marginBottom={4}>\n                <Text fontWeight={600} fontSize=\"md\" color=\"text\">\n                  {order.name}\n                </Text>\n                <Heading {...wideText}>Order Number</Heading>\n              </Box>\n              {readFormField(\n                order.shippingAddress.name.split(' ')[0],\n                'First Name',\n                e => setFirst(e.target.textContent)\n              )}\n              {readFormField(\n                order.shippingAddress.name.split(' ').pop(),\n                'Last Name',\n                e => setLast(e.target.textContent)\n              )}\n              {readFormField(\n                order.shippingAddress.address1,\n                'Street Address',\n                e => setAddress(e.target.textContent)\n              )}\n              {order.shippingAddress.address2 &&\n                readFormField(\n                  order.shippingAddress.address2,\n                  'Apt, Suite, etc.',\n                  e => setAddress2(e.target.textContent)\n                )}\n              {readFormField(order.shippingAddress.city, 'City', e =>\n                setCity(e.target.textContent)\n              )}\n              {readFormField(order.shippingAddress.province, 'State', e =>\n                setState(e.target.textContent)\n              )}\n              {readFormField(order.shippingAddress.zip, 'Zip Code', e =>\n                setZip(e.target.textContent)\n              )}\n            </Box>\n            <Box {...Layout}>\n              {order.lineItems.edges.map(a => (\n                <ReshipmentLineItem arg={a.node} handleLine={handleLine} />\n              ))}\n            </Box>\n          </Box>\n        </ModalBody>\n\n        <ModalFooter>\n          <Button variant=\"ghost\" mr={3} onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            variant=\"ghost\"\n            variantColor=\"blue\"\n            bg=\"blue.50\"\n            _hover={{ bg: 'blue.100' }}\n            isLoading={loading}\n            onClick={async () => {\n              const res = await createOrder({\n                variables: {\n                  shopName: `${shop}.myshopify.com`,\n                  orderId: order.id.split('/').pop(),\n                  orderName: order.name,\n                  email: order.email || 'noemail@noemail.com',\n                  first_name: first,\n                  last_name: last,\n                  streetAddress1: address,\n                  streetAddress2: address2,\n                  city,\n                  state,\n                  zip,\n                  phone: order.shippingAddress.phone,\n                  lineItems: lineItems\n                    .filter(a => a.node.quantity > 0)\n                    .map(b => {\n                      b.node.id = parseFloat(b.node.id.split('/').pop());\n                      return b.node;\n                    }),\n                  currency: 'USD',\n                  totalPrice: order.totalReceivedSet.shopMoney.amount,\n                  subTotalPrice: 0,\n                  totalDiscount: 0,\n                  totalTax: 0,\n                  createAt: order.processedAt,\n                  mpCart: '{}',\n                  zincCart: '{}',\n                  processed: 'FALSE',\n                },\n              });\n              onClose();\n              toast({\n                position: 'top-right',\n                title: `${order.name} has been requested for reshipment.`,\n                status: 'success',\n                duration: 2000,\n                isClosable: true,\n              });\n            }}\n          >\n            Confirm Reshipment\n          </Button>\n        </ModalFooter>\n      </ModalContent>\n    </Modal>\n  ) : (\n    <></>\n  );\n};\n\nexport default Reshipment;\n\nReshipment.propTypes = {\n  order: PropTypes.object,\n  isShown: PropTypes.bool,\n  onCloseComplete: PropTypes.func,\n  shop: PropTypes.string,\n};\n"]},"metadata":{},"sourceType":"module"}