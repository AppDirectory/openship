{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport { gql } from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { Box, Button, InputGroup, InputLeftElement, Input, Icon, Heading, Text, useToast } from '@chakra-ui/core';\nimport { CURRENT_USER_QUERY } from '../user/User';\nimport Pagination from '../common/Pagination';\nimport { CardStyle } from '../common/DefaultStyles';\nimport MarketplaceSearch from './MarketplaceSearch';\nimport ZincSearch from './ZincSearch';\nimport ShopifySearch from './ShopifySearch';\nimport { CHANNELS_QUERY, channelsQueryVars } from '../layout/Page';\nexport const getItemGroup = gql`\n  query getItemGroup($itemID: String) {\n    getItemGroup(itemID: $itemID) {\n      item\n    }\n  }\n`;\nconst sortOptions = [{\n  label: 'Lowest Price',\n  value: 'price'\n}, {\n  label: 'Highest Price',\n  value: '-price'\n}, {\n  label: 'Best Match',\n  value: 'match'\n}];\nexport const option = (name, options, update, selected) => __jsx(Box, {\n  marginBottom: 2,\n  marginRight: 5\n}, __jsx(Heading, {\n  fontSize: \"sm\",\n  color: \"text\",\n  fontWeight: 500,\n  marginBottom: 0\n}, name), __jsx(Box, {\n  display: \"flex\"\n}, options.length > 0 ? options.map((a, index) => __jsx(Box, {\n  id: a,\n  key: index,\n  p: 1,\n  mr: 2,\n  mt: 2,\n  borderRadius: 3,\n  bg: a === selected ? '#e2e9f2' : 'transparent',\n  onClick: () => update(a),\n  cursor: \"pointer\"\n}, __jsx(Heading, {\n  fontSize: \"xs\",\n  fontWeight: 500,\n  px: 1,\n  color: a === selected ? '#1070ca' : '#425a70',\n  letterSpacing: \"wide\",\n  textTransform: \"uppercase\"\n}, a))) : __jsx(Text, {\n  mt: 2,\n  fontSize: \"sm\",\n  color: \"text\"\n}, \"No Channels Added\")));\n\nconst Find = ({\n  headerSize,\n  atcDisabled,\n  addMPItem,\n  addCustomItem,\n  addZincItem\n}) => {\n  const allChannels = useQuery(CHANNELS_QUERY, {\n    variables: channelsQueryVars\n  });\n  const {\n    data,\n    error: channelsError,\n    loading: channelsLoading\n  } = allChannels;\n  const {\n    0: selectedChannel,\n    1: setSelectedChannel\n  } = useState(data.channels.length ? data.channels[0].name : '');\n  const {\n    0: value,\n    1: setValue\n  } = useState('price');\n  const {\n    0: searchBar,\n    1: setSearchBar\n  } = useState('');\n  const {\n    0: searchEntry,\n    1: setSearchEntry\n  } = useState('');\n  const {\n    0: limit,\n    1: setLimit\n  } = useState(10);\n  const {\n    0: pageNum,\n    1: setPageNum\n  } = useState(0);\n  const {\n    0: min,\n    1: setMin\n  } = useState('');\n  const {\n    0: max,\n    1: setMax\n  } = useState('');\n  const {\n    0: price,\n    1: setPrice\n  } = useState(null);\n  const {\n    0: priceCurrency,\n    1: setPriceCurrency\n  } = useState('USD');\n  const {\n    0: itemLocationCountry,\n    1: setItemLocationCountry\n  } = useState('US');\n  const {\n    0: include,\n    1: setInclude\n  } = useState([]);\n  const {\n    0: exclude,\n    1: setExclude\n  } = useState([]);\n  const {\n    data: {\n      me\n    }\n  } = useQuery(CURRENT_USER_QUERY);\n  const toast = useToast();\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Marketplace\"))), __jsx(Box, _extends({}, CardStyle, {\n    background: \"white\"\n  }), __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    paddingX: \"1em\",\n    paddingY: \"1em\",\n    flexWrap: \"wrap\"\n  }, __jsx(Pagination, {\n    leftDisabled: pageNum === 0,\n    onLeft: () => setPageNum(pageNum - 1),\n    onRight: () => setPageNum(pageNum + 1)\n  }), __jsx(Box, {\n    flex: 1\n  }, __jsx(InputGroup, {\n    width: \"100%\",\n    borderColor: \"gray.300\"\n  }, __jsx(InputLeftElement, {\n    children: __jsx(Icon, {\n      name: \"search\",\n      color: \"gray.300\"\n    })\n  }), __jsx(Input, {\n    value: searchBar,\n    onChange: e => {\n      setSearchBar(e.target.value);\n      setPageNum(0);\n    },\n    onKeyPress: e => {\n      if (e.key === 'Enter') {\n        setSearchEntry(searchBar);\n      }\n    },\n    placeholder: \"Search\"\n  })))), (() => {\n    if (channelsError || !data || !data.channels) return null;\n    return __jsx(React.Fragment, null, __jsx(Box, {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      background: \"#f5f5f5\",\n      paddingY: \".7em\",\n      paddingX: \"1em\"\n    }, option('Channel', data.channels.map(a => a.name), a => setSelectedChannel(a), selectedChannel), option('Location', ['US', 'CN', 'All'], a => setItemLocationCountry(a), itemLocationCountry), option('Items per page', [10, 50, 100], a => setLimit(a), limit)), searchEntry && data.channels.filter(order => order.name === selectedChannel)[0].type === 'MARKETPLACE' && __jsx(MarketplaceSearch, {\n      search: searchEntry,\n      limit,\n      sort: value,\n      pageNum,\n      exclude,\n      include,\n      priceCurrency,\n      price,\n      itemLocationCountry,\n      atcDisabled,\n      addMPItem\n    }), data.channels.length > 0 && data.channels.filter(order => order.name === selectedChannel)[0].type === 'ZINC' && __jsx(ZincSearch, {\n      addZincItem: addZincItem,\n      atcDisabled: atcDisabled,\n      searchEntry: searchEntry,\n      token: data.channels.filter(c => c.type === 'ZINC')[0].settings.key\n    }), data.channels.length > 0 && data.channels.filter(order => order.name === selectedChannel)[0].type === 'SHOPIFY' && __jsx(ShopifySearch, {\n      addCustomItem: (a, b) => addCustomItem(a, b, data.channels.filter(order => order.name === selectedChannel)[0].settings.shopURL, data.channels.filter(order => order.name === selectedChannel)[0].settings.key),\n      checkout: () => toast({\n        position: 'top-right',\n        title: `Checkout`,\n        status: 'success',\n        duration: 2000,\n        isClosable: true\n      }),\n      client: \"Marketplace\",\n      atcDisabled: atcDisabled,\n      searchEntry: searchEntry,\n      apiKey: data.channels.filter(order => order.name === selectedChannel)[0].settings.key,\n      url: data.channels.filter(order => order.name === selectedChannel)[0].settings.shopURL\n    }));\n  })())));\n};\n\nexport default Find;","map":null,"metadata":{},"sourceType":"module"}