{"ast":null,"code":"import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION(\n    $email: String!\n    $name: String!\n    $password: String!\n  ) {\n    signup(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nfunction Signup({\n  formChange\n}) {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n  return React.createElement(Mutation, {\n    mutation: SIGNUP_MUTATION,\n    variables: {\n      name,\n      password,\n      email\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }, (signup, {\n    error,\n    loading\n  }) => React.createElement(Userform, {\n    title: \"Create an account\",\n    handleToggleClick: () => formChange(),\n    buttonTitle: \"Sign Up\",\n    buttonColor: \"#47B881\",\n    error: error,\n    loading: loading,\n    buttonDisabled: !email || !password || !name,\n    fields: [{\n      label: 'Name',\n      value: name,\n      onChange: setName,\n      icon: 'person'\n    }, {\n      label: 'Email',\n      value: email,\n      onChange: setEmail,\n      icon: 'envelope'\n    }, {\n      label: 'Password',\n      value: password,\n      onChange: setPassword,\n      icon: 'lock'\n    }],\n    bottomText: \"Already have an account?\",\n    bottomLinkText: \"Sign In\",\n    onSubmit: async e => {\n      e.preventDefault();\n      await signup();\n      setName('');\n      setEmail('');\n      setPassword('');\n    }\n  }));\n}\n\nexport default Signup;\nSignup.propTypes = {\n  formChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/user/Signup.js"],"names":["React","useState","Mutation","PropTypes","gql","CURRENT_USER_QUERY","Userform","SIGNUP_MUTATION","Signup","formChange","name","setName","password","setPassword","email","setEmail","query","signup","error","loading","label","value","onChange","icon","e","preventDefault","propTypes","func"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,eAAe,GAAGH,GAAI;;;;;;;;;;;;CAA5B;;AAcA,SAASI,MAAT,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAAgC;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,EAAD,CAAlC;AAEA,SACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAEM,eADZ;AAEE,IAAA,SAAS,EAAE;AAAEG,MAAAA,IAAF;AAAQE,MAAAA,QAAR;AAAkBE,MAAAA;AAAlB,KAFb;AAGE,IAAA,cAAc,EAAE,CAAC;AAAEE,MAAAA,KAAK,EAAEX;AAAT,KAAD;AAHlB,KAKG,CAACY,MAAD,EAAS;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAT,KACC,oBAAC,QAAD;AACE,IAAA,KAAK,EAAC,mBADR;AAEE,IAAA,iBAAiB,EAAE,MAAMV,UAAU,EAFrC;AAGE,IAAA,WAAW,EAAC,SAHd;AAIE,IAAA,WAAW,EAAC,SAJd;AAKE,IAAA,KAAK,EAAES,KALT;AAME,IAAA,OAAO,EAAEC,OANX;AAOE,IAAA,cAAc,EAAE,CAACL,KAAD,IAAU,CAACF,QAAX,IAAuB,CAACF,IAP1C;AAQE,IAAA,MAAM,EAAE,CACN;AAAEU,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,KAAK,EAAEX,IAAxB;AAA8BY,MAAAA,QAAQ,EAAEX,OAAxC;AAAiDY,MAAAA,IAAI,EAAE;AAAvD,KADM,EAEN;AACEH,MAAAA,KAAK,EAAE,OADT;AAEEC,MAAAA,KAAK,EAAEP,KAFT;AAGEQ,MAAAA,QAAQ,EAAEP,QAHZ;AAIEQ,MAAAA,IAAI,EAAE;AAJR,KAFM,EASN;AACEH,MAAAA,KAAK,EAAE,UADT;AAEEC,MAAAA,KAAK,EAAET,QAFT;AAGEU,MAAAA,QAAQ,EAAET,WAHZ;AAIEU,MAAAA,IAAI,EAAE;AAJR,KATM,CARV;AAwBE,IAAA,UAAU,EAAC,0BAxBb;AAyBE,IAAA,cAAc,EAAC,SAzBjB;AA0BE,IAAA,QAAQ,EAAE,MAAMC,CAAN,IAAW;AACnBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMR,MAAM,EAAZ;AACAN,MAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD;AAhCH,IANJ,CADF;AA4CD;;AAED,eAAeL,MAAf;AAEAA,MAAM,CAACkB,SAAP,GAAmB;AACjBjB,EAAAA,UAAU,EAAEN,SAAS,CAACwB;AADL,CAAnB","sourcesContent":["import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\n\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION(\n    $email: String!\n    $name: String!\n    $password: String!\n  ) {\n    signup(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nfunction Signup({ formChange }) {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n\n  return (\n    <Mutation\n      mutation={SIGNUP_MUTATION}\n      variables={{ name, password, email }}\n      refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n    >\n      {(signup, { error, loading }) => (\n        <Userform\n          title=\"Create an account\"\n          handleToggleClick={() => formChange()}\n          buttonTitle=\"Sign Up\"\n          buttonColor=\"#47B881\"\n          error={error}\n          loading={loading}\n          buttonDisabled={!email || !password || !name}\n          fields={[\n            { label: 'Name', value: name, onChange: setName, icon: 'person' },\n            {\n              label: 'Email',\n              value: email,\n              onChange: setEmail,\n              icon: 'envelope',\n            },\n\n            {\n              label: 'Password',\n              value: password,\n              onChange: setPassword,\n              icon: 'lock',\n            },\n          ]}\n          bottomText=\"Already have an account?\"\n          bottomLinkText=\"Sign In\"\n          onSubmit={async e => {\n            e.preventDefault();\n            await signup();\n            setName('');\n            setEmail('');\n            setPassword('');\n          }}\n        />\n      )}\n    </Mutation>\n  );\n}\n\nexport default Signup;\n\nSignup.propTypes = {\n  formChange: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}