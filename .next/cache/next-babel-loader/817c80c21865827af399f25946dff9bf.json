{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { CardElement, StripeProvider, Elements, injectStripe } from 'react-stripe-elements';\nimport { Box, Heading, Button, Input } from '@chakra-ui/core';\n\nconst createOptions = (fontSize, padding) => ({\n  style: {\n    base: {\n      fontSize,\n      color: '#424770',\n      letterSpacing: '0.025em',\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n      '::placeholder': {\n        color: '#aab7c4'\n      },\n      padding\n    },\n    invalid: {\n      color: '#9e2146'\n    }\n  }\n});\n\nclass _CardForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      name: '',\n      addressLine1: '',\n      addressLine2: '',\n      addressCity: '',\n      addressState: '',\n      addressZip: ''\n    });\n\n    _defineProperty(this, \"handleSubmit\", ev => {\n      ev.preventDefault();\n      const {\n        stripe\n      } = this.props;\n\n      if (stripe) {\n        stripe.createToken(_objectSpread({}, this.state)).then(async payload => {\n          const customer = await this.props.createCustomer({\n            variables: {\n              userInput: {\n                token: {\n                  id: payload.token.id\n                }\n              }\n            }\n          });\n        });\n      }\n    });\n  }\n\n  render() {\n    const {\n      fontSize\n    } = this.props;\n    const {\n      name,\n      addressLine1,\n      addressLine2\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"form\", {\n      onSubmit: e => this.handleSubmit(e, createCustomer)\n    }, __jsx(Box, {\n      padding: 4,\n      paddingBottom: 2\n    }, __jsx(Heading, {\n      fontSize: \"md\",\n      marginBottom: 2,\n      fontWeight: 500,\n      color: \"#425A70\"\n    }, \"Name\"), __jsx(Box, {\n      elevation: 1,\n      borderRadius: 3,\n      marginBottom: 4,\n      width: \"100%\"\n    }, __jsx(Input, {\n      value: name,\n      onChange: e => this.setState({\n        name: e.target.value\n      }),\n      placeholder: \"James Michael\",\n      height: \"32px\",\n      px: 3,\n      borderColor: \"transparent\"\n    })), __jsx(Heading, {\n      fontSize: \"md\",\n      marginBottom: 2,\n      fontWeight: 500,\n      color: \"#425A70\"\n    }, \"Address\"), __jsx(Box, {\n      elevation: 1,\n      borderRadius: 3,\n      marginBottom: 4,\n      width: \"100%\"\n    }, __jsx(Input, {\n      value: addressLine1,\n      onChange: e => this.setState({\n        addressLine1: e.target.value\n      }),\n      placeholder: \"2 Infinite Loop\",\n      height: \"32px\",\n      px: 3,\n      borderColor: \"transparent\"\n    })), __jsx(Heading, {\n      fontSize: \"md\",\n      marginBottom: 2,\n      fontWeight: 500,\n      color: \"#425A70\"\n    }, \"Suite (optional)\"), __jsx(Box, {\n      elevation: 1,\n      borderRadius: 3,\n      marginBottom: 4,\n      width: \"100%\"\n    }, __jsx(Input, {\n      value: addressLine2,\n      onChange: e => this.setState({\n        addressLine2: e.target.value\n      }),\n      placeholder: \"Suite 5\",\n      height: \"32px\",\n      px: 3,\n      borderColor: \"transparent\"\n    })), __jsx(Heading, {\n      fontSize: \"md\",\n      marginBottom: 2,\n      fontWeight: 500,\n      color: \"#425A70\"\n    }, \"Credit or Debit Card Number\"), __jsx(Box, {\n      marginBottom: 4,\n      background: \"#fff\",\n      padding: 2,\n      borderRadius: 3,\n      elevation: 1\n    }, __jsx(CardElement, createOptions(fontSize)))), __jsx(Button, {\n      height: 35,\n      fontSize: 15,\n      width: \"100%\",\n      color: \"#fff\",\n      letterSpacing: \"wider\",\n      fontWeight: 700,\n      textTransform: \"uppercase\",\n      background: \"#1070ca\",\n      borderBottomLeftRadius: \"5\",\n      borderBottomRightRadius: \"5\",\n      borderTopLeftRadius: \"0\",\n      borderTopRightRadius: \"0\",\n      _hover: {\n        opacity: 0.8\n      }\n    }, \"Submit\")));\n  }\n\n}\n\nconst CardForm = injectStripe(_CardForm);\n/* eslint-disable */\n\nclass AddCard extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      renderElements: false\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      renderElements: true\n    });\n  }\n\n  render() {\n    const {\n      renderElements\n    } = this.state;\n    return renderElements && __jsx(StripeProvider, {\n      apiKey: \"pk_test_8DBiS9gU5BhsZZ0KkXllJppT00APOMomgF\"\n    }, __jsx(Elements, null, __jsx(CardForm, {\n      fontSize: 12\n    })));\n  }\n\n}\n/* eslint-disable */\n\n\nexport default AddCard;","map":null,"metadata":{},"sourceType":"module"}