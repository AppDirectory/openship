{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport { IconButton, Pane, Heading, Paragraph, Text, Avatar } from 'evergreen-ui';\nimport Cart from '../../pending/Cart/Cart';\nimport OrderLine from './OrderLine';\n\nvar priceString = function priceString(price, quantity) {\n  var total = Math.round(price * quantity * 100).toString();\n  return \"\".concat(total.substring(0, total.length - 2), \".\").concat(total.substring(total.length - 2));\n};\n\nexport default function OrderListItem(props) {\n  var _useState = useState(props.open),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  useEffect(function () {\n    setOpen(props.open);\n  }, [props.open]); // async function onChange(\n  //   selected,\n  //   updateIndexFunc,\n  //   updateLineFunc,\n  //   createCheckoutFunc,\n  //   setCheckoutFunc,\n  //   errorTextObj\n  // ) {\n  //   updateIndexFunc(selected.length > 0 ? props.index : null);\n  //   updateLineFunc(selected);\n  //   if (errorTextObj !== '{}') {\n  //     setCheckoutFunc(JSON.parse(errorTextObj));\n  //   } else if (selected.length > 0) {\n  //     const checkout = await createCheckoutFunc({\n  //       variables: {\n  //         input: {\n  //           shippingAddress: {\n  //             address1: props.streetAddress1,\n  //             address2: props.streetAddress2 && props.streetAddress2,\n  //             city: props.city,\n  //             province: props.state,\n  //             country: 'US',\n  //             zip: props.zip,\n  //             firstName: props.first_name,\n  //             lastName: props.last_name,\n  //           },\n  //         },\n  //       },\n  //     });\n  //     setCheckoutFunc(checkout.data.createCheckout.checkout);\n  //   } else {\n  //     setCheckoutFunc({});\n  //   }\n  // }\n\n  function onCheckAllChange(_x, _x2, _x3, _x4) {\n    return _onCheckAllChange.apply(this, arguments);\n  }\n\n  function _onCheckAllChange() {\n    _onCheckAllChange = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(e, updateIndexFunc, createCheckoutFunc, errorTextObj) {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              updateIndexFunc(e ? props.index : null);\n\n              if (!(e && errorTextObj === '{}')) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 4;\n              return createCheckoutFunc({\n                shippingAddress: {\n                  address1: props.streetAddress1,\n                  address2: props.streetAddress2 && props.streetAddress2,\n                  city: props.city,\n                  province: props.state,\n                  country: 'US',\n                  zip: props.zip,\n                  firstName: props.first_name,\n                  lastName: props.last_name\n                }\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return _onCheckAllChange.apply(this, arguments);\n  }\n\n  function handleToggleClick(e) {\n    e.stopPropagation();\n    setOpen(function (prevOpen) {\n      return !prevOpen;\n    });\n  }\n\n  function cart(string) {\n    var parsedError = JSON.parse(string);\n    return parsedError.lineItems && React.createElement(Cart, {\n      checkout: parsedError\n    });\n  }\n\n  var id = props.id,\n      orderId = props.orderId,\n      orderName = props.orderName,\n      email = props.email,\n      first_name = props.first_name,\n      last_name = props.last_name,\n      streetAddress1 = props.streetAddress1,\n      streetAddress2 = props.streetAddress2,\n      city = props.city,\n      state = props.state,\n      zip = props.zip,\n      shopName = props.shopName,\n      phone = props.phone,\n      lineItems = props.lineItems,\n      currency = props.currency,\n      totalPrice = props.totalPrice,\n      subTotalPrice = props.subTotalPrice,\n      totalDiscount = props.totalDiscount,\n      totalTax = props.totalTax,\n      createAt = props.createAt,\n      mpCheckout = props.mpCheckout,\n      mpCart = props.mpCart,\n      note = props.note,\n      disabled = props.disabled,\n      buttons = props.buttons,\n      selectedOrderIndex = props.selectedOrderIndex,\n      updateIndex = props.updateIndex,\n      createCheckout = props.createCheckout;\n  return React.createElement(Pane, null, React.createElement(Pane, {\n    display: \"flex\",\n    paddingX: \"1em\",\n    paddingY: \".7em\",\n    onClick: !disabled ? function () {\n      return onCheckAllChange(!selectedOrderIndex, updateIndex, createCheckout, mpCart);\n    } : undefined,\n    pointerEvents: !selectedOrderIndex || selectedOrderIndex === id ? null : 'none',\n    className: !selectedOrderIndex || selectedOrderIndex === id ? 'hover' : null,\n    cursor: !selectedOrderIndex || selectedOrderIndex === id ? 'pointer' : null\n  }, React.createElement(Pane, null, React.createElement(Pane, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    alignItems: \"center\"\n  }, React.createElement(Heading, {\n    size: 400,\n    marginRight: 12\n  }, React.createElement(\"a\", {\n    href: \"https://\".concat(shopName.split('.')[0], \".myshopify.com/admin/orders/\").concat(orderId),\n    target: \"_blank\",\n    rel: \"noopener noreferrer\"\n  }, orderName)), React.createElement(Heading, {\n    size: 100,\n    lineHeight: \"20px\",\n    fontWeight: 500,\n    marginRight: 12\n  }, shopName.split('.')[0]), React.createElement(Heading, {\n    size: 200\n  }, Intl.DateTimeFormat('en-US').format(Date.parse(createAt)))), React.createElement(Paragraph, {\n    size: 300,\n    fontSize: 13,\n    color: \"#425A70\"\n  }, first_name, \" \", last_name, React.createElement(\"br\", null), streetAddress1, \" \", streetAddress2, React.createElement(\"br\", null), city, ', ', state, \" \", zip)), React.createElement(Pane, {\n    display: \"flex\",\n    marginLeft: \"auto\",\n    justifyContent: \"center\" // alignItems=\"center\"\n\n  }, buttons, React.createElement(IconButton, {\n    marginLeft: 3,\n    height: 20,\n    \"aria-expanded\": open,\n    onClick: handleToggleClick,\n    appearance: \"minimal\",\n    icon: \"chevron-down\",\n    iconSize: 18,\n    pointerEvents: \"visible\"\n  }))), open && React.createElement(React.Fragment, null, React.createElement(Pane, {\n    marginLeft: \"-3px\",\n    background: \"#F7F9FD\",\n    border: \"muted\",\n    paddingY: \".7em\",\n    paddingX: \"1em\"\n  }, React.createElement(Pane, {\n    marginBottom: 10\n  }, React.createElement(Text, {\n    size: 400,\n    fontWeight: 500,\n    color: \"#084B8A\"\n  }, \"Line Items\")), lineItems.map(function (a) {\n    return React.createElement(OrderLine, {\n      key: a.id,\n      item: a.node ? a.node : a\n    });\n  })), mpCart && cart(mpCart), mpCheckout && React.createElement(Pane, {\n    marginLeft: \"-3px\",\n    background: \"#F1FAF5\",\n    border: \"muted\",\n    paddingY: \".7em\",\n    paddingX: \"1em\"\n  }, React.createElement(Pane, {\n    marginBottom: 10\n  }, React.createElement(Text, {\n    size: 400,\n    fontWeight: 500,\n    color: \"#00783E\"\n  }, \"Marketplace Order\")), mpCheckout[0].marketLineItems.map(function (a) {\n    return React.createElement(Pane, {\n      background: \"#fff\",\n      border: \"muted\",\n      marginBottom: 5\n    }, React.createElement(Pane, {\n      display: \"flex\",\n      alignItems: \"center\"\n    }, React.createElement(Pane, {\n      height: \"100%\",\n      background: \"white\",\n      borderRight: \"1px solid #EDF0F2\"\n    }, React.createElement(Avatar, {\n      src: a.variantImg,\n      borderRadius: 0,\n      size: 70,\n      backgroundColor: \"white\",\n      border: \"muted\"\n    })), React.createElement(Pane, {\n      padding: 5,\n      paddingLeft: 10\n    }, React.createElement(Heading, {\n      size: 300\n    }, a.title), React.createElement(Pane, {\n      display: \"flex\"\n    }, a.quantity > 1 && React.createElement(Pane, null, React.createElement(Text, {\n      size: 300,\n      color: \"muted\"\n    }, \"$\", a.variantPrice, \" x \", a.quantity)), React.createElement(Heading, {\n      size: 300,\n      marginRight: 10,\n      color: \"green\"\n    }, \"$\", a.variantPrice && priceString(a.variantPrice, a.quantity))))));\n  }))));\n}","map":null,"metadata":{},"sourceType":"module"}