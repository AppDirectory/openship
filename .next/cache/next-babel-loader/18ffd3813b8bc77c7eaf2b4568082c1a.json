{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\n\nfunction _templateObject10() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation deleteOrder($id: ID!) {\\n    deleteOrder(id: $id) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject10 = function _templateObject10() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject9() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation checkoutLineItemsUpdate($checkoutId: ID!, $lineItems: Json!) {\\n    checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\\n      checkout\\n    }\\n  }\\n\"]);\n\n  _templateObject9 = function _templateObject9() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject8() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: Json!) {\\n    checkoutLineItemsRemove(\\n      checkoutId: $checkoutId\\n      lineItemIds: $lineItemIds\\n    ) {\\n      checkout\\n    }\\n  }\\n\"]);\n\n  _templateObject8 = function _templateObject8() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject7() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation checkoutLineItemsAdd($checkoutId: ID!, $lineItems: Json!) {\\n    checkoutLineItemsAdd(checkoutId: $checkoutId, lineItems: $lineItems) {\\n      checkout\\n    }\\n  }\\n\"]);\n\n  _templateObject7 = function _templateObject7() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createCheckout($input: Json!) {\\n    createCheckout(input: $input) {\\n      checkout\\n    }\\n  }\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation purchaseItems($ids: Json!) {\\n    purchaseItems(ids: $ids) {\\n      checkout\\n      cart\\n    }\\n  }\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation upsertMatch($id: ID!) {\\n    upsertMatch(id: $id) {\\n      item\\n    }\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation updateOrder(\\n    $id: ID!\\n    $mpCart: String\\n    $customCart: String\\n    $customCheckout: Json\\n    $zincCart: String\\n    $zincCheckout: Json\\n    $first_name: String\\n    $last_name: String\\n    $streetAddress1: String\\n    $streetAddress2: String\\n    $city: String\\n    $state: String\\n    $zip: String\\n    $processed: Processed\\n  ) {\\n    updateOrder(\\n      id: $id\\n      mpCart: $mpCart\\n      customCart: $customCart\\n      customCheckout: $customCheckout\\n      zincCart: $zincCart\\n      zincCheckout: $zincCheckout\\n      first_name: $first_name\\n      last_name: $last_name\\n      streetAddress1: $streetAddress1\\n      streetAddress2: $streetAddress2\\n      city: $city\\n      state: $state\\n      zip: $zip\\n      processed: $processed\\n    ) {\\n      id\\n      email\\n    }\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  query PAGINATION_QUERY {\\n    ordersConnection(where: { processed: FALSE }) {\\n      aggregate {\\n        count\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query OrdersQuery(\\n    $skip: Int\\n    $first: Int\\n    $orderBy: OrderOrderByInput\\n    $processed: Processed\\n  ) {\\n    orders(\\n      first: $first\\n      skip: $skip\\n      orderBy: $orderBy\\n      where: { processed: $processed }\\n    ) {\\n      id\\n      orderId\\n      orderName\\n      email\\n      first_name\\n      last_name\\n      streetAddress1\\n      streetAddress2\\n      city\\n      state\\n      zip\\n      phone\\n      lineItems\\n      currency\\n      totalPrice\\n      subTotalPrice\\n      totalDiscount\\n      totalTax\\n      createAt\\n      mpCart\\n      mpCheckout\\n      zincCart\\n      zincCheckout\\n      customCheckout\\n      customCart\\n      processed\\n      shopName\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport { useQuery, useMutation } from '@apollo/react-hooks';\nimport { Box, Heading, Spinner, Text, Icon, Button, useToast } from '@chakra-ui/core';\nimport OrderListItem from '../common/orderListItem/OrderListItem';\nimport Find from '../find/Find';\nimport { CURRENT_USER_QUERY } from '../user/User';\nimport { CHANNELS_QUERY, channelsQueryVars } from '../layout/Page';\nimport OrderLine from '../common/orderListItem/OrderLine';\nimport { CardStyle } from '../common/DefaultStyles';\nimport MPCart from './Cart/MPCart';\nimport ZincCart from './Cart/ZincCart';\nimport { front, prodFront } from '../../config';\n\nfunction placeZincOrder(data, token, updateOrderFunc) {\n  var response, res, update;\n  return _regeneratorRuntime.async(function placeZincOrder$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(false ? front : prodFront, \"/api/zinc/purchase?token=\").concat(token), {\n            credentials: 'same-origin',\n            mode: 'cors',\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-type': 'application/json',\n              'X-Requested-With': 'Fetch'\n            },\n            body: JSON.stringify({\n              data: data\n            })\n          }));\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          res = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(updateOrderFunc({\n            variables: {\n              id: data.client_notes.os_order_id,\n              zincCheckout: res,\n              processed: 'TRUE'\n            }\n          }));\n\n        case 9:\n          update = _context.sent;\n          console.log('first2', res);\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          console.log('error', _context.t0);\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]], Promise);\n}\n\nfunction placeCustomOrder(cart, id, updateOrderFunc) {\n  var cartObj, cartJson, response, res, update;\n  return _regeneratorRuntime.async(function placeCustomOrder$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          cartObj = JSON.parse(cart);\n          cartObj.pId = id;\n          cartJson = JSON.stringify(cartObj);\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(fetch(\"\".concat(false ? front : prodFront, \"/api/shopify/purchase\"), {\n            credentials: 'same-origin',\n            mode: 'cors',\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-type': 'application/json',\n              'X-Requested-With': 'Fetch'\n            },\n            body: cartJson\n          }));\n\n        case 6:\n          response = _context2.sent;\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 9:\n          res = _context2.sent;\n          console.log(res); // console.log(\"response received\");\n\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(updateOrderFunc({\n            variables: {\n              id: id,\n              customCheckout: res,\n              processed: 'TRUE'\n            }\n          }).then(function (data) {// console.log(data, \"after update\");\n            // forceUpdate();\n          }));\n\n        case 13:\n          update = _context2.sent;\n          _context2.next = 19;\n          break;\n\n        case 16:\n          _context2.prev = 16;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.log('error', _context2.t0);\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 16]], Promise);\n}\n\nexport var ORDER_QUERY = gql(_templateObject());\nexport var PAGINATION_QUERY = gql(_templateObject2());\nvar UPDATE_ORDER_MUTATION = gql(_templateObject3());\nvar UPSERT_MATCH_MUTATION = gql(_templateObject4());\nvar PURCHASE_ORDER_MUTATION = gql(_templateObject5());\nvar CREATE_CHECKOUT_MUTATION = gql(_templateObject6());\nvar CHECKOUT_ADD_MUTATION = gql(_templateObject7());\nvar CHECKOUT_REMOVE_MUTATION = gql(_templateObject8());\nvar CHECKOUT_UPDATE_MUTATION = gql(_templateObject9());\nvar DELETE_ORDER = gql(_templateObject10());\nvar Layout = {\n  flex: '1 1 10rem',\n  marginLeft: '2rem',\n  marginTop: '2rem'\n};\n\nfunction PendingOrders() {\n  var _useState = useState(null),\n      selectedOrderIndex = _useState[0],\n      setSelectedOrderIndex = _useState[1];\n\n  var _useState2 = useState(0),\n      skip = _useState2[0],\n      setSkip = _useState2[1];\n\n  var _useState3 = useState('createdAt_ASC'),\n      orderBy = _useState3[0],\n      setOrderBy = _useState3[1];\n\n  var _useState4 = useState(100),\n      firstQ = _useState4[0],\n      setFirstQ = _useState4[1];\n\n  var _useState5 = useState(false),\n      open = _useState5[0],\n      setOpen = _useState5[1];\n\n  var _useState6 = useState(false),\n      cartLoading = _useState6[0],\n      setCartLoading = _useState6[1];\n\n  var _useState7 = useState(null),\n      processingOrder = _useState7[0],\n      setProcessingOrder = _useState7[1];\n\n  var toast = useToast();\n\n  var _useQuery = useQuery(CURRENT_USER_QUERY),\n      me = _useQuery.data.me;\n\n  var allOrders = useQuery(ORDER_QUERY, {\n    variables: {\n      skip: skip,\n      first: firstQ,\n      orderBy: orderBy,\n      processed: 'FALSE'\n    }\n  });\n  var allChannels = useQuery(CHANNELS_QUERY, {\n    variables: channelsQueryVars\n  });\n  var channelsData = allChannels.data,\n      channelsError = allChannels.error,\n      channelsLoading = allChannels.loading;\n  var pagination = useQuery(PAGINATION_QUERY);\n\n  var _useMutation = useMutation(DELETE_ORDER, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deleteOrder = _useMutation2[0];\n\n  var _useMutation3 = useMutation(PURCHASE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 2),\n      purchaseOrder = _useMutation4[0],\n      _useMutation4$ = _useMutation4[1],\n      purchaseOrderLoading = _useMutation4$.loading,\n      purchaseOrderError = _useMutation4$.error;\n\n  var _useMutation5 = useMutation(UPDATE_ORDER_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation6 = _slicedToArray(_useMutation5, 2),\n      updateOrder = _useMutation6[0],\n      updateOrderLoading = _useMutation6[1].loading;\n\n  var _useMutation7 = useMutation(CREATE_CHECKOUT_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation8 = _slicedToArray(_useMutation7, 1),\n      createCheckout = _useMutation8[0];\n\n  var _useMutation9 = useMutation(CHECKOUT_REMOVE_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation10 = _slicedToArray(_useMutation9, 1),\n      checkoutLineItemsRemove = _useMutation10[0];\n\n  var _useMutation11 = useMutation(CHECKOUT_UPDATE_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation12 = _slicedToArray(_useMutation11, 1),\n      checkoutLineItemsUpdate = _useMutation12[0];\n\n  var _useMutation13 = useMutation(CHECKOUT_ADD_MUTATION, {\n    refetchQueries: [{\n      query: ORDER_QUERY,\n      variables: {\n        skip: skip,\n        first: firstQ,\n        orderBy: orderBy,\n        processed: 'FALSE'\n      }\n    }, {\n      query: PAGINATION_QUERY\n    }]\n  }),\n      _useMutation14 = _slicedToArray(_useMutation13, 1),\n      checkoutLineItemsAdd = _useMutation14[0];\n\n  var _useMutation15 = useMutation(UPSERT_MATCH_MUTATION),\n      _useMutation16 = _slicedToArray(_useMutation15, 1),\n      upsertMatch = _useMutation16[0];\n\n  function _currentOrder(arg) {\n    return _regeneratorRuntime.async(function _currentOrder$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            setSelectedOrderIndex(arg);\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function overwrite(id) {\n    var upsertMatchRes;\n    return _regeneratorRuntime.async(function overwrite$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setCartLoading(true);\n            _context4.next = 3;\n            return _regeneratorRuntime.awrap(upsertMatch({\n              variables: {\n                id: id\n              }\n            }));\n\n          case 3:\n            upsertMatchRes = _context4.sent;\n            toast({\n              position: 'top-right',\n              title: 'Line items have been matched to cart items',\n              status: 'success',\n              duration: 2000,\n              isClosable: true\n            }); // setSelectedOrderIndex(null);\n\n            setCartLoading(false);\n\n          case 6:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function doPurchase(ids) {\n    var res;\n    return _regeneratorRuntime.async(function doPurchase$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return _regeneratorRuntime.awrap(purchaseOrder({\n              variables: {\n                ids: ids\n              }\n            }));\n\n          case 2:\n            res = _context5.sent;\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function createCheck(input, orderID) {\n    var varCheck, newCheck, res;\n    return _regeneratorRuntime.async(function createCheck$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(createCheckout({\n              variables: {\n                input: input\n              }\n            }));\n\n          case 2:\n            varCheck = _context6.sent;\n            newCheck = varCheck.data.createCheckout.checkout;\n            _context6.next = 6;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: orderID,\n                mpCart: JSON.stringify(newCheck)\n              }\n            }));\n\n          case 6:\n            res = _context6.sent;\n\n          case 7:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function createCustomCheck(input, orderID, createCheckoutFunc, updateOrderFunc, url, key) {\n    var query, variables, checkout, newCheck, res;\n    return _regeneratorRuntime.async(function createCustomCheck$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            query = \"\\n    mutation checkoutCreate($input: CheckoutCreateInput!)\\n    {\\n      checkoutCreate(input: $input) {\\n        userErrors {\\n          message\\n          field\\n        }\\n        checkout {\\n          id\\n          email\\n          webUrl\\n          subtotalPrice\\n          totalTax\\n          totalPrice\\n          shippingAddress{\\n            firstName\\n            lastName\\n            address1\\n            address2\\n            city\\n            provinceCode\\n            zip\\n            country\\n          }\\n          lineItems (first:250) {\\n            pageInfo {\\n              hasNextPage\\n              hasPreviousPage\\n            }\\n            edges {\\n              node {\\n                id\\n                title\\n                variant {\\n                  id\\n                  title\\n                  image {\\n                    src\\n                  }\\n                  price\\n                }\\n                quantity\\n              }\\n            }\\n          }\\n        }\\n      }\\n      }\\n    \";\n            variables = {\n              input: input\n            };\n            _context7.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://\".concat(url, \".myshopify.com/api/graphql\"), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Storefront-Access-Token': key\n              }\n            }).then(function (response) {\n              return response.json();\n            }));\n\n          case 4:\n            checkout = _context7.sent;\n            console.log(checkout);\n            newCheck = checkout.data.checkoutCreate.checkout;\n            _context7.next = 9;\n            return _regeneratorRuntime.awrap(updateOrderFunc({\n              variables: {\n                id: selectedOrderIndex,\n                customCart: JSON.stringify(newCheck)\n              }\n            }));\n\n          case 9:\n            res = _context7.sent;\n\n          case 10:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function addCustomVariant(id, quantity, checkoutID, checkoutLineItemsAddFunc, updateOrderFunc, url, key) {\n    var query, variables, checkout, newCheck, res;\n    return _regeneratorRuntime.async(function addCustomVariant$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            toast({\n              position: 'top-right',\n              title: 'custom checkout does exist',\n              status: 'success',\n              duration: 2000,\n              isClosable: true\n            });\n            query = \"\\n    mutation checkoutLineItemsAdd($lineItems: [CheckoutLineItemInput!]!, $checkoutId: ID!) {\\n      checkoutLineItemsAdd(lineItems: $lineItems, checkoutId: $checkoutId) {\\n        userErrors {\\n          message\\n          field\\n        }\\n        checkout {\\n          id\\n          email\\n          webUrl\\n          subtotalPrice\\n          totalTax\\n          totalPrice\\n          shippingAddress {\\n            address1\\n            address2\\n            city\\n            countryCodeV2\\n            provinceCode\\n            zip\\n            firstName\\n            lastName\\n          }\\n          lineItems (first:250) {\\n            pageInfo {\\n              hasNextPage\\n              hasPreviousPage\\n            }\\n            edges {\\n              node {\\n                id\\n                title\\n                variant {\\n                  id\\n                  title\\n                  image {\\n                    src\\n                  }\\n                  price\\n                }\\n                quantity\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n    \";\n            variables = {\n              checkoutId: checkoutID,\n              lineItems: [{\n                variantId: id,\n                quantity: quantity\n              }]\n            };\n            _context8.next = 5;\n            return _regeneratorRuntime.awrap(fetch(\"https://\".concat(url, \".myshopify.com/api/graphql\"), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Storefront-Access-Token': key\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 5:\n            checkout = _context8.sent;\n            console.log(checkout);\n            newCheck = checkout.data.checkoutLineItemsAdd.checkout;\n            _context8.next = 10;\n            return _regeneratorRuntime.awrap(updateOrderFunc({\n              variables: {\n                id: selectedOrderIndex,\n                customCart: JSON.stringify(newCheck)\n              }\n            }));\n\n          case 10:\n            res = _context8.sent;\n\n          case 11:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function addVariant(id, quantity, checkoutID) {\n    var varCheck, newCheck, res;\n    return _regeneratorRuntime.async(function addVariant$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            toast({\n              position: 'top-right',\n              title: 'checkout does exist',\n              status: 'success',\n              duration: 2000,\n              isClosable: true\n            });\n            _context9.next = 3;\n            return _regeneratorRuntime.awrap(checkoutLineItemsAdd({\n              variables: {\n                checkoutId: checkoutID,\n                lineItems: [{\n                  variantId: id,\n                  quantity: quantity\n                }]\n              }\n            }));\n\n          case 3:\n            varCheck = _context9.sent;\n            newCheck = varCheck.data.checkoutLineItemsAdd.checkout;\n            _context9.next = 7;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                mpCart: JSON.stringify(newCheck)\n              }\n            }));\n\n          case 7:\n            res = _context9.sent;\n\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function _addZincItem(id, quantity, title, src, price, cart) {\n    var find, newQ, res, _res;\n\n    return _regeneratorRuntime.async(function addZincItem$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            find = cart && cart.products && cart.products.length && cart.products.find(function (obj) {\n              return obj.product_id === id;\n            });\n\n            if (!(cart && cart.products && cart.products.length && find !== undefined)) {\n              _context10.next = 12;\n              break;\n            }\n\n            console.log(true);\n            console.log(find);\n            newQ = find.quantity + quantity;\n            find.quantity = newQ;\n            console.log(find);\n            _context10.next = 9;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                zincCart: JSON.stringify({\n                  products: [find].concat(_toConsumableArray(cart.products.filter(function (a) {\n                    return a.product_id !== id;\n                  })))\n                })\n              }\n            }));\n\n          case 9:\n            res = _context10.sent;\n            _context10.next = 16;\n            break;\n\n          case 12:\n            console.log(false);\n            _context10.next = 15;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                zincCart: JSON.stringify({\n                  products: [{\n                    product_id: id,\n                    quantity: quantity,\n                    title: title,\n                    price: price,\n                    src: src\n                  }].concat(_toConsumableArray(cart && cart.products && cart.products.length ? cart.products : []))\n                })\n              }\n            }));\n\n          case 15:\n            _res = _context10.sent;\n\n          case 16:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function removeMPItem(lineItemIds, checkoutID) {\n    var varCheck, res;\n    return _regeneratorRuntime.async(function removeMPItem$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            _context11.next = 2;\n            return _regeneratorRuntime.awrap(checkoutLineItemsRemove({\n              variables: {\n                checkoutId: checkoutID,\n                lineItemIds: lineItemIds\n              }\n            }));\n\n          case 2:\n            varCheck = _context11.sent;\n            _context11.next = 5;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                mpCart: JSON.stringify(varCheck.data.checkoutLineItemsRemove.checkout)\n              }\n            }));\n\n          case 5:\n            res = _context11.sent;\n\n          case 6:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function removeCustomItem(lineItemIds, checkoutID, key, url) {\n    var query, variables, checkout, res;\n    return _regeneratorRuntime.async(function removeCustomItem$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            query = \"\\n    mutation checkoutLineItemsRemove($checkoutId: ID!, $lineItemIds: [ID!]!) {\\n      checkoutLineItemsRemove(checkoutId: $checkoutId, lineItemIds: $lineItemIds) {\\n        userErrors {\\n          message\\n          field\\n        }\\n        checkout {\\n          id\\n          email\\n          webUrl\\n          subtotalPrice\\n          totalTax\\n          totalPrice\\n          shippingAddress {\\n            address1\\n            address2\\n            city\\n            countryCodeV2\\n            provinceCode\\n            zip\\n            firstName\\n            lastName\\n          }\\n          lineItems (first:250) {\\n            pageInfo {\\n              hasNextPage\\n              hasPreviousPage\\n            }\\n            edges {\\n              node {\\n                id\\n                title\\n                variant {\\n                  id\\n                  title\\n                  image {\\n                    src\\n                  }\\n                  price\\n                }\\n                quantity\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n    \";\n            variables = {\n              checkoutId: checkoutID,\n              lineItemIds: lineItemIds\n            };\n            _context12.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://\".concat(url, \".myshopify.com/api/graphql\"), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Storefront-Access-Token': key\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 4:\n            checkout = _context12.sent;\n            _context12.next = 7;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                customCart: JSON.stringify(checkout.data.checkoutLineItemsRemove.checkout)\n              }\n            }));\n\n          case 7:\n            res = _context12.sent;\n\n          case 8:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function updateMPItem(lineItems, checkoutID) {\n    var varCheck, res;\n    return _regeneratorRuntime.async(function updateMPItem$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            _context13.next = 2;\n            return _regeneratorRuntime.awrap(checkoutLineItemsUpdate({\n              variables: {\n                checkoutId: checkoutID,\n                lineItems: lineItems\n              }\n            }));\n\n          case 2:\n            varCheck = _context13.sent;\n            _context13.next = 5;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                mpCart: JSON.stringify(varCheck.data.checkoutLineItemsUpdate.checkout)\n              }\n            }));\n\n          case 5:\n            res = _context13.sent;\n\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function updateCustomItem(lineItems, checkoutID, key, url) {\n    var query, variables, checkout, res;\n    return _regeneratorRuntime.async(function updateCustomItem$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            query = \"\\n    mutation checkoutLineItemsUpdate ($checkoutId: ID!, $lineItems: [CheckoutLineItemUpdateInput!]!) {\\n      checkoutLineItemsUpdate(checkoutId: $checkoutId, lineItems: $lineItems) {\\n        userErrors {\\n          message\\n          field\\n        }\\n        checkout {\\n          id\\n          email\\n          webUrl\\n          subtotalPrice\\n          totalTax\\n          totalPrice\\n          shippingAddress {\\n            address1\\n            address2\\n            city\\n            countryCodeV2\\n            provinceCode\\n            zip\\n            firstName\\n            lastName\\n          }\\n          lineItems (first:250) {\\n            pageInfo {\\n              hasNextPage\\n              hasPreviousPage\\n            }\\n            edges {\\n              node {\\n                id\\n                title\\n                variant {\\n                  id\\n                  title\\n                  image {\\n                    src\\n                  }\\n                  price\\n                }\\n                quantity\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n    \";\n            variables = {\n              checkoutId: checkoutID,\n              lineItems: lineItems\n            };\n            _context14.next = 4;\n            return _regeneratorRuntime.awrap(fetch(\"https://\".concat(url, \".myshopify.com/api/graphql\"), {\n              method: 'POST',\n              body: JSON.stringify({\n                query: query,\n                variables: variables\n              }),\n              headers: {\n                'Content-Type': 'application/json',\n                'X-Shopify-Storefront-Access-Token': key\n              }\n            }).then(function (res) {\n              return res.json();\n            }));\n\n          case 4:\n            checkout = _context14.sent;\n            _context14.next = 7;\n            return _regeneratorRuntime.awrap(updateOrder({\n              variables: {\n                id: selectedOrderIndex,\n                customCart: JSON.stringify(checkout.data.checkoutLineItemsUpdate.checkout)\n              }\n            }));\n\n          case 7:\n            res = _context14.sent;\n\n          case 8:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function play() {\n    if (firstQ === 1) {\n      setFirstQ(100);\n      setOpen(false);\n      setSkip(0);\n    } else {\n      setFirstQ(1);\n      setOpen(true);\n    } // setSkip(0);\n\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Box, {\n    display: \"flex\",\n    py: 4\n  }, __jsx(Box, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    fontSize: \"2xl\",\n    color: \"text\",\n    fontWeight: 500\n  }, \"Pending Orders\"))), __jsx(Box, {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    marginLeft: \"-2rem\",\n    marginTop: \"-2rem\"\n  }, function () {\n    if (allOrders.loading) return __jsx(React.Fragment, null, __jsx(Box, Layout, __jsx(Box, CardStyle, __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"50vh\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    })))), __jsx(Box, Layout, __jsx(Box, _extends({}, CardStyle, {\n      padding: 3\n    }), __jsx(Box, {\n      p: 2,\n      display: \"flex\",\n      borderLeft: \"3px solid #d9822b\",\n      borderRight: \"1px solid #E2E8F0\",\n      borderTop: \"1px solid #E2E8F0\",\n      borderBottom: \"1px solid #E2E8F0\"\n    }, __jsx(Icon, {\n      name: \"warning-2\",\n      color: \"#d9812a\",\n      mr: 2\n    }), __jsx(Heading, {\n      fontSize: \"sm\",\n      color: \"text\"\n    }, \"Please choose an order or a line item.\")))));\n    if (allOrders.error) return \"Error! \".concat(allOrders.error.message);\n    var orders = allOrders.data.orders;\n    var theOrder = orders.filter(function (order) {\n      return order.id === selectedOrderIndex;\n    })[0];\n    return __jsx(React.Fragment, null, __jsx(Box, Layout, __jsx(Box, CardStyle, __jsx(Box, {\n      display: \"flex\",\n      paddingX: \"1em\",\n      paddingY: \".8em\",\n      alignItems: \"center\"\n    }, function () {\n      var count = pagination.data && pagination.data.ordersConnection ? pagination.data.ordersConnection.aggregate.count : 0;\n      return __jsx(React.Fragment, null, firstQ === 1 ? __jsx(Heading, {\n        fontSize: \"xs\",\n        letterSpacing: \"wider\",\n        textTransform: \"uppercase\",\n        color: \"gray.500\",\n        fontWeight: 400\n      }, \"Order \", skip + 1, \" of \", count) : __jsx(Heading, {\n        fontSize: \"xs\",\n        letterSpacing: \"wider\",\n        textTransform: \"uppercase\",\n        color: \"gray.500\",\n        fontWeight: 400\n      }, count, \" Order\", count !== 1 && 's'), __jsx(Box, {\n        marginLeft: \"auto\",\n        display: \"flex\"\n      }, __jsx(Button, {\n        borderRadius: 3,\n        marginX: 1,\n        px: 2,\n        height: 5,\n        onClick: function onClick() {\n          return setOrderBy(orderBy === 'createdAt_DESC' ? 'createdAt_ASC' : 'createdAt_DESC');\n        }\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        textTransform: \"uppercase\"\n      }, orderBy.split('_')[1])), __jsx(Button, {\n        bg: \"#d4eee2\",\n        color: \"#00783e\",\n        _hover: {\n          bg: '#bfe3d2'\n        },\n        borderRadius: 3,\n        marginX: 1,\n        px: 2,\n        height: 5,\n        onClick: function onClick() {\n          return play();\n        }\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        textTransform: \"uppercase\"\n      }, firstQ !== 1 ? 'Play' : 'Show All')), firstQ === 1 ? __jsx(Button, {\n        background: \"#fbe6a2\",\n        color: \"#7e6514\",\n        _hover: {\n          bg: '#f0d98d'\n        },\n        borderRadius: 3,\n        ml: 1,\n        px: 2,\n        height: 5,\n        onClick: function onClick() {\n          return setSkip(skip + 1);\n        } // disabled={firstQ !== 1 || skip + 1 === count}\n\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        marginRight: 2,\n        textTransform: \"uppercase\"\n      }, \"Skip\"), __jsx(Icon, {\n        size: 2,\n        name: \"arrow-right\"\n      })) : __jsx(Button, {\n        borderRadius: 3,\n        marginX: 1,\n        px: 2,\n        height: 5,\n        bg: \"#ddebf7\",\n        color: \"#1070ca\",\n        _hover: {\n          bg: '#c0d8ed'\n        },\n        disabled: firstQ !== 1 || skip + 1 === count,\n        isLoading: purchaseOrderLoading\n      }, __jsx(Heading, {\n        fontSize: \"xs\",\n        fontWeight: 700,\n        textTransform: \"uppercase\"\n      }, \"Process\"))));\n    }()), orders.length ? orders.map(function (order) {\n      return __jsx(Box, {\n        key: order.id\n      }, __jsx(Box, {\n        opacity: processingOrder === order.id && '0.2',\n        width: \"100%\",\n        height: \"100%\",\n        position: \"relative\"\n      }, processingOrder === order.id && __jsx(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        position: \"absolute\",\n        width: \"100%\",\n        height: \"100%\"\n      }, __jsx(Spinner, {\n        thickness: \"4px\",\n        speed: \"0.65s\",\n        emptyColor: \"gray.200\",\n        color: \"blue.500\",\n        size: \"xl\"\n      })), __jsx(Box, {\n        borderTop: \"0.1rem solid #dfe3e8\"\n      }, __jsx(Box, {\n        borderLeft: \"3px solid \".concat(selectedOrderIndex === order.id ? '#007489' : 'transparent')\n      }, __jsx(OrderListItem, _extends({}, order, {\n        updateIndex: function updateIndex(arg) {\n          return _currentOrder(arg);\n        },\n        open: open,\n        createCheckout: function createCheckout(a) {\n          return createCheck(a, order.id);\n        },\n        key: order.id,\n        index: order.id,\n        selectedOrderIndex: selectedOrderIndex,\n        disabled: !(!selectedOrderIndex || selectedOrderIndex === order.id),\n        buttons: __jsx(React.Fragment, null, __jsx(Button, {\n          \"aria-label\": \"delete order\",\n          height: \"1.3rem\",\n          minWidth: \"1.3rem\",\n          bg: \"transparent\",\n          color: \"#66788a\",\n          px: 0,\n          mx: 1,\n          onClick: function _callee(e) {\n            var res;\n            return _regeneratorRuntime.async(function _callee$(_context15) {\n              while (1) {\n                switch (_context15.prev = _context15.next) {\n                  case 0:\n                    e.stopPropagation();\n                    setProcessingOrder(order.id);\n                    _context15.next = 4;\n                    return _regeneratorRuntime.awrap(deleteOrder({\n                      variables: {\n                        id: order.id\n                      }\n                    }));\n\n                  case 4:\n                    res = _context15.sent;\n                    setProcessingOrder(null);\n\n                  case 6:\n                  case \"end\":\n                    return _context15.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }\n        }, __jsx(Icon, {\n          name: \"small-close\",\n          size: 4\n        })), __jsx(Button, {\n          \"aria-label\": \"show line-items\",\n          height: \"1.3rem\",\n          minWidth: \"1.3rem\",\n          bg: \"transparent\",\n          color: \"#66788a\",\n          px: 0,\n          mx: 1,\n          onClick: function _callee2(e) {\n            return _regeneratorRuntime.async(function _callee2$(_context16) {\n              while (1) {\n                switch (_context16.prev = _context16.next) {\n                  case 0:\n                    e.stopPropagation();\n                    setProcessingOrder(order.id);\n                    setSelectedOrderIndex(null);\n\n                    if (!(JSON.parse(order.customCart).lineItems.edges.length > 0)) {\n                      _context16.next = 9;\n                      break;\n                    }\n\n                    toast({\n                      position: 'top-right',\n                      title: 'custom called',\n                      status: 'success',\n                      duration: 2000,\n                      isClosable: true\n                    });\n                    _context16.next = 7;\n                    return _regeneratorRuntime.awrap(placeCustomOrder(order.customCart, order.id, updateOrder.mutation // forceUpdate\n                    ));\n\n                  case 7:\n                    _context16.next = 21;\n                    break;\n\n                  case 9:\n                    if (!(JSON.parse(order.mpCart).lineItems.edges.length > 0)) {\n                      _context16.next = 14;\n                      break;\n                    }\n\n                    _context16.next = 12;\n                    return _regeneratorRuntime.awrap(doPurchase([order.id]));\n\n                  case 12:\n                    _context16.next = 21;\n                    break;\n\n                  case 14:\n                    if (!(JSON.parse(order.zincCart).products.length > 0)) {\n                      _context16.next = 20;\n                      break;\n                    }\n\n                    toast({\n                      position: 'top-right',\n                      title: 'zinc called',\n                      status: 'success',\n                      duration: 2000,\n                      isClosable: true\n                    });\n                    _context16.next = 18;\n                    return _regeneratorRuntime.awrap(placeZincOrder({\n                      retailer: 'amazon',\n                      products: JSON.parse(order.zincCart).products,\n                      shipping_address: {\n                        first_name: order.first_name,\n                        last_name: order.last_name,\n                        address_line1: order.streetAddress1,\n                        address_line2: order.streetAddress2,\n                        zip_code: order.zip,\n                        city: order.city,\n                        state: order.state,\n                        country: 'US',\n                        phone_number: '281-337-9862'\n                      },\n                      addax: true,\n                      is_gift: true,\n                      gift_message: \"Here is your package, \".concat(order.first_name, \"! Enjoy!\"),\n                      shipping: {\n                        order_by: 'price',\n                        max_days: 5,\n                        max_price: 1000\n                      },\n                      webhooks: {\n                        request_succeeded: 'https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c',\n                        request_failed: 'https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c',\n                        tracking_obtained: 'https://webhook.site/3d977945-5b89-4734-8a64-146d321a100c'\n                      },\n                      client_notes: {\n                        shopify_order_id: order.orderId,\n                        os_order_id: order.id\n                      }\n                    }, me.zincToken, updateOrder));\n\n                  case 18:\n                    _context16.next = 21;\n                    break;\n\n                  case 20:\n                    toast({\n                      position: 'top-right',\n                      title: 'Not called',\n                      status: 'success',\n                      duration: 2000,\n                      isClosable: true\n                    });\n\n                  case 21:\n                    setProcessingOrder(null);\n\n                  case 22:\n                  case \"end\":\n                    return _context16.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          }\n        }, __jsx(Icon, {\n          name: \"check\",\n          size: 3\n        })))\n      }))))));\n    }) : __jsx(Box, {\n      backgroundColor: \"gray.100\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      flexDirection: \"column\"\n    }, __jsx(Heading, {\n      margin: \"1em\",\n      fontSize: \"xl\",\n      fontWeight: 600,\n      color: \"text\"\n    }, \"Your pending orders will appear here.\")))), __jsx(Box, Layout, selectedOrderIndex ? __jsx(Box, null, __jsx(Box, _extends({}, CardStyle, {\n      padding: 15,\n      opacity: cartLoading && '0.2',\n      width: \"100%\",\n      height: \"100%\"\n    }), cartLoading && __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      margin: \"auto\"\n    }, __jsx(Box, {\n      position: \"fixed\"\n    }, __jsx(Spinner, {\n      thickness: \"4px\",\n      speed: \"0.65s\",\n      emptyColor: \"gray.200\",\n      color: \"blue.500\",\n      size: \"xl\"\n    }))), __jsx(Box, {\n      display: \"flex\",\n      justifyContent: \"space-between\",\n      fontWeight: 600,\n      background: \"white\"\n    }, __jsx(React.Fragment, null, __jsx(Heading, {\n      fontSize: \"md\",\n      color: \"text\",\n      mb: 1\n    }, theOrder.orderName), __jsx(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      marginLeft: 4\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      fontWeight: 500,\n      marginX: 2,\n      color: \"#7B8B9A\",\n      cursor: \"pointer\",\n      onClick: function onClick() {\n        // setSelectedLineIndex([]);\n        setSelectedOrderIndex(null);\n      }\n    }, \"Empty\"), __jsx(Button, {\n      borderRadius: 3,\n      marginX: 1,\n      px: 2,\n      height: 5,\n      bg: \"#ddebf7\",\n      color: \"#1070ca\",\n      _hover: {\n        bg: '#c0d8ed'\n      },\n      onClick: function onClick() {\n        return overwrite(theOrder.id);\n      },\n      disabled: theOrder.mpCart && theOrder.mpCart.lineItems && theOrder.mpCart.lineItems.edges.length === 0 || !theOrder.mpCart\n    }, __jsx(Heading, {\n      fontSize: \"xs\",\n      fontWeight: 700,\n      textTransform: \"uppercase\"\n    }, \"Match\"))))), __jsx(Box, null, __jsx(Box, {\n      display: \"flex\"\n    }, __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      marginRight: 1,\n      lineHeight: \"short\"\n    }, theOrder.first_name), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.last_name)), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.streetAddress1), theOrder.streetAddress2 && __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.streetAddress2), __jsx(Box, {\n      display: \"flex\"\n    }, __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      marginRight: 1,\n      lineHeight: \"short\"\n    }, theOrder.city), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      marginRight: 2,\n      lineHeight: \"short\"\n    }, theOrder.state), __jsx(Text, {\n      contenteditable: \"true\",\n      fontSize: \"sm\",\n      lineHeight: \"short\"\n    }, theOrder.zip))), __jsx(Box, {\n      paddingTop: 2\n    }, __jsx(Box, {\n      marginLeft: \"-3px\",\n      background: \"#F7F9FD\",\n      paddingY: \".7em\",\n      paddingX: \"1em\",\n      border: \"1px solid #edf0f2\"\n    }, __jsx(Box, {\n      marginBottom: 2\n    }, __jsx(Text, {\n      fontSize: \"sm\",\n      fontWeight: 500,\n      color: \"#084B8A\"\n    }, \"Line Items\")), theOrder.lineItems.map(function (a) {\n      return __jsx(OrderLine, {\n        key: a.id,\n        item: a.node ? a.node : a\n      });\n    }))), channelsData.channels.filter(function (channel) {\n      return channel.type === 'MARKETPLACE';\n    }).length > 0 && __jsx(MPCart, {\n      cartName: \"Marketplace\",\n      cart: JSON.parse(theOrder.mpCart),\n      removeItem: function removeItem(a) {\n        return removeMPItem(a, JSON.parse(theOrder.mpCart).id);\n      },\n      checkoutLineItemsUpdate: function checkoutLineItemsUpdate(a) {\n        return updateMPItem(a, JSON.parse(theOrder.mpCart).id);\n      },\n      loading: updateOrderLoading\n    }), channelsData.channels.filter(function (channel) {\n      return channel.type === 'SHOPIFY';\n    }).length > 0 && __jsx(MPCart, {\n      cartName: \"BN\",\n      background: \"#F1FBFC\",\n      color: \"#007489\",\n      cart: JSON.parse(theOrder.customCart),\n      removeItem: function removeItem(a) {\n        return removeCustomItem(a, JSON.parse(theOrder.customCart).id, channelsData.channels.filter(function (channel) {\n          return channel.type === 'SHOPIFY';\n        })[0].settings.key, channelsData.channels.filter(function (channel) {\n          return channel.type === 'SHOPIFY';\n        })[0].settings.shopURL);\n      },\n      checkoutLineItemsUpdate: function checkoutLineItemsUpdate(a) {\n        return updateCustomItem(a, JSON.parse(theOrder.customCart).id, channelsData.channels.filter(function (channel) {\n          return channel.type === 'SHOPIFY';\n        })[0].settings.key, channelsData.channels.filter(function (channel) {\n          return channel.type === 'SHOPIFY';\n        })[0].settings.shopURL);\n      },\n      loading: updateOrderLoading\n    }), channelsData.channels.filter(function (channel) {\n      return channel.type === 'ZINC';\n    }).length > 0 && __jsx(ZincCart, {\n      cart: JSON.parse(theOrder.zincCart),\n      removeItem: function _callee3(productID) {\n        var res;\n        return _regeneratorRuntime.async(function _callee3$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return _regeneratorRuntime.awrap(updateOrder({\n                  variables: {\n                    id: selectedOrderIndex,\n                    zincCart: JSON.stringify({\n                      products: JSON.parse(theOrder.zincCart).products.filter(function (a) {\n                        return a.product_id !== productID;\n                      })\n                    })\n                  }\n                }));\n\n              case 2:\n                res = _context17.sent;\n\n              case 3:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      checkoutLineItemsUpdate: function _callee4(productID, quantity) {\n        var res, find, newQ, _res2;\n\n        return _regeneratorRuntime.async(function _callee4$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                if (!(quantity === 0)) {\n                  _context18.next = 6;\n                  break;\n                }\n\n                _context18.next = 3;\n                return _regeneratorRuntime.awrap(updateOrder({\n                  variables: {\n                    id: selectedOrderIndex,\n                    zincCart: JSON.stringify({\n                      products: JSON.parse(theOrder.zincCart).products.filter(function (a) {\n                        return a.product_id !== productID;\n                      })\n                    })\n                  }\n                }));\n\n              case 3:\n                res = _context18.sent;\n                _context18.next = 12;\n                break;\n\n              case 6:\n                find = JSON.parse(theOrder.zincCart).products.find(function (obj) {\n                  return obj.product_id === productID;\n                });\n                newQ = quantity;\n                find.quantity = newQ;\n                _context18.next = 11;\n                return _regeneratorRuntime.awrap(updateOrder({\n                  variables: {\n                    id: selectedOrderIndex,\n                    zincCart: JSON.stringify({\n                      products: [find].concat(_toConsumableArray(JSON.parse(theOrder.zincCart).products.filter(function (a) {\n                        return a.product_id !== productID;\n                      })))\n                    })\n                  }\n                }));\n\n              case 11:\n                _res2 = _context18.sent;\n\n              case 12:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      loading: updateOrderLoading\n    }))) : __jsx(Box, _extends({}, CardStyle, {\n      padding: 3\n    }), __jsx(Box, {\n      p: 2,\n      display: \"flex\",\n      borderLeft: \"3px solid #d9822b\",\n      borderRight: \"1px solid #E2E8F0\",\n      borderTop: \"1px solid #E2E8F0\",\n      borderBottom: \"1px solid #E2E8F0\"\n    }, __jsx(Icon, {\n      name: \"warning-2\",\n      color: \"#d9812a\",\n      mr: 2\n    }), __jsx(Heading, {\n      fontSize: \"sm\",\n      color: \"text\"\n    }, \"Please choose an order or a line item.\"))), __jsx(Find, {\n      headerSize: 600,\n      atcDisabled: !theOrder,\n      addMPItem: function addMPItem(a, b) {\n        if (theOrder.mpCart && JSON.parse(theOrder.mpCart).id) {\n          addVariant(a, b, JSON.parse(theOrder.mpCart).id);\n        } else {\n          toast({\n            position: 'top-right',\n            title: 'checkout does not exist',\n            status: 'success',\n            duration: 2000,\n            isClosable: true\n          });\n          createCheck({\n            shippingAddress: {\n              address1: theOrder.streetAddress1,\n              address2: theOrder.streetAddress2 && theOrder.streetAddress2,\n              city: theOrder.city,\n              province: theOrder.state,\n              country: 'US',\n              zip: theOrder.zip,\n              firstName: theOrder.first_name,\n              lastName: theOrder.last_name\n            },\n            lineItems: [{\n              variantId: a,\n              quantity: b\n            }]\n          }, theOrder.id);\n        }\n      },\n      addCustomItem: function addCustomItem(a, b, url, key) {\n        if (theOrder.customCart && JSON.parse(theOrder.customCart).id) {\n          addCustomVariant(a, b, JSON.parse(theOrder.customCart).id, checkoutLineItemsAdd, updateOrder, url, key);\n        } else {\n          toast({\n            position: 'top-right',\n            title: 'checkout does not exist',\n            status: 'success',\n            duration: 2000,\n            isClosable: true\n          });\n          createCustomCheck({\n            shippingAddress: {\n              address1: theOrder.streetAddress1,\n              address2: theOrder.streetAddress2 && theOrder.streetAddress2,\n              city: theOrder.city,\n              province: theOrder.state,\n              country: 'US',\n              zip: theOrder.zip,\n              firstName: theOrder.first_name,\n              lastName: theOrder.last_name\n            },\n            lineItems: [{\n              variantId: a,\n              quantity: b\n            }],\n            email: 'junaidkabani@windstream.net'\n          }, theOrder.id, createCheckout, updateOrder, url, key);\n        }\n      },\n      addZincItem: function addZincItem(a, b, c, d, e) {\n        return _addZincItem(a, b, c, d, e, JSON.parse(theOrder.zincCart));\n      }\n    })));\n  }()));\n}\n\nexport default PendingOrders;","map":null,"metadata":{},"sourceType":"module"}