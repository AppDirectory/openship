{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_CHANNEL_MUTATION(\\n    $name: String!\\n    $type: ChannelType!\\n    $settings: Json!\\n  ) {\\n    createChannel(name: $name, type: $type, settings: $settings) {\\n      id\\n      type\\n      name\\n      createdAt\\n      settings\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($first: Int!, $skip: Int!) {\\n    channels(orderBy: createdAt_ASC, first: $first, skip: $skip) {\\n      id\\n      type\\n      name\\n      createdAt\\n      settings\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useState } from \"react\";\nimport Link from \"next/link\";\nimport { withRouter } from \"next/router\";\nimport { Menu, Icon, Heading, Pane, TextInputField, Popover, IconButton, Tablist, Tab, toaster } from \"evergreen-ui\";\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport Button from \"../common/Button\";\nimport { shopsQuery, shopsQueryVars } from \"../shops/ShopList\";\nimport Signout from \"../user/Signout\";\nimport { front, prodFront } from \"../../config\";\nexport var channelsQuery = gql(_templateObject());\nexport var channelsQueryVars = {\n  skip: 0,\n  first: 10\n};\nvar CREATE_CHANNEL_MUTATION = gql(_templateObject2());\n\nvar Divider = __jsx(Pane, {\n  flexShrink: 0,\n  height: 3,\n  backgroundColor: \"rgb(44, 71, 118)\",\n  borderRadius: 1,\n  marginY: 5,\n  marginX: 12\n});\n\nvar option = function option(name, options, update, selected) {\n  return __jsx(Pane, {\n    marginBottom: 10,\n    marginRight: 10\n  }, __jsx(Heading, {\n    size: 500,\n    fontSize: \"14px\",\n    fontWeight: 500,\n    marginBottom: 8\n  }, name), __jsx(Tablist, null, options.map(function (a, index) {\n    return __jsx(Tab, {\n      key: a,\n      id: a,\n      marginLeft: 0,\n      height: \"20px\",\n      fontSize: \"10px\",\n      marginBottom: 3,\n      letterSpacing: \"0.3px\",\n      fontWeight: 400,\n      textTransform: \"uppercase\",\n      onSelect: function onSelect() {\n        return update(a);\n      },\n      isSelected: a === selected,\n      \"aria-controls\": \"panel-\".concat(a)\n    }, a);\n  })));\n};\n\nexport var NavGroupTitle = function NavGroupTitle(_ref) {\n  var title = _ref.title,\n      icon = _ref.icon;\n  return __jsx(Pane, {\n    display: \"flex\",\n    alignItems: \"center\"\n  }, __jsx(Heading, {\n    size: 100,\n    marginTop: 8,\n    marginBottom: 8,\n    marginLeft: 16,\n    marginRight: 16,\n    fontWeight: 700,\n    fontSize: \"13px\",\n    color: \"#d7dae0\",\n    flex: 1\n  }, title), icon);\n};\n\nfunction postRequest(url, data) {\n  return fetch(url, {\n    credentials: \"same-origin\",\n    // 'include', default: 'omit'\n    method: \"POST\",\n    // 'GET', 'PUT', 'DELETE', etc.\n    body: _JSON$stringify({\n      shops: data\n    }),\n    // Use correct payload (matching 'Content-Type')\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\n\nvar Header = function Header(_ref2) {\n  var router = _ref2.router,\n      logo = _ref2.logo,\n      onClick = _ref2.onClick;\n\n  var _useState = useState(\"zinc\"),\n      type = _useState[0],\n      setType = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      key = _useState3[0],\n      setKey = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      secret = _useState4[0],\n      setSecret = _useState4[1];\n\n  var asPath = router.asPath;\n\n  var NavItem = function NavItem(_ref3) {\n    var icon = _ref3.icon,\n        iconColor = _ref3.iconColor,\n        title = _ref3.title,\n        href = _ref3.href;\n    return __jsx(Pane, {\n      borderLeft: \"3px solid \".concat(asPath && asPath.startsWith(href) ? \"rgb(66, 95, 146)\" : \"transparent\"),\n      background: asPath && asPath.startsWith(href) ? \"rgb(35, 61, 106)\" : null,\n      onSelect: onClick\n    }, __jsx(Link, {\n      href: href\n    }, __jsx(Menu.Item, {\n      icon: __jsx(Icon, {\n        icon: icon,\n        color: iconColor || \"#ffffff\",\n        marginRight: \"-8px\",\n        marginLeft: \"13px\",\n        size: 15\n      }),\n      onSelect: onClick,\n      width: \"100%\"\n    }, __jsx(Heading, {\n      color: \"#fff\",\n      size: 500,\n      fontSize: 15,\n      overflow: \"visible\",\n      textTransform: \"capitalize\"\n    }, title))));\n  };\n\n  return __jsx(Pane, {\n    background: \"rgb(23, 43, 77)\",\n    minHeight: \"100vh\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }, __jsx(Pane, null, __jsx(Menu, {\n    width: \"100%\"\n  }, logo, __jsx(Menu.Group, null, __jsx(NavGroupTitle, {\n    title: \"Orders\"\n  }), __jsx(NavItem, {\n    icon: \"delta\",\n    title: \"Pending\",\n    href: \"/pending\"\n  }), __jsx(NavItem, {\n    icon: \"time\",\n    title: \"Processed\",\n    href: \"/processed\"\n  }), __jsx(NavItem, {\n    icon: \"tick-circle\",\n    title: \"Completed\",\n    href: \"/completed\"\n  })), Divider, __jsx(Menu.Group, null, __jsx(NavGroupTitle, {\n    title: \"Products\"\n  }), __jsx(NavItem, {\n    icon: \"database\",\n    title: \"All Products\",\n    href: \"/products\"\n  }), __jsx(NavItem, {\n    icon: \"globe\",\n    title: \"Marketplace\",\n    href: \"/find\"\n  })), Divider, __jsx(Menu.Group, null, __jsx(NavGroupTitle, {\n    title: __jsx(Link, {\n      href: \"/shops\"\n    }, __jsx(Pane, {\n      color: \"#d7dae0\",\n      cursor: \"pointer\"\n    }, \"Shops\")),\n    icon: __jsx(Popover, {\n      content: __jsx(Pane, {\n        width: 300,\n        display: \"flex\",\n        alignItems: \"left\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        padding: 15\n      }, __jsx(\"form\", {\n        method: \"GET\",\n        action: \"/shopify/auth\",\n        style: {\n          width: \"100%\"\n        }\n      }, __jsx(TextInputField, {\n        label: \"Shop Name\",\n        marginBottom: \"10px\"\n      }), __jsx(TextInputField, {\n        label: \"Shop URL\",\n        marginBottom: \"10px\",\n        hint: \"Must end in .myshopify.com\",\n        id: \"shop\",\n        name: \"shop\"\n      }), __jsx(Button, {\n        width: \"100%\",\n        justifyContent: \"center\",\n        appearance: \"primary\",\n        intent: \"success\",\n        fontSize: \"12px\",\n        paddingY: 3\n      }, \"Go to Shopify\")))\n    }, __jsx(IconButton, {\n      height: 20,\n      icon: \"plus\",\n      marginRight: 16,\n      appearance: \"primary\",\n      intent: \"success\",\n      borderRadius: 20,\n      outline: \"none\"\n    }))\n  }), __jsx(Query, {\n    query: shopsQuery,\n    variables: shopsQueryVars\n  }, function (_ref4) {\n    var data = _ref4.data,\n        error = _ref4.error,\n        loading = _ref4.loading;\n    if (error || !data.shops) return null;\n    var shops = data.shops;\n    postRequest(\"\".concat(false ? front : prodFront, \"/_shopify\"), shops);\n    return shops.map(function (shop, index) {\n      return __jsx(Pane, {\n        key: index\n      }, __jsx(NavItem, {\n        icon: __jsx(Pane, {\n          marginRight: \"-8px\",\n          marginLeft: \"13px\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          display: \"flex\"\n        }, __jsx(\"svg\", {\n          version: \"1.1\",\n          xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n          x: \"0px\",\n          y: \"0px\",\n          width: \"16px\",\n          height: \"16px\",\n          viewBox: \"0 0 48 48\",\n          enableBackground: \"new 0 0 16 16\",\n          xmlSpace: \"preserve\",\n          fill: \"#47B881\"\n        }, __jsx(\"path\", {\n          d: \"M24 0C10.746 0 0 10.746 0 24s10.746 24 24 24 24-10.746 24-24S37.254 0 24 0zm0 36c-6.627 0-12-5.373-12-12s5.373-12 12-12 12 5.373 12 12-5.373 12-12 12z\"\n        }))),\n        iconColor: \"success\",\n        title: shop.name,\n        href: \"/shop?shop=\".concat(shop.domain.split(\".\")[0])\n      }));\n    });\n  })), Divider, __jsx(Menu.Group, null, __jsx(NavGroupTitle, {\n    title: __jsx(Pane, {\n      color: \"#d7dae0\",\n      cursor: \"pointer\"\n    }, \"Channels\"),\n    icon: __jsx(Popover, {\n      content: __jsx(Pane, {\n        width: 300,\n        display: \"flex\",\n        alignItems: \"left\",\n        justifyContent: \"center\",\n        flexDirection: \"column\",\n        padding: 15\n      }, option(\"Channel Type\", [\"zinc\", \"custom\"], function (a) {\n        return setType(a);\n      }, type), __jsx(TextInputField, {\n        label: \"Name\",\n        marginBottom: \"10px\",\n        value: name,\n        onChange: function onChange(e) {\n          return setName(e.target.value);\n        }\n      }), type === \"zinc\" && __jsx(TextInputField, {\n        label: \"API Key\",\n        marginBottom: \"10px\",\n        hint: \"You must get the key at Zinc.io\",\n        value: key,\n        onChange: function onChange(e) {\n          return setKey(e.target.value);\n        }\n      }), type === \"custom\" && __jsx(React.Fragment, null, __jsx(TextInputField, {\n        label: \"API Key\",\n        marginBottom: \"10px\",\n        value: key,\n        onChange: function onChange(e) {\n          return setKey(e.target.value);\n        } // value={customKey}\n        // onChange={e => setCustomKey(e.value)}\n\n      }), __jsx(TextInputField, {\n        label: \"Secret\",\n        value: secret,\n        onChange: function onChange(e) {\n          return setSecret(e.target.value);\n        }\n      })), __jsx(Mutation, {\n        mutation: CREATE_CHANNEL_MUTATION,\n        refetchQueries: [{\n          query: channelsQuery,\n          variables: channelsQueryVars\n        }]\n      }, function (createChannel, _ref5) {\n        var error = _ref5.error,\n            loading = _ref5.loading;\n        return __jsx(Button, {\n          width: \"100%\",\n          justifyContent: \"center\",\n          appearance: \"primary\",\n          intent: \"success\",\n          fontSize: \"12px\",\n          paddingY: 3,\n          onClick: function _callee() {\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _regeneratorRuntime.awrap(createChannel({\n                      variables: {\n                        type: type.toUpperCase(),\n                        name: name,\n                        settings: _objectSpread({}, key && {\n                          key: key\n                        }, {}, secret && {\n                          secret: secret\n                        })\n                      }\n                    }));\n\n                  case 2:\n                    setName(\"\");\n                    setKey(\"\");\n                    setSecret(\"\");\n                    toaster.success(\"Channel has been added \");\n\n                  case 6:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            });\n          }\n        }, \"Add Channel\");\n      }))\n    }, __jsx(IconButton, {\n      height: 20,\n      icon: \"plus\",\n      marginRight: 16,\n      appearance: \"primary\",\n      intent: \"success\",\n      borderRadius: 20,\n      outline: \"none\"\n    }))\n  }), __jsx(Query, {\n    query: channelsQuery,\n    variables: channelsQueryVars\n  }, function (_ref6) {\n    var data = _ref6.data,\n        error = _ref6.error,\n        loading = _ref6.loading;\n    if (error || !data.channels) return null;\n    var channels = data.channels;\n    return channels.map(function (channel, index) {\n      return __jsx(Pane, {\n        key: index\n      }, __jsx(NavItem, {\n        icon: __jsx(Pane, {\n          marginRight: \"-8px\",\n          marginLeft: \"13px\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          display: \"flex\"\n        }, __jsx(\"svg\", {\n          version: \"1.1\",\n          xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n          x: \"0px\",\n          y: \"0px\",\n          width: \"16px\",\n          height: \"16px\",\n          viewBox: \"0 0 48 48\",\n          enableBackground: \"new 0 0 16 16\",\n          xmlSpace: \"preserve\",\n          fill: \"#47B881\"\n        }, __jsx(\"path\", {\n          d: \"M24 0C10.746 0 0 10.746 0 24s10.746 24 24 24 24-10.746 24-24S37.254 0 24 0zm0 36c-6.627 0-12-5.373-12-12s5.373-12 12-12 12 5.373 12 12-5.373 12-12 12z\"\n        }))),\n        iconColor: \"success\",\n        title: channel.name,\n        href: \"/channel?channel=\".concat(channel.name)\n      }));\n    });\n  })), Divider, __jsx(Menu.Group, null, __jsx(NavItem, {\n    icon: \"cog\",\n    title: \"Settings\",\n    href: \"/settings\"\n  })))), __jsx(Pane, {\n    marginTop: \"auto\"\n  }, __jsx(Signout, null)));\n};\n\nexport default withRouter(Header);","map":null,"metadata":{},"sourceType":"module"}