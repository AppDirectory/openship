{"version":3,"file":"static/webpack/static/development/pages/completed.js.f371010b7d5588f70b1e.hot-update.js","sources":["webpack:///./components/completed/completedOrderList/CompletedOrderList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport Link from 'next/link';\nimport {\n  Box,\n  Heading,\n  Spinner,\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  Button,\n  DrawerBody,\n  InputGroup,\n  InputLeftElement,\n  Icon,\n  Input,\n  useDisclosure,\n} from '@chakra-ui/core';\nimport PropTypes from 'prop-types';\nimport { useQuery } from '@apollo/react-hooks';\nimport ShopSelect from '../../common/ShopSelect';\nimport OrderListItem from '../../common/orderListItem/OrderListItem';\nimport Reshipment from '../../common/Reshipment';\nimport { OrderDetailsComp } from '../../common/OrderDetails';\nimport { CardStyle } from '../../common/DefaultStyles';\n\nexport const SHOP_ORDERS_QUERY = gql`\n  query shopOrders(\n    $domain: String!\n    $first: Int\n    $after: String\n    $before: String\n    $last: Int\n    $query: String\n  ) {\n    shopOrders(\n      domain: $domain\n      first: $first\n      after: $after\n      before: $before\n      last: $last\n      query: $query\n    ) {\n      pageInfo\n      edges\n    }\n  }\n`;\n\nexport default function CompletedOrderList({ shops }) {\n  const [client, setClient] = useState(\n    shops.length && shops[0].domain.split('.')[0]\n  );\n  const [afterCursor, setAfterCursor] = useState(null);\n  const [beforeCursor, setBeforeCursor] = useState(null);\n  const [query, setQuery] = useState('');\n  const [first, setFirst] = useState(10);\n  const [last, setLast] = useState(null);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [selectedOrder2, setSelectedOrder2] = useState(null);\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    isOpen: drawerIsOpen,\n    onOpen: drawerOnOpen,\n    onClose: drawerOnClose,\n  } = useDisclosure();\n\n  const { data, error, loading } = useQuery(SHOP_ORDERS_QUERY, {\n    variables: {\n      domain: `${client}.myshopify.com`,\n      after: afterCursor,\n      before: beforeCursor,\n      first,\n      last,\n      query,\n    },\n  });\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function updateDialog(arg) {\n    onOpen();\n    setSelectedOrder(arg);\n  }\n\n  function updateDrawer(arg) {\n    drawerOnOpen();\n    setSelectedOrder2(arg);\n  }\n  return (\n    <>\n      <Box display=\"flex\" py={4}>\n        <Box flex={1} alignItems=\"center\" display=\"flex\">\n          <Heading fontSize=\"2xl\" color=\"text\" fontWeight={500}>\n            Completed Orders\n          </Heading>\n        </Box>\n      </Box>\n      {selectedOrder2 && (\n        <Drawer\n          size=\"md\"\n          isOpen={drawerIsOpen}\n          placement=\"right\"\n          onClose={drawerOnClose}\n        >\n          <DrawerOverlay />\n          <DrawerContent>\n            {/* <DrawerCloseButton /> */}\n            <DrawerBody bg=\"#f9f9fb\" p={0}>\n              <Box>\n                <OrderDetailsComp\n                  {...data.shopOrders.edges.filter(\n                    order => order.node.id.split('/').pop() === selectedOrder2\n                  )[0].node}\n                  store={client}\n                  backgroundColor=\"white\"\n                  onOpen={() => updateDialog(selectedOrder2)}\n                />\n              </Box>\n            </DrawerBody>\n          </DrawerContent>\n        </Drawer>\n      )}\n      {client ? (\n        <Box {...CardStyle}>\n          <Box display=\"block\" padding=\"1em\">\n            <Box display=\"flex\">\n              <InputGroup width=\"100%\" borderColor=\"gray.300\">\n                <InputLeftElement\n                  children={<Icon name=\"search\" color=\"gray.300\" />}\n                />\n                <Input\n                  value={query}\n                  onChange={e => setQuery(e.target.value)}\n                  type=\"phone\"\n                  placeholder=\"Search\"\n                />\n              </InputGroup>\n            </Box>\n            <Box>\n              <ShopSelect\n                client={client}\n                shops={shops}\n                updateClient={updateClient}\n              />\n            </Box>\n          </Box>\n\n          {(() => {\n            if (loading)\n              return (\n                <Box\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                  height=\"100vh\"\n                >\n                  <Spinner\n                    thickness=\"4px\"\n                    speed=\"0.65s\"\n                    emptyColor=\"gray.200\"\n                    color=\"blue.500\"\n                    size=\"xl\"\n                  />\n                </Box>\n              );\n            if (error || !data.shopOrders) return <div>{error}</div>;\n            return (\n              <>\n                <Box width=\"100%\">\n                  {selectedOrder && (\n                    <Reshipment\n                      isOpen={isOpen}\n                      onClose={onClose}\n                      order={\n                        data.shopOrders.edges.filter(\n                          order =>\n                            order.node.id.split('/').pop() === selectedOrder\n                        ).length > 0 &&\n                        data.shopOrders.edges.filter(\n                          order =>\n                            order.node.id.split('/').pop() === selectedOrder\n                        )[0].node\n                      }\n                      shop={client}\n                    />\n                  )}\n                  {data.shopOrders.edges.map((order, index) => (\n                    <Box borderTop=\"0.1rem solid #dfe3e8\">\n                      <OrderListItem\n                        key={index}\n                        disabled\n                        client={client}\n                        orderName={order.node.name}\n                        first_name={\n                          order.node.shippingAddress.name.split(' ')[0]\n                        }\n                        last_name={order.node.shippingAddress.name\n                          .split(' ')\n                          .pop()}\n                        streetAddress1={order.node.shippingAddress.address1}\n                        streetAddress2={order.node.shippingAddress.address2}\n                        city={order.node.shippingAddress.city}\n                        state={order.node.shippingAddress.province}\n                        zip={order.node.shippingAddress.zip}\n                        shopName={client}\n                        lineItems={order.node.lineItems.edges}\n                        createAt={order.node.processedAt}\n                        note={order.node.note && order.node.note}\n                        email={order.node.email}\n                        // errorText={order.node.note && order.node.note}\n                        // processText={order.node.note && order.node.note}\n                        orderId={order.node.id.split('/').pop()}\n                        buttons={\n                          <>\n                            <Button\n                              background=\"#DDEBF7\"\n                              borderRadius={3}\n                              marginRight={1}\n                              px={2}\n                              height={5}\n                              onClick={() =>\n                                updateDialog(order.node.id.split('/').pop())\n                              }\n                            >\n                              <Heading\n                                fontSize=\"xs\"\n                                fontWeight={700}\n                                color=\"#1070CA\"\n                                marginRight={2}\n                              >\n                                RESHIP\n                              </Heading>\n                              <Icon size={3} color=\"#1070CA\" name=\"repeat\" />\n                            </Button>\n                            <Link\n                              href={{\n                                pathname: '/completed',\n                              }}\n                              as={`/order?store=${client}&name=${\n                                order.node.name\n                              }`}\n                            >\n                              <Button\n                                onClick={() =>\n                                  updateDrawer(order.node.id.split('/').pop())\n                                }\n                                bg=\"transparent\"\n                                color=\"#66788a\"\n                                aria-label=\"show order\"\n                                height=\"1.3rem\"\n                                minWidth=\"1.3rem\"\n                                px={0}\n                                ml={1}\n                              >\n                                <Icon name=\"arrow-forward\" size=\"18px\" />\n                              </Button>\n                            </Link>\n                          </>\n                        }\n                      />\n                    </Box>\n                  ))}\n                </Box>\n              </>\n            );\n          })()}\n        </Box>\n      ) : (\n        <Box\n          background=\"white\"\n          display=\"flex\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          flexDirection=\"column\"\n          borderRadius={3}\n        >\n          <Heading margin=\"1em\" size={600}>\n            Your orders will appear here after you add a shop.\n          </Heading>\n        </Box>\n      )}\n    </>\n  );\n}\n\nCompletedOrderList.propTypes = {\n  shops: PropTypes.string,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAuBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAoBA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAnBA;AAAA;AAAA;AACA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAJA;AASA;AAAA;AAAA;AAIA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AANA;AAeA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AADA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAUA;AACA;AACA;AAHA;AASA;AAGA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AALA;AASA;AACA;AAEA;AAAA;AAGA;AACA;AACA;AAEA;AAAA;AAIA;AAAA;AAIA;AAbA;AAgBA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAtBA;AAuBA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAWA;AACA;AACA;AACA;AAJA;AAQA;AAAA;AAAA;AAAA;AAGA;AACA;AADA;AAGA;AAJA;AASA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAYA;AAAA;AAAA;AAlEA;AAFA;AA+EA;AAIA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAAA;AAAA;AAOA;AAEA;AACA;AADA;;;;A","sourceRoot":""}