{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation SIGNUP_MUTATION(\\n    $email: String!\\n    $name: String!\\n    $password: String!\\n  ) {\\n    signup(email: $email, name: $name, password: $password) {\\n      id\\n      email\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\nvar SIGNUP_MUTATION = gql(_templateObject());\n\nfunction Signup(_ref) {\n  var formChange = _ref.formChange;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      password = _useState4[0],\n      setPassword = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      email = _useState6[0],\n      setEmail = _useState6[1];\n\n  return React.createElement(Mutation, {\n    mutation: SIGNUP_MUTATION,\n    variables: {\n      name: name,\n      password: password,\n      email: email\n    },\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }]\n  }, function (signup, _ref2) {\n    var error = _ref2.error,\n        loading = _ref2.loading;\n    return React.createElement(Userform, {\n      title: \"Create an account\",\n      handleToggleClick: function handleToggleClick() {\n        return formChange();\n      },\n      buttonTitle: \"Sign Up\",\n      buttonColor: \"#47B881\",\n      error: error,\n      loading: loading,\n      buttonDisabled: !email || !password || !name,\n      fields: [{\n        label: 'Name',\n        value: name,\n        onChange: setName,\n        icon: 'person'\n      }, {\n        label: 'Email',\n        value: email,\n        onChange: setEmail,\n        icon: 'envelope'\n      }, {\n        label: 'Password',\n        value: password,\n        onChange: setPassword,\n        icon: 'lock'\n      }],\n      bottomText: \"Already have an account?\",\n      bottomLinkText: \"Sign In\",\n      onSubmit:\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(e) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  e.preventDefault();\n                  _context.next = 3;\n                  return signup();\n\n                case 3:\n                  setName('');\n                  setEmail('');\n                  setPassword('');\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }()\n    });\n  });\n}\n\nexport default Signup;\nSignup.propTypes = {\n  formChange: PropTypes.func\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/user/Signup.js"],"names":["React","useState","Mutation","PropTypes","gql","CURRENT_USER_QUERY","Userform","SIGNUP_MUTATION","Signup","formChange","name","setName","password","setPassword","email","setEmail","query","signup","error","loading","label","value","onChange","icon","e","preventDefault","propTypes","func"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,kBAAT,QAAmC,QAAnC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,eAAe,GAAGH,GAAH,mBAArB;;AAcA,SAASI,MAAT,OAAgC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACNR,QAAQ,CAAC,EAAD,CADF;AAAA;AAAA,MACvBS,IADuB;AAAA,MACjBC,OADiB;;AAAA,mBAEEV,QAAQ,CAAC,EAAD,CAFV;AAAA;AAAA,MAEvBW,QAFuB;AAAA,MAEbC,WAFa;;AAAA,mBAGJZ,QAAQ,CAAC,EAAD,CAHJ;AAAA;AAAA,MAGvBa,KAHuB;AAAA,MAGhBC,QAHgB;;AAK9B,SACE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAER,eADZ;AAEE,IAAA,SAAS,EAAE;AAAEG,MAAAA,IAAI,EAAJA,IAAF;AAAQE,MAAAA,QAAQ,EAARA,QAAR;AAAkBE,MAAAA,KAAK,EAALA;AAAlB,KAFb;AAGE,IAAA,cAAc,EAAE,CAAC;AAAEE,MAAAA,KAAK,EAAEX;AAAT,KAAD;AAHlB,KAKG,UAACY,MAAD;AAAA,QAAWC,KAAX,SAAWA,KAAX;AAAA,QAAkBC,OAAlB,SAAkBA,OAAlB;AAAA,WACC,oBAAC,QAAD;AACE,MAAA,KAAK,EAAC,mBADR;AAEE,MAAA,iBAAiB,EAAE;AAAA,eAAMV,UAAU,EAAhB;AAAA,OAFrB;AAGE,MAAA,WAAW,EAAC,SAHd;AAIE,MAAA,WAAW,EAAC,SAJd;AAKE,MAAA,KAAK,EAAES,KALT;AAME,MAAA,OAAO,EAAEC,OANX;AAOE,MAAA,cAAc,EAAE,CAACL,KAAD,IAAU,CAACF,QAAX,IAAuB,CAACF,IAP1C;AAQE,MAAA,MAAM,EAAE,CACN;AAAEU,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,KAAK,EAAEX,IAAxB;AAA8BY,QAAAA,QAAQ,EAAEX,OAAxC;AAAiDY,QAAAA,IAAI,EAAE;AAAvD,OADM,EAEN;AACEH,QAAAA,KAAK,EAAE,OADT;AAEEC,QAAAA,KAAK,EAAEP,KAFT;AAGEQ,QAAAA,QAAQ,EAAEP,QAHZ;AAIEQ,QAAAA,IAAI,EAAE;AAJR,OAFM,EASN;AACEH,QAAAA,KAAK,EAAE,UADT;AAEEC,QAAAA,KAAK,EAAET,QAFT;AAGEU,QAAAA,QAAQ,EAAET,WAHZ;AAIEU,QAAAA,IAAI,EAAE;AAJR,OATM,CARV;AAwBE,MAAA,UAAU,EAAC,0BAxBb;AAyBE,MAAA,cAAc,EAAC,SAzBjB;AA0BE,MAAA,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAE,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACRA,kBAAAA,CAAC,CAACC,cAAF;AADQ;AAAA,yBAEFR,MAAM,EAFJ;;AAAA;AAGRN,kBAAAA,OAAO,CAAC,EAAD,CAAP;AACAI,kBAAAA,QAAQ,CAAC,EAAD,CAAR;AACAF,kBAAAA,WAAW,CAAC,EAAD,CAAX;;AALQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA;AA1BV,MADD;AAAA,GALH,CADF;AA4CD;;AAED,eAAeL,MAAf;AAEAA,MAAM,CAACkB,SAAP,GAAmB;AACjBjB,EAAAA,UAAU,EAAEN,SAAS,CAACwB;AADL,CAAnB","sourcesContent":["import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport PropTypes from 'prop-types';\nimport gql from 'graphql-tag';\nimport { CURRENT_USER_QUERY } from './User';\nimport Userform from './Userform';\n\nconst SIGNUP_MUTATION = gql`\n  mutation SIGNUP_MUTATION(\n    $email: String!\n    $name: String!\n    $password: String!\n  ) {\n    signup(email: $email, name: $name, password: $password) {\n      id\n      email\n      name\n    }\n  }\n`;\n\nfunction Signup({ formChange }) {\n  const [name, setName] = useState('');\n  const [password, setPassword] = useState('');\n  const [email, setEmail] = useState('');\n\n  return (\n    <Mutation\n      mutation={SIGNUP_MUTATION}\n      variables={{ name, password, email }}\n      refetchQueries={[{ query: CURRENT_USER_QUERY }]}\n    >\n      {(signup, { error, loading }) => (\n        <Userform\n          title=\"Create an account\"\n          handleToggleClick={() => formChange()}\n          buttonTitle=\"Sign Up\"\n          buttonColor=\"#47B881\"\n          error={error}\n          loading={loading}\n          buttonDisabled={!email || !password || !name}\n          fields={[\n            { label: 'Name', value: name, onChange: setName, icon: 'person' },\n            {\n              label: 'Email',\n              value: email,\n              onChange: setEmail,\n              icon: 'envelope',\n            },\n\n            {\n              label: 'Password',\n              value: password,\n              onChange: setPassword,\n              icon: 'lock',\n            },\n          ]}\n          bottomText=\"Already have an account?\"\n          bottomLinkText=\"Sign In\"\n          onSubmit={async e => {\n            e.preventDefault();\n            await signup();\n            setName('');\n            setEmail('');\n            setPassword('');\n          }}\n        />\n      )}\n    </Mutation>\n  );\n}\n\nexport default Signup;\n\nSignup.propTypes = {\n  formChange: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}