{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation SIGNUP_MUTATION($email: String!) {\\n    requestReset(email: $email) {\\n      message\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport Userform from './Userform';\nvar REUQEST_RESET_MUTATION = gql(_templateObject());\n\nfunction RequestReset(_ref) {\n  var formChange = _ref.formChange;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      email = _useState2[0],\n      setEmail = _useState2[1];\n\n  return React.createElement(Mutation, {\n    mutation: REUQEST_RESET_MUTATION,\n    variables: {\n      email: email\n    }\n  }, function (reset, _ref2) {\n    var error = _ref2.error,\n        loading = _ref2.loading,\n        called = _ref2.called;\n    return React.createElement(Userform, {\n      title: \"Please enter your email and we'll send a link to reset your password\",\n      handleToggleClick: function handleToggleClick() {\n        return formChange();\n      },\n      buttonTitle: \"Send Reset Link\",\n      buttonColor: \"#14B5D0\",\n      error: error,\n      loading: loading,\n      buttonDisabled: !email,\n      fields: [{\n        label: 'Email',\n        value: email,\n        onChange: setEmail,\n        icon: 'envelope'\n      }],\n      bottomLinkText: \"Back to sign in\",\n      onSubmit:\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee(e) {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  e.preventDefault();\n                  _context.next = 3;\n                  return reset();\n\n                case 3:\n                  setEmail('');\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      success: called\n    });\n  });\n}\n\nexport default RequestReset;\nRequestReset.propTypes = {\n  formChange: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/user/RequestReset.js"],"names":["React","useState","Mutation","gql","PropTypes","Userform","REUQEST_RESET_MUTATION","RequestReset","formChange","email","setEmail","reset","error","loading","called","label","value","onChange","icon","e","preventDefault","propTypes","func","isRequired"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,IAAMC,sBAAsB,GAAGH,GAAH,mBAA5B;;AAQA,SAASI,YAAT,OAAsC;AAAA,MAAdC,UAAc,QAAdA,UAAc;;AAAA,kBACVP,QAAQ,CAAC,EAAD,CADE;AAAA;AAAA,MAC7BQ,KAD6B;AAAA,MACtBC,QADsB;;AAGpC,SACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEJ,sBAApB;AAA4C,IAAA,SAAS,EAAE;AAAEG,MAAAA,KAAK,EAALA;AAAF;AAAvD,KACG,UAACE,KAAD;AAAA,QAAUC,KAAV,SAAUA,KAAV;AAAA,QAAiBC,OAAjB,SAAiBA,OAAjB;AAAA,QAA0BC,MAA1B,SAA0BA,MAA1B;AAAA,WACC,oBAAC,QAAD;AACE,MAAA,KAAK,EAAC,sEADR;AAEE,MAAA,iBAAiB,EAAE;AAAA,eAAMN,UAAU,EAAhB;AAAA,OAFrB;AAGE,MAAA,WAAW,EAAC,iBAHd;AAIE,MAAA,WAAW,EAAC,SAJd;AAKE,MAAA,KAAK,EAAEI,KALT;AAME,MAAA,OAAO,EAAEC,OANX;AAOE,MAAA,cAAc,EAAE,CAACJ,KAPnB;AAQE,MAAA,MAAM,EAAE,CACN;AACEM,QAAAA,KAAK,EAAE,OADT;AAEEC,QAAAA,KAAK,EAAEP,KAFT;AAGEQ,QAAAA,QAAQ,EAAEP,QAHZ;AAIEQ,QAAAA,IAAI,EAAE;AAJR,OADM,CARV;AAgBE,MAAA,cAAc,EAAC,iBAhBjB;AAiBE,MAAA,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAE,iBAAMC,CAAN;AAAA;AAAA;AAAA;AAAA;AACRA,kBAAAA,CAAC,CAACC,cAAF;AADQ;AAAA,yBAEFT,KAAK,EAFH;;AAAA;AAGRD,kBAAAA,QAAQ,CAAC,EAAD,CAAR;;AAHQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAF;;AAAA;AAAA;AAAA;AAAA,SAjBV;AAsBE,MAAA,OAAO,EAAEI;AAtBX,MADD;AAAA,GADH,CADF;AA8BD;;AAED,eAAeP,YAAf;AAEAA,YAAY,CAACc,SAAb,GAAyB;AACvBb,EAAAA,UAAU,EAAEJ,SAAS,CAACkB,IAAV,CAAeC;AADJ,CAAzB","sourcesContent":["import React, { useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport gql from 'graphql-tag';\nimport PropTypes from 'prop-types';\nimport Userform from './Userform';\n\nconst REUQEST_RESET_MUTATION = gql`\n  mutation SIGNUP_MUTATION($email: String!) {\n    requestReset(email: $email) {\n      message\n    }\n  }\n`;\n\nfunction RequestReset({ formChange }) {\n  const [email, setEmail] = useState('');\n\n  return (\n    <Mutation mutation={REUQEST_RESET_MUTATION} variables={{ email }}>\n      {(reset, { error, loading, called }) => (\n        <Userform\n          title=\"Please enter your email and we'll send a link to reset your password\"\n          handleToggleClick={() => formChange()}\n          buttonTitle=\"Send Reset Link\"\n          buttonColor=\"#14B5D0\"\n          error={error}\n          loading={loading}\n          buttonDisabled={!email}\n          fields={[\n            {\n              label: 'Email',\n              value: email,\n              onChange: setEmail,\n              icon: 'envelope',\n            },\n          ]}\n          bottomLinkText=\"Back to sign in\"\n          onSubmit={async e => {\n            e.preventDefault();\n            await reset();\n            setEmail('');\n          }}\n          success={called}\n        />\n      )}\n    </Mutation>\n  );\n}\n\nexport default RequestReset;\n\nRequestReset.propTypes = {\n  formChange: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}