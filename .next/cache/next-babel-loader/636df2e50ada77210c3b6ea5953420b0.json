{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport withApollo from \"next-with-apollo\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { endpoint, prodEndpoint } from \"../config\";\nexport default withApollo(function (_ref) {\n  var initialState = _ref.initialState,\n      headers = _ref.headers;\n  return new ApolloClient({\n    uri: true ? endpoint : prodEndpoint,\n    cache: new InMemoryCache().restore(initialState || {}),\n    request: function request(operation) {\n      operation.setContext({\n        fetchOptions: {\n          credentials: \"include\"\n        },\n        headers: headers\n      });\n    }\n  });\n}, {\n  render: function render(_ref2) {\n    var Page = _ref2.Page,\n        props = _ref2.props;\n    return __jsx(ApolloProvider, {\n      client: props.apollo\n    }, __jsx(Page, props));\n  }\n}); // function createClient({ headers }) {\n//   return new ApolloClient({\n//     uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n//     request: operation => {\n//       operation.setContext({\n//         fetchOptions: {\n//           credentials: 'include',\n//         },\n//         headers,\n//       });\n//     },\n//   });\n// }\n// export default withApollo(createClient);","map":{"version":3,"sources":["/Users/junaid/openship/lib/withData.js"],"names":["withApollo","ApolloClient","InMemoryCache","ApolloProvider","endpoint","prodEndpoint","initialState","headers","uri","cache","restore","request","operation","setContext","fetchOptions","credentials","render","Page","props","apollo"],"mappings":";;AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,YAAP,IAAuBC,aAAvB,QAA4C,cAA5C;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,QAAT,EAAmBC,YAAnB,QAAuC,WAAvC;AAEA,eAAeL,UAAU,CACvB,gBAA+B;AAAA,MAA5BM,YAA4B,QAA5BA,YAA4B;AAAA,MAAdC,OAAc,QAAdA,OAAc;AAC7B,SAAO,IAAIN,YAAJ,CAAiB;AACtBO,IAAAA,GAAG,EAAE,OAAyCJ,QAAzC,GAAoDC,YADnC;AAEtBI,IAAAA,KAAK,EAAE,IAAIP,aAAJ,GAAoBQ,OAApB,CAA4BJ,YAAY,IAAI,EAA5C,CAFe;AAGtBK,IAAAA,OAAO,EAAE,iBAAAC,SAAS,EAAI;AACpBA,MAAAA,SAAS,CAACC,UAAV,CAAqB;AACnBC,QAAAA,YAAY,EAAE;AACZC,UAAAA,WAAW,EAAE;AADD,SADK;AAInBR,QAAAA,OAAO,EAAPA;AAJmB,OAArB;AAMD;AAVqB,GAAjB,CAAP;AAYD,CAdsB,EAevB;AACES,EAAAA,MAAM,EAAE,uBAAqB;AAAA,QAAlBC,IAAkB,SAAlBA,IAAkB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AAC3B,WACE,MAAC,cAAD;AAAgB,MAAA,MAAM,EAAEA,KAAK,CAACC;AAA9B,OACE,MAAC,IAAD,EAAUD,KAAV,CADF,CADF;AAKD;AAPH,CAfuB,CAAzB,C,CA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import withApollo from \"next-with-apollo\";\nimport ApolloClient, { InMemoryCache } from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { endpoint, prodEndpoint } from \"../config\";\n\nexport default withApollo(\n  ({ initialState, headers }) => {\n    return new ApolloClient({\n      uri: process.env.NODE_ENV === \"development\" ? endpoint : prodEndpoint,\n      cache: new InMemoryCache().restore(initialState || {}),\n      request: operation => {\n        operation.setContext({\n          fetchOptions: {\n            credentials: \"include\"\n          },\n          headers\n        });\n      }\n    });\n  },\n  {\n    render: ({ Page, props }) => {\n      return (\n        <ApolloProvider client={props.apollo}>\n          <Page {...props} />\n        </ApolloProvider>\n      );\n    }\n  }\n);\n\n// function createClient({ headers }) {\n//   return new ApolloClient({\n//     uri: process.env.NODE_ENV === 'development' ? endpoint : prodEndpoint,\n//     request: operation => {\n//       operation.setContext({\n//         fetchOptions: {\n//           credentials: 'include',\n//         },\n//         headers,\n//       });\n//     },\n//   });\n// }\n\n// export default withApollo(createClient);\n"]},"metadata":{},"sourceType":"module"}