{"ast":null,"code":"import React from \"react\";\nimport { Pane, Heading, Text, Icon, TextInput } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport Button from '../common/Button';\nimport ErrorMessage from '../common/ErrorMessage';\nconst sucessCard = {\n  paddingX: 10,\n  paddingY: 5,\n  background: '#F1FAF5',\n  borderRadius: 3,\n  display: 'flex',\n  alignItems: 'center'\n};\n\nconst Userform = ({\n  title,\n  fields,\n  handleToggleClick,\n  links,\n  buttonTitle,\n  buttonColor,\n  bottomText,\n  bottomLinkText,\n  onSubmit,\n  buttonDisabled,\n  error,\n  loading,\n  success\n}) => React.createElement(React.Fragment, null, React.createElement(Pane, {\n  width: 350,\n  alignItems: \"center\" // background=\"white\"\n  // padding={25}\n  // borderRadius={5}\n  // boxShadow=\"0 0 1px rgba(67,90,111,.47), 0 2px 4px -2px rgba(67,90,111,.3)\"\n\n}, React.createElement(Pane, {\n  marginBottom: 20,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\"\n}, React.createElement(Heading, {\n  size: 500,\n  marginRight: \"auto\",\n  color: \"#425A70\"\n}, title), links && links), fields && fields.map(field => React.createElement(Pane, {\n  position: \"relative\",\n  display: \"inline-flex\",\n  height: 32,\n  width: \"100%\",\n  marginBottom: 20\n}, React.createElement(Pane, {\n  width: 32,\n  height: 32,\n  pointerEvents: \"none\",\n  position: \"absolute\",\n  display: \"flex\",\n  justifyContent: \"center\",\n  alignItems: \"center\"\n}, React.createElement(Icon, {\n  icon: field.icon,\n  color: \"#8b949c\",\n  size: 12,\n  zIndex: 3\n})), React.createElement(TextInput, {\n  className: \"clean-input\",\n  paddingLeft: 32,\n  name: field.label,\n  width: \"100%\",\n  value: field.value,\n  type: field.type || field.label,\n  fontSize: 15,\n  onChange: e => field.onChange(e.target.value),\n  marginBottom: 15,\n  placeholder: field.label,\n  backgroundColor: \"#F5F6F7 !important\"\n}))), React.createElement(Button, {\n  onClick: onSubmit,\n  background: buttonColor,\n  textColor: \"#fff\",\n  width: \"100%\",\n  fontSize: 14,\n  height: 28,\n  disabled: buttonDisabled,\n  isLoading: loading\n}, buttonTitle, React.createElement(Icon, {\n  marginLeft: 10,\n  icon: \"arrow-right\"\n})), React.createElement(Pane, {\n  marginTop: 15\n}, React.createElement(ErrorMessage, {\n  error: error\n})), success && React.createElement(Pane, sucessCard, React.createElement(Icon, {\n  icon: \"tick-circle\",\n  color: \"success\",\n  marginRight: 10\n}), React.createElement(Text, {\n  size: 500,\n  color: \"#47B881\",\n  fontWeight: 500,\n  fontSize: \"14px\"\n}, \"Link sent. Please check your email.\"))), handleToggleClick && React.createElement(Pane, {\n  paddingY: 15\n}, React.createElement(Pane, {\n  alignItems: \"center\",\n  marginBottom: 1\n}, React.createElement(Text, {\n  width: \"100%\",\n  color: \"muted\",\n  textAlign: \"center\"\n}, bottomText)), React.createElement(Pane, {\n  display: \"flex\",\n  alignItems: \"center\"\n}, React.createElement(Text, {\n  onClick: handleToggleClick,\n  color: buttonColor,\n  size: 400,\n  paddingBottom: \"1px\",\n  borderBottom: `2px solid ${buttonColor}`,\n  cursor: \"pointer\",\n  className: \"hover\"\n}, bottomLinkText))));\n\nexport default Userform;\nUserform.propTypes = {\n  title: PropTypes.element,\n  fields: PropTypes.array,\n  handleToggleClick: PropTypes.func,\n  links: PropTypes.element,\n  buttonTitle: PropTypes.string,\n  buttonColor: PropTypes.string,\n  bottomText: PropTypes.string,\n  bottomLinkText: PropTypes.string,\n  onSubmit: PropTypes.func,\n  buttonDisabled: PropTypes.bool,\n  error: PropTypes.object,\n  loading: PropTypes.string,\n  success: PropTypes.bool\n};","map":{"version":3,"sources":["/Users/junaid/openship/components/user/Userform.js"],"names":["Pane","Heading","Text","Icon","TextInput","PropTypes","Button","ErrorMessage","sucessCard","paddingX","paddingY","background","borderRadius","display","alignItems","Userform","title","fields","handleToggleClick","links","buttonTitle","buttonColor","bottomText","bottomLinkText","onSubmit","buttonDisabled","error","loading","success","map","field","icon","label","value","type","e","onChange","target","propTypes","element","array","func","string","bool","object"],"mappings":"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","sourcesContent":["import { Pane, Heading, Text, Icon, TextInput } from 'evergreen-ui';\nimport PropTypes from 'prop-types';\nimport Button from '../common/Button';\nimport ErrorMessage from '../common/ErrorMessage';\n\nconst sucessCard = {\n  paddingX: 10,\n  paddingY: 5,\n  background: '#F1FAF5',\n  borderRadius: 3,\n  display: 'flex',\n  alignItems: 'center',\n};\n\nconst Userform = ({\n  title,\n  fields,\n  handleToggleClick,\n  links,\n  buttonTitle,\n  buttonColor,\n  bottomText,\n  bottomLinkText,\n  onSubmit,\n  buttonDisabled,\n  error,\n  loading,\n  success,\n}) => (\n  <>\n    <Pane\n      width={350}\n      alignItems=\"center\"\n      // background=\"white\"\n      // padding={25}\n      // borderRadius={5}\n      // boxShadow=\"0 0 1px rgba(67,90,111,.47), 0 2px 4px -2px rgba(67,90,111,.3)\"\n    >\n      <Pane\n        marginBottom={20}\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Heading size={500} marginRight=\"auto\" color=\"#425A70\">\n          {title}\n        </Heading>\n        {links && links}\n      </Pane>\n      {fields &&\n        fields.map(field => (\n          <Pane\n            position=\"relative\"\n            display=\"inline-flex\"\n            height={32}\n            width=\"100%\"\n            marginBottom={20}\n          >\n            <Pane\n              width={32}\n              height={32}\n              pointerEvents=\"none\"\n              position=\"absolute\"\n              display=\"flex\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Icon icon={field.icon} color=\"#8b949c\" size={12} zIndex={3} />\n            </Pane>\n            <TextInput\n              className=\"clean-input\"\n              paddingLeft={32}\n              name={field.label}\n              width=\"100%\"\n              value={field.value}\n              type={field.type || field.label}\n              fontSize={15}\n              onChange={e => field.onChange(e.target.value)}\n              marginBottom={15}\n              placeholder={field.label}\n              backgroundColor=\"#F5F6F7 !important\"\n            />\n          </Pane>\n        ))}\n      <Button\n        onClick={onSubmit}\n        background={buttonColor}\n        textColor=\"#fff\"\n        width=\"100%\"\n        fontSize={14}\n        height={28}\n        disabled={buttonDisabled}\n        isLoading={loading}\n      >\n        {buttonTitle}\n        <Icon marginLeft={10} icon=\"arrow-right\" />\n      </Button>\n      <Pane marginTop={15}>\n        <ErrorMessage error={error} />\n      </Pane>\n      {success && (\n        <Pane {...sucessCard}>\n          <Icon icon=\"tick-circle\" color=\"success\" marginRight={10} />\n          <Text size={500} color=\"#47B881\" fontWeight={500} fontSize=\"14px\">\n            Link sent. Please check your email.\n          </Text>\n        </Pane>\n      )}\n    </Pane>\n    {handleToggleClick && (\n      <Pane paddingY={15}>\n        <Pane alignItems=\"center\" marginBottom={1}>\n          <Text width=\"100%\" color=\"muted\" textAlign=\"center\">\n            {bottomText}\n          </Text>\n        </Pane>\n        <Pane display=\"flex\" alignItems=\"center\">\n          <Text\n            onClick={handleToggleClick}\n            color={buttonColor}\n            size={400}\n            paddingBottom=\"1px\"\n            borderBottom={`2px solid ${buttonColor}`}\n            cursor=\"pointer\"\n            className=\"hover\"\n          >\n            {bottomLinkText}\n          </Text>\n        </Pane>\n      </Pane>\n    )}\n  </>\n);\n\nexport default Userform;\n\nUserform.propTypes = {\n  title: PropTypes.element,\n  fields: PropTypes.array,\n  handleToggleClick: PropTypes.func,\n  links: PropTypes.element,\n  buttonTitle: PropTypes.string,\n  buttonColor: PropTypes.string,\n  bottomText: PropTypes.string,\n  bottomLinkText: PropTypes.string,\n  onSubmit: PropTypes.func,\n  buttonDisabled: PropTypes.bool,\n  error: PropTypes.object,\n  loading: PropTypes.string,\n  success: PropTypes.bool,\n};\n"]},"metadata":{},"sourceType":"module"}