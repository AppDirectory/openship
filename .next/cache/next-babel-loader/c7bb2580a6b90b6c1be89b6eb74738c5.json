{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation createWebhook($domain: String!, $accessToken: String!) {\\n    createWebhook(domain: $domain, accessToken: $accessToken) {\\n      userErrors\\n      webhookSubscription\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_SHOP_MUTATION(\\n    $domain: String!\\n    $accessToken: String!\\n    $name: String!\\n  ) {\\n    upsertShop(accessToken: $accessToken, domain: $domain, name: $name) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useMutation } from '@apollo/react-hooks';\nimport { Box, Text, Icon, Switch, Button, Heading, Input, InputGroup, InputLeftElement, Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, ModalFooter } from '@chakra-ui/core';\nimport ShopList, { ALL_SHOPS_QUERY, shopsQueryVars } from '../components/shops/ShopList';\nvar CREATE_SHOP_MUTATION = gql(_templateObject());\nvar WEBHOOK_MUTATION = gql(_templateObject2());\n\nvar Shops = function Shops(_ref) {\n  var shop = _ref.shop,\n      accessToken = _ref.accessToken;\n\n  var _useState = useState(false),\n      open = _useState[0],\n      setOpen = _useState[1];\n\n  var _useState2 = useState(''),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useState3 = useState(false),\n      checked = _useState3[0],\n      setChecked = _useState3[1];\n\n  var _useMutation = useMutation(CREATE_SHOP_MUTATION, {\n    variables: {\n      domain: shop,\n      accessToken: accessToken,\n      name: name\n    },\n    refetchQueries: [{\n      query: ALL_SHOPS_QUERY,\n      variables: shopsQueryVars\n    }]\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      upsertShop = _useMutation2[0];\n\n  var _useMutation3 = useMutation(WEBHOOK_MUTATION, {\n    variables: {\n      domain: shop,\n      accessToken: accessToken\n    }\n  }),\n      _useMutation4 = _slicedToArray(_useMutation3, 1),\n      createWebhook = _useMutation4[0];\n\n  useEffect(function () {\n    if (shop) {\n      setOpen(true);\n      setName(shop.split('.')[0]);\n    }\n  }, [shop]);\n\n  var handleClick = function handleClick() {\n    var data1, data2;\n    return _regeneratorRuntime.async(function handleClick$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(upsertShop());\n\n          case 2:\n            data1 = _context.sent;\n\n            if (!checked) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(createWebhook());\n\n          case 6:\n            data2 = _context.sent;\n\n          case 7:\n            setOpen(false);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Box, null, __jsx(Modal, {\n    isOpen: open,\n    onClose: function onClose() {\n      return setOpen(false);\n    }\n  }, __jsx(ModalOverlay, null), __jsx(ModalContent, null, __jsx(ModalHeader, null, \"Add Shop to Openship\"), __jsx(ModalCloseButton, null), __jsx(ModalBody, null, __jsx(Box, null, __jsx(InputGroup, null, __jsx(InputLeftElement, {\n    children: __jsx(Icon, {\n      name: \"shop\",\n      color: \"gray.500\"\n    })\n  }), __jsx(Input, {\n    color: \"gray.700\",\n    variant: \"filled\",\n    type: \"phone\",\n    placeholder: \"Phone number\",\n    value: name,\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    }\n  })), __jsx(Heading, {\n    lineHeight: \"10px\",\n    fontSize: \"xs\",\n    pr: 3,\n    pt: 2,\n    marginBottom: 4,\n    textTransform: \"uppercase\",\n    fontWeight: 500,\n    color: \"gray.500\"\n  }, \"Shop Name\"), __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\"\n  }, __jsx(Text, {\n    pr: 3,\n    paddingTop: 2,\n    fontSize: 15\n  }, shop)), __jsx(Heading, {\n    lineHeight: \"10px\",\n    fontSize: \"xs\",\n    pr: 3,\n    pt: 2,\n    marginBottom: 4,\n    textTransform: \"uppercase\",\n    fontWeight: 500,\n    color: \"gray.500\"\n  }, \"Shopify URL\")), __jsx(Box, {\n    pt: 4,\n    display: \"flex\",\n    alignItems: \"center\"\n  }, __jsx(Box, {\n    paddingRight: 20\n  }, __jsx(Heading, {\n    fontSize: \"md\",\n    fontWeight: 500,\n    mb: 1,\n    color: \"gray.800\"\n  }, \"Push orders to Openship\"), __jsx(Text, {\n    fontSize: \"sm\",\n    color: \"gray.700\"\n  }, \"Orders will be pushed to the pending tab to be fulfilled\")), __jsx(Switch, {\n    marginLeft: \"auto\",\n    checked: checked,\n    onChange: function onChange(e) {\n      return setChecked(e.target.checked);\n    }\n  }))), __jsx(ModalFooter, null, __jsx(Button, {\n    variant: \"ghost\",\n    color: \"gray.600\",\n    mr: 3\n  }, \"Cancel\"), __jsx(Button, {\n    variant: \"ghost\",\n    variantColor: \"green\",\n    bg: \"green.50\",\n    _hover: {\n      bg: 'green.100'\n    },\n    onClick: function onClick() {\n      return handleClick();\n    }\n  }, \"Confirm\"))))), __jsx(ShopList, null));\n};\n\nShops.getInitialProps = function (_ref2) {\n  var _ref2$query = _ref2.query,\n      shop = _ref2$query.shop,\n      accessToken = _ref2$query.accessToken;\n  return {\n    shop: shop,\n    accessToken: accessToken\n  };\n};\n\nexport default Shops;","map":null,"metadata":{},"sourceType":"module"}