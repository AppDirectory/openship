{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query shopOrders(\\n    $domain: String!\\n    $first: Int\\n    $after: String\\n    $before: String\\n    $last: Int\\n    $query: String\\n  ) {\\n    shopOrders(\\n      domain: $domain\\n      first: $first\\n      after: $after\\n      before: $before\\n      last: $last\\n      query: $query\\n    ) {\\n      pageInfo\\n      edges\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport Link from 'next/link';\nimport { Pane, Heading, SearchInput, Spinner, IconButton, Icon } from 'evergreen-ui';\nimport { Query } from 'react-apollo';\nimport ShopSelect from '../../common/ShopSelect';\nimport OrderListItem from '../../common/orderListItem/OrderListItem';\nimport Pagination from '../../common/Pagination';\nimport Button from '../../common/Button';\nimport Reshipment from '../../common/Reshipment';\nimport { CardStyle } from '../../common/DefaultStyles';\nexport var shopOrders = gql(_templateObject());\nexport default function CompletedOrderList(_ref) {\n  var shops = _ref.shops;\n\n  var _useState = useState(shops.length && shops[0].domain.split('.')[0]),\n      client = _useState[0],\n      setClient = _useState[1];\n\n  var _useState2 = useState(null),\n      afterCursor = _useState2[0],\n      setAfterCursor = _useState2[1];\n\n  var _useState3 = useState(null),\n      beforeCursor = _useState3[0],\n      setBeforeCursor = _useState3[1];\n\n  var _useState4 = useState(''),\n      query = _useState4[0],\n      setQuery = _useState4[1];\n\n  var _useState5 = useState(10),\n      first = _useState5[0],\n      setFirst = _useState5[1];\n\n  var _useState6 = useState(null),\n      last = _useState6[0],\n      setLast = _useState6[1];\n\n  var _useState7 = useState(false),\n      isShown = _useState7[0],\n      setIsShown = _useState7[1];\n\n  var _useState8 = useState(null),\n      selectedOrder = _useState8[0],\n      setSelectedOrder = _useState8[1];\n\n  function updateClient(arg) {\n    setClient(arg);\n    setAfterCursor(null);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function onPrevious(arg) {\n    setAfterCursor(null);\n    setBeforeCursor(arg);\n    setFirst(null);\n    setLast(10);\n  }\n\n  function onNext(arg) {\n    setAfterCursor(arg);\n    setBeforeCursor(null);\n    setFirst(10);\n    setLast(null);\n  }\n\n  function updateDialog(arg) {\n    setIsShown(true);\n    setSelectedOrder(arg);\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Pane, {\n    display: \"flex\",\n    paddingTop: 16,\n    paddingBottom: 16\n  }, __jsx(Pane, {\n    flex: 1,\n    alignItems: \"center\",\n    display: \"flex\"\n  }, __jsx(Heading, {\n    size: 700\n  }, \"Completed Orders\"))), client ? __jsx(Pane, CardStyle, __jsx(Pane, {\n    display: \"block\",\n    padding: \"1em\"\n  }, __jsx(Pane, {\n    display: \"flex\"\n  }, __jsx(SearchInput, {\n    placeholder: \"Search\",\n    width: \"100%\",\n    height: 36,\n    value: query,\n    onChange: function onChange(e) {\n      return setQuery(e.target.value);\n    }\n  })), __jsx(Pane, null, __jsx(ShopSelect, {\n    client: client,\n    shops: shops,\n    updateClient: updateClient\n  }))), __jsx(Query, {\n    query: shopOrders,\n    variables: {\n      domain: \"\".concat(client, \".myshopify.com\"),\n      after: afterCursor,\n      before: beforeCursor,\n      first: first,\n      last: last,\n      query: query\n    }\n  }, function (_ref2) {\n    var data = _ref2.data,\n        error = _ref2.error,\n        loading = _ref2.loading;\n    if (loading) return __jsx(Pane, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      height: \"100vh\"\n    }, __jsx(Spinner, {\n      size: 80\n    }));\n    if (error || !data.shopOrders) return __jsx(\"div\", null, error);\n    return __jsx(React.Fragment, null, __jsx(Pane, {\n      width: \"100%\"\n    }, selectedOrder && __jsx(Reshipment, {\n      isShown: isShown,\n      onCloseComplete: function onCloseComplete() {\n        return setIsShown(false);\n      },\n      order: data.shopOrders.edges.filter(function (order) {\n        return order.node.id.split('/').pop() === selectedOrder;\n      })[0].node,\n      shop: client\n    }), data.shopOrders.edges.map(function (order, index) {\n      return __jsx(Pane, {\n        borderTop: \"0.1rem solid #dfe3e8\"\n      }, __jsx(OrderListItem, {\n        key: index,\n        disabled: true,\n        client: client,\n        orderName: order.node.name,\n        first_name: order.node.shippingAddress.name.split(' ')[0],\n        last_name: order.node.shippingAddress.name.split(' ').pop(),\n        streetAddress1: order.node.shippingAddress.address1,\n        streetAddress2: order.node.shippingAddress.address2,\n        city: order.node.shippingAddress.city,\n        state: order.node.shippingAddress.province,\n        zip: order.node.shippingAddress.zip,\n        shopName: client,\n        lineItems: order.node.lineItems.edges,\n        createAt: order.node.processedAt,\n        note: order.node.note && order.node.note // errorText={order.node.note && order.node.note}\n        // processText={order.node.note && order.node.note}\n        ,\n        orderId: order.node.id.split('/').pop(),\n        buttons: __jsx(React.Fragment, null, __jsx(Pane, {\n          height: 20,\n          marginLeft: 6\n        }, __jsx(Button, {\n          background: \"#F9F9FB\",\n          borderRadius: 3,\n          marginRight: 5,\n          onClick: function onClick() {\n            return updateDialog(order.node.id.split('/').pop());\n          }\n        }, __jsx(Heading, {\n          size: 100,\n          fontWeight: 700,\n          color: \"#234361\",\n          marginRight: 4\n        }, \"RESHIP\"), __jsx(Icon, {\n          color: \"#234361\",\n          icon: \"social-media\",\n          size: 12\n        }))), __jsx(Link, {\n          href: {\n            pathname: '/completed',\n            query: {\n              order: order.node.name,\n              email: order.node.email,\n              name: order.node.name,\n              processedAt: Intl.DateTimeFormat('en-US').format(Date.parse(order.node.processedAt)),\n              shippingAddress: _JSON$stringify(order.node.shippingAddress),\n              totalRecievedSet: order.totalPrice,\n              lineItems: _JSON$stringify(order.node.lineItems),\n              client: client,\n              note: order.node.note && order.node.note,\n              fulfillments: _JSON$stringify(order.node.fulfillments)\n            }\n          },\n          as: \"/order?store=\".concat(client, \"&name=\").concat(order.node.name)\n        }, __jsx(IconButton, {\n          height: 20,\n          appearance: \"minimal\",\n          icon: \"arrow-right\",\n          iconSize: 15,\n          pointerEvents: \"visible\",\n          marginRight: 2,\n          onClick: function onClick(e) {\n            return e.stopPropagation();\n          }\n        })))\n      }));\n    })));\n  })) : __jsx(Pane, {\n    background: \"white\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    borderRadius: 3\n  }, __jsx(Heading, {\n    margin: \"1em\",\n    size: 600\n  }, \"Your orders will appear here after you add a shop.\")));\n}","map":null,"metadata":{},"sourceType":"module"}